{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/webpack-react-ts环境.md","hash":"b76406b9d65fff28695ffaf4f365f40a664db2d8","modified":1632069385180},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"9ffffefd15864b6d6c3225b999b9a8e181df153d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"afdebdb0be4158c0bf0a408109a5aa42c496dffd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"4951af687032c705ca572c9234e94babcc2a6632","modified":1632069463389},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"a20ed899d6a797de0b35c46bfd03722023649187","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"3221ebcb2f308659ed1a86d1d53978aa62576958","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"7dc9e9366a19dc3c7be7ff482fbd19c88e620bf5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"3850424dbb23ca0791b35695e24804492d89f925","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"8ed5ab7ec63f9fd5438d1c497cc5f50ae11fcfdf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"aafbb3c5c20f525a92716d89ff216c3081d7b4da","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"bef7791a2e67e79f02076f2a89e1c7f95a83048c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"5a4e5ed613f3990378f3f632e8f16b33374e0095","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":499162500000},{"_id":"source/_data/head.njk","hash":"8b1e4aa389c23241730ded05e8643994a9b49d8d","modified":1632070461422},{"_id":"source/_posts/es6新特性.md","hash":"84c14d5868f66bf015278fa8623b11766da522de","modified":1632070876872},{"_id":"source/_posts/generator.md","hash":"1e3f6727463c3d51d5d58bf3139dd79e46d9acf2","modified":1632070853524},{"_id":"source/_posts/git push 问题.md","hash":"93537fbfe1212232eaf43817d4202a65c7e3a3be","modified":1632070831444},{"_id":"source/_posts/react-hook.md","hash":"977065e5a34e3fc3e867d9fcdca5095312c18f92","modified":1632070816518},{"_id":"source/_posts/俩数相加.md","hash":"bf5d9cb17e2e21d1e3b1088855db664283dcbcc8","modified":1632070795505},{"_id":"source/_posts/实现Math.pow.md","hash":"3c6b905c35b17dc5ba1fb89414cb8514f40da861","modified":1632070754665},{"_id":"source/_posts/深克隆.md","hash":"8e6822b717fc0cc59c9867d585dd4d506c672ae8","modified":1632070672686},{"_id":"source/_posts/项目没UI,设计图自己画.md","hash":"6bd2c62a7a471cad527d339664819106021a6025","modified":1632070912825}],"Category":[],"Data":[{"_id":"sidebar","data":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}],"Page":[],"Post":[{"title":"webpack-react-ts环境","_content":"最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件\n\n接下来开始吧\n\n```shell\nmkdir proj\ncd proj\n```\n\n```shell\nmkdir src\n```\n\n```shell\nnpm init -y\n```\n\n```shell\nnpm install -g webpack\n```\n\n现在我们添加React和React-DOM以及它们的声明文件到`package.json`文件里做为依赖：\n\n```shell\nnpm install --save react react-dom @types/react @types/react-dom\n```\n\n接下来，我们要添加开发时依赖[awesome-typescript-loader](https://www.npmjs.com/package/awesome-typescript-loader)和[source-map-loader](https://www.npmjs.com/package/source-map-loader)。\n\n```shell\nnpm install --save-dev typescript awesome-typescript-loader source-map-loader\n```\n\n我们需要创建一个`tsconfig.json`文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 `tsconfig.json`文件，添加以下内容：\n\n```shell\n{\n    \"compilerOptions\": {\n        \"outDir\": \"./dist/\",\n        \"sourceMap\": true,\n        \"noImplicitAny\": true,\n        \"module\": \"commonjs\",\n        \"target\": \"es6\",\n        \"jsx\": \"react\"\n    },\n    \"include\": [\n        \"./src/**/*\"\n    ]\n}\n```\n\n在src目录建一个App.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\n\ntype Props = {\n    compiler:String,\n    framework:String,\n}\n\nexport const App: React.FC<Props> = (props) => {\n    return (\n        <div className=\"home-wrap\">\n            <h1>Hello from {props.compiler} and {props.framework}!</h1>;\n        </div>\n    )\n}\n```\n\n在src目录下建一个index.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport {App} from \"./App\";\n\nReactDOM.render(\n    <App compiler=\"TypeScript\" framework=\"React\" />,\n    document.getElementById(\"app\")\n);\n```\n\n\n\n在proj的根目录下面建一个index.html用来展示,内容如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Hello React!</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=\"./node_modules/react/umd/react.development.js\"></script>\n        <script src=\"./node_modules/react-dom/umd/react-dom.development.js\"></script>\n        <script src=\"./dist/bundle.js\"></script>\n    </body>\n</html>\n```\n\n\n\n然后在proj文件里新建一个 webpack.config.js,用来配置\n\n```js\nmodule.exports = {\n    // 入口\n    entry: \"./src/index.tsx\",\n    // 出口\n    output: {\n        filename: \"bundle.js\",\n        path: __dirname + \"/dist\"\n    },\n\n    // 启用 sourcemaps 以调试 webpack 的输出\n    devtool: \"source-map\",\n    mode: 'development',\n    resolve: {\n        // Add '.ts' and '.tsx' as resolvable extensions.\n        extensions: [\".ts\", \".tsx\", \".js\", \".json\"]\n    },\n\n    module: {\n        rules: [\n            // 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理\n            { test: /\\.tsx?$/, loader: \"awesome-typescript-loader\" },\n\n            // 所有输出 '.js' 文件都将包含由 'source-map-loader' 重新处理的所有源映射。\n            { enforce: \"pre\", test: /\\.js$/, loader: \"source-map-loader\" }\n        ]\n    },\n\n    // 当导入一个路径匹配以下之一的模块时，只需\n    // 假设存在相应的全局变量并改用它。\n    // 这很重要，因为它允许我们避免捆绑我们所有的\n    // 依赖项，允许浏览器在构建之间缓存这些库。\n    externals: {\n        \"react\": \"React\",\n        \"react-dom\": \"ReactDOM\"\n    }\n};\n```\n\n执行：\n\n```shell\nwebpack\n```\n\n这时候就运行成功了 ! ! !\n\n不过远远不够\n\n如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:\n\n```shell\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D\n```\n\n安装完了之后,在你的 webpack.config.js 中添加:\n\n```js\nrules: [\n    // 解析jsx\n    {\n        test: /\\.(js|jsx)$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n            loader: 'babel-loader',\n            options: {\n                presets: ['@babel/preset-env', '@babel/preset-react']\n            }\n        }\n    },\n]\n```\n\n这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,\n\n如果你想要去样式 less,则需要添加:\n\n```shell\nnpm i style-loader css-loader less less-loader -D\n```\n\n安装完之后,再去webpack.config.js里面配置:\n\n```js\nrules: [\n\t// 解析less css 文件\n    {\n        test: /\\.(css|less)$/,\n        // 这玩意儿是有顺序的\n        use: ['style-loader', 'css-loader', 'less-loader']\n    }\n]\n```\n\n这时候就已经可以去解析css,less文件了\n\n这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:\n\n```js\nmodule.exports = {  \n\t// 监听 执行 webpack --watch\n    watch: true,\n    watchOptions: {\n        // 不监听的文件或文件夹\n        ignored: /node_modules/,\n        // 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  \n        aggregateTimeout: 300,\n        // 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的\n        poll: 1000\n    },\n}\n```\n\n好了,你去执行webpack 或者 webpack --watch 就不要再去管cmd了 ,保存之后,会自动去打包\n\n动手去试试吧 ! ! !\n","source":"_posts/webpack-react-ts环境.md","raw":"---\ntitle: webpack-react-ts环境\n---\n最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件\n\n接下来开始吧\n\n```shell\nmkdir proj\ncd proj\n```\n\n```shell\nmkdir src\n```\n\n```shell\nnpm init -y\n```\n\n```shell\nnpm install -g webpack\n```\n\n现在我们添加React和React-DOM以及它们的声明文件到`package.json`文件里做为依赖：\n\n```shell\nnpm install --save react react-dom @types/react @types/react-dom\n```\n\n接下来，我们要添加开发时依赖[awesome-typescript-loader](https://www.npmjs.com/package/awesome-typescript-loader)和[source-map-loader](https://www.npmjs.com/package/source-map-loader)。\n\n```shell\nnpm install --save-dev typescript awesome-typescript-loader source-map-loader\n```\n\n我们需要创建一个`tsconfig.json`文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 `tsconfig.json`文件，添加以下内容：\n\n```shell\n{\n    \"compilerOptions\": {\n        \"outDir\": \"./dist/\",\n        \"sourceMap\": true,\n        \"noImplicitAny\": true,\n        \"module\": \"commonjs\",\n        \"target\": \"es6\",\n        \"jsx\": \"react\"\n    },\n    \"include\": [\n        \"./src/**/*\"\n    ]\n}\n```\n\n在src目录建一个App.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\n\ntype Props = {\n    compiler:String,\n    framework:String,\n}\n\nexport const App: React.FC<Props> = (props) => {\n    return (\n        <div className=\"home-wrap\">\n            <h1>Hello from {props.compiler} and {props.framework}!</h1>;\n        </div>\n    )\n}\n```\n\n在src目录下建一个index.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport {App} from \"./App\";\n\nReactDOM.render(\n    <App compiler=\"TypeScript\" framework=\"React\" />,\n    document.getElementById(\"app\")\n);\n```\n\n\n\n在proj的根目录下面建一个index.html用来展示,内容如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Hello React!</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=\"./node_modules/react/umd/react.development.js\"></script>\n        <script src=\"./node_modules/react-dom/umd/react-dom.development.js\"></script>\n        <script src=\"./dist/bundle.js\"></script>\n    </body>\n</html>\n```\n\n\n\n然后在proj文件里新建一个 webpack.config.js,用来配置\n\n```js\nmodule.exports = {\n    // 入口\n    entry: \"./src/index.tsx\",\n    // 出口\n    output: {\n        filename: \"bundle.js\",\n        path: __dirname + \"/dist\"\n    },\n\n    // 启用 sourcemaps 以调试 webpack 的输出\n    devtool: \"source-map\",\n    mode: 'development',\n    resolve: {\n        // Add '.ts' and '.tsx' as resolvable extensions.\n        extensions: [\".ts\", \".tsx\", \".js\", \".json\"]\n    },\n\n    module: {\n        rules: [\n            // 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理\n            { test: /\\.tsx?$/, loader: \"awesome-typescript-loader\" },\n\n            // 所有输出 '.js' 文件都将包含由 'source-map-loader' 重新处理的所有源映射。\n            { enforce: \"pre\", test: /\\.js$/, loader: \"source-map-loader\" }\n        ]\n    },\n\n    // 当导入一个路径匹配以下之一的模块时，只需\n    // 假设存在相应的全局变量并改用它。\n    // 这很重要，因为它允许我们避免捆绑我们所有的\n    // 依赖项，允许浏览器在构建之间缓存这些库。\n    externals: {\n        \"react\": \"React\",\n        \"react-dom\": \"ReactDOM\"\n    }\n};\n```\n\n执行：\n\n```shell\nwebpack\n```\n\n这时候就运行成功了 ! ! !\n\n不过远远不够\n\n如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:\n\n```shell\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D\n```\n\n安装完了之后,在你的 webpack.config.js 中添加:\n\n```js\nrules: [\n    // 解析jsx\n    {\n        test: /\\.(js|jsx)$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n            loader: 'babel-loader',\n            options: {\n                presets: ['@babel/preset-env', '@babel/preset-react']\n            }\n        }\n    },\n]\n```\n\n这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,\n\n如果你想要去样式 less,则需要添加:\n\n```shell\nnpm i style-loader css-loader less less-loader -D\n```\n\n安装完之后,再去webpack.config.js里面配置:\n\n```js\nrules: [\n\t// 解析less css 文件\n    {\n        test: /\\.(css|less)$/,\n        // 这玩意儿是有顺序的\n        use: ['style-loader', 'css-loader', 'less-loader']\n    }\n]\n```\n\n这时候就已经可以去解析css,less文件了\n\n这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:\n\n```js\nmodule.exports = {  \n\t// 监听 执行 webpack --watch\n    watch: true,\n    watchOptions: {\n        // 不监听的文件或文件夹\n        ignored: /node_modules/,\n        // 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  \n        aggregateTimeout: 300,\n        // 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的\n        poll: 1000\n    },\n}\n```\n\n好了,你去执行webpack 或者 webpack --watch 就不要再去管cmd了 ,保存之后,会自动去打包\n\n动手去试试吧 ! ! !\n","slug":"webpack-react-ts环境","published":1,"date":"2021-09-19T16:36:25.180Z","updated":"2021-09-19T16:36:25.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktrg2k71000008fceqhe5nqx","content":"<p>最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件</p>\n<p>接下来开始吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir proj</span><br><span class=\"line\">cd proj</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir src</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack</span><br></pre></td></tr></table></figure>\n\n<p>现在我们添加React和React-DOM以及它们的声明文件到<code>package.json</code>文件里做为依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom @types/react @types/react-dom</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们要添加开发时依赖<a href=\"https://www.npmjs.com/package/awesome-typescript-loader\">awesome-typescript-loader</a>和<a href=\"https://www.npmjs.com/package/source-map-loader\">source-map-loader</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev typescript awesome-typescript-loader source-map-loader</span><br></pre></td></tr></table></figure>\n\n<p>我们需要创建一个<code>tsconfig.json</code>文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 <code>tsconfig.json</code>文件，添加以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">        &quot;outDir&quot;: &quot;./dist/&quot;,</span><br><span class=\"line\">        &quot;sourceMap&quot;: true,</span><br><span class=\"line\">        &quot;noImplicitAny&quot;: true,</span><br><span class=\"line\">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">        &quot;target&quot;: &quot;es6&quot;,</span><br><span class=\"line\">        &quot;jsx&quot;: &quot;react&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;include&quot;: [</span><br><span class=\"line\">        &quot;./src/**/*&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在src目录建一个App.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">type Props = &#123;</span><br><span class=\"line\">    compiler:String,</span><br><span class=\"line\">    framework:String,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const App: React.FC&lt;Props&gt; = (props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div className=&quot;home-wrap&quot;&gt;</span><br><span class=\"line\">            &lt;h1&gt;Hello from &#123;props.compiler&#125; and &#123;props.framework&#125;!&lt;/h1&gt;;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在src目录下建一个index.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as ReactDOM from &quot;react-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;App&#125; from &quot;./App&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;App compiler=&quot;TypeScript&quot; framework=&quot;React&quot; /&gt;,</span><br><span class=\"line\">    document.getElementById(&quot;app&quot;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在proj的根目录下面建一个index.html用来展示,内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在proj文件里新建一个 webpack.config.js,用来配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.tsx&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 出口</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/dist&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启用 sourcemaps 以调试 webpack 的输出</span></span><br><span class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Add &#x27;.ts&#x27; and &#x27;.tsx&#x27; as resolvable extensions.</span></span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.tsx&quot;</span>, <span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.json&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            <span class=\"comment\">// 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理</span></span><br><span class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>, loader: <span class=\"string\">&quot;awesome-typescript-loader&quot;</span> &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 所有输出 &#x27;.js&#x27; 文件都将包含由 &#x27;source-map-loader&#x27; 重新处理的所有源映射。</span></span><br><span class=\"line\">            &#123; <span class=\"attr\">enforce</span>: <span class=\"string\">&quot;pre&quot;</span>, <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">&quot;source-map-loader&quot;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当导入一个路径匹配以下之一的模块时，只需</span></span><br><span class=\"line\">    <span class=\"comment\">// 假设存在相应的全局变量并改用它。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这很重要，因为它允许我们避免捆绑我们所有的</span></span><br><span class=\"line\">    <span class=\"comment\">// 依赖项，允许浏览器在构建之间缓存这些库。</span></span><br><span class=\"line\">    <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;react&quot;</span>: <span class=\"string\">&quot;React&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;react-dom&quot;</span>: <span class=\"string\">&quot;ReactDOM&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n\n<p>这时候就运行成功了 ! ! !</p>\n<p>不过远远不够</p>\n<p>如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n\n<p>安装完了之后,在你的 webpack.config.js 中添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    <span class=\"comment\">// 解析jsx</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, <span class=\"string\">&#x27;@babel/preset-react&#x27;</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,</p>\n<p>如果你想要去样式 less,则需要添加:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i style-loader css-loader less less-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>安装完之后,再去webpack.config.js里面配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">\t<span class=\"comment\">// 解析less css 文件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(css|less)$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 这玩意儿是有顺序的</span></span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>这时候就已经可以去解析css,less文件了</p>\n<p>这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  </span><br><span class=\"line\">\t<span class=\"comment\">// 监听 执行 webpack --watch</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">watchOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不监听的文件或文件夹</span></span><br><span class=\"line\">        <span class=\"attr\">ignored</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  </span></span><br><span class=\"line\">        aggregateTimeout: <span class=\"number\">300</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的</span></span><br><span class=\"line\">        <span class=\"attr\">poll</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了,你去执行webpack 或者 webpack –watch 就不要再去管cmd了 ,保存之后,会自动去打包</p>\n<p>动手去试试吧 ! ! !</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件</p>\n<p>接下来开始吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir proj</span><br><span class=\"line\">cd proj</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir src</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack</span><br></pre></td></tr></table></figure>\n\n<p>现在我们添加React和React-DOM以及它们的声明文件到<code>package.json</code>文件里做为依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom @types/react @types/react-dom</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们要添加开发时依赖<a href=\"https://www.npmjs.com/package/awesome-typescript-loader\">awesome-typescript-loader</a>和<a href=\"https://www.npmjs.com/package/source-map-loader\">source-map-loader</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev typescript awesome-typescript-loader source-map-loader</span><br></pre></td></tr></table></figure>\n\n<p>我们需要创建一个<code>tsconfig.json</code>文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 <code>tsconfig.json</code>文件，添加以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">        &quot;outDir&quot;: &quot;./dist/&quot;,</span><br><span class=\"line\">        &quot;sourceMap&quot;: true,</span><br><span class=\"line\">        &quot;noImplicitAny&quot;: true,</span><br><span class=\"line\">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">        &quot;target&quot;: &quot;es6&quot;,</span><br><span class=\"line\">        &quot;jsx&quot;: &quot;react&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;include&quot;: [</span><br><span class=\"line\">        &quot;./src/**/*&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在src目录建一个App.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">type Props = &#123;</span><br><span class=\"line\">    compiler:String,</span><br><span class=\"line\">    framework:String,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const App: React.FC&lt;Props&gt; = (props) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div className=&quot;home-wrap&quot;&gt;</span><br><span class=\"line\">            &lt;h1&gt;Hello from &#123;props.compiler&#125; and &#123;props.framework&#125;!&lt;/h1&gt;;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在src目录下建一个index.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as ReactDOM from &quot;react-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;App&#125; from &quot;./App&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;App compiler=&quot;TypeScript&quot; framework=&quot;React&quot; /&gt;,</span><br><span class=\"line\">    document.getElementById(&quot;app&quot;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在proj的根目录下面建一个index.html用来展示,内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在proj文件里新建一个 webpack.config.js,用来配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.tsx&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 出口</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&quot;/dist&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启用 sourcemaps 以调试 webpack 的输出</span></span><br><span class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Add &#x27;.ts&#x27; and &#x27;.tsx&#x27; as resolvable extensions.</span></span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.tsx&quot;</span>, <span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.json&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            <span class=\"comment\">// 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理</span></span><br><span class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>, loader: <span class=\"string\">&quot;awesome-typescript-loader&quot;</span> &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 所有输出 &#x27;.js&#x27; 文件都将包含由 &#x27;source-map-loader&#x27; 重新处理的所有源映射。</span></span><br><span class=\"line\">            &#123; <span class=\"attr\">enforce</span>: <span class=\"string\">&quot;pre&quot;</span>, <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">&quot;source-map-loader&quot;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当导入一个路径匹配以下之一的模块时，只需</span></span><br><span class=\"line\">    <span class=\"comment\">// 假设存在相应的全局变量并改用它。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这很重要，因为它允许我们避免捆绑我们所有的</span></span><br><span class=\"line\">    <span class=\"comment\">// 依赖项，允许浏览器在构建之间缓存这些库。</span></span><br><span class=\"line\">    <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;react&quot;</span>: <span class=\"string\">&quot;React&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;react-dom&quot;</span>: <span class=\"string\">&quot;ReactDOM&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n\n<p>这时候就运行成功了 ! ! !</p>\n<p>不过远远不够</p>\n<p>如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n\n<p>安装完了之后,在你的 webpack.config.js 中添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    <span class=\"comment\">// 解析jsx</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, <span class=\"string\">&#x27;@babel/preset-react&#x27;</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,</p>\n<p>如果你想要去样式 less,则需要添加:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i style-loader css-loader less less-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>安装完之后,再去webpack.config.js里面配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">\t<span class=\"comment\">// 解析less css 文件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(css|less)$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 这玩意儿是有顺序的</span></span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>这时候就已经可以去解析css,less文件了</p>\n<p>这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  </span><br><span class=\"line\">\t<span class=\"comment\">// 监听 执行 webpack --watch</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">watchOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不监听的文件或文件夹</span></span><br><span class=\"line\">        <span class=\"attr\">ignored</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  </span></span><br><span class=\"line\">        aggregateTimeout: <span class=\"number\">300</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的</span></span><br><span class=\"line\">        <span class=\"attr\">poll</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了,你去执行webpack 或者 webpack –watch 就不要再去管cmd了 ,保存之后,会自动去打包</p>\n<p>动手去试试吧 ! ! !</p>\n"},{"title":"对象的深克隆,内有函数,数组","_content":"\n一个朋友在面试的时候面到了深浅克隆的问题,\n\n浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.\n\n深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.\n\n我还是拿下面这个数据格式作为克隆对象 👇\n\n它里面是有对象,有函数和数组\n\n```\nconst obj = {\n    \"childrenList\": [{\n        \"childrenList\": [{\n            \"childrenList\": () => {\n                console.log(this)\n            },\n            \"id\": 5,\n            \"name\": \"子节点11\",\n            \"pId\": 3,\n            \"type\": \"1\"\n        }],\n        \"id\": 3,\n        \"name\": \"子节点1\",\n        \"pId\": 1,\n        \"type\": \"1\"\n    }],\n    \"id\": 1,\n    \"name\": \"根节点1\",\n    \"pId\": 0,\n    \"type\": \"1\"\n}\n```\n\n话不多说,直接上代码.\n\n```\nfunction clone(num) {\n\t// 申明一个变量,不赋值,因为他有可变性\n    let data;\n    // 判断 是否为对象\n    if (num instanceof Object) {\n    // 函数是引用\n        if (num instanceof Function) {\n            return new Function('return '+num.toString()).call(this)\n        } else if (num instanceof Array) {\n        // 如果数组 递归遍历就好啦\n            data = [];\n            for (let v in num) {\n                data.push(clone(num[v]));\n            }\n        } else {\n        // 同数组一样\n            data = {};\n            for (let v in num) {\n                data[v] = clone(num[v]);\n            }\n        }\n    } else {\n    // 基本数据类型 直接赋值就好啦\n        data = num;\n    }\n    return data;\n}\n\nconsole.log(clone(obj));\n```\n\n以下是我深克隆之后拿到的数据 👇\n\n","source":"_posts/深克隆.md","raw":"---\ntitle: 对象的深克隆,内有函数,数组\n---\n\n一个朋友在面试的时候面到了深浅克隆的问题,\n\n浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.\n\n深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.\n\n我还是拿下面这个数据格式作为克隆对象 👇\n\n它里面是有对象,有函数和数组\n\n```\nconst obj = {\n    \"childrenList\": [{\n        \"childrenList\": [{\n            \"childrenList\": () => {\n                console.log(this)\n            },\n            \"id\": 5,\n            \"name\": \"子节点11\",\n            \"pId\": 3,\n            \"type\": \"1\"\n        }],\n        \"id\": 3,\n        \"name\": \"子节点1\",\n        \"pId\": 1,\n        \"type\": \"1\"\n    }],\n    \"id\": 1,\n    \"name\": \"根节点1\",\n    \"pId\": 0,\n    \"type\": \"1\"\n}\n```\n\n话不多说,直接上代码.\n\n```\nfunction clone(num) {\n\t// 申明一个变量,不赋值,因为他有可变性\n    let data;\n    // 判断 是否为对象\n    if (num instanceof Object) {\n    // 函数是引用\n        if (num instanceof Function) {\n            return new Function('return '+num.toString()).call(this)\n        } else if (num instanceof Array) {\n        // 如果数组 递归遍历就好啦\n            data = [];\n            for (let v in num) {\n                data.push(clone(num[v]));\n            }\n        } else {\n        // 同数组一样\n            data = {};\n            for (let v in num) {\n                data[v] = clone(num[v]);\n            }\n        }\n    } else {\n    // 基本数据类型 直接赋值就好啦\n        data = num;\n    }\n    return data;\n}\n\nconsole.log(clone(obj));\n```\n\n以下是我深克隆之后拿到的数据 👇\n\n","slug":"深克隆","published":1,"date":"2021-09-19T16:56:52.916Z","updated":"2021-09-19T16:57:52.686Z","_id":"cktrgpcpd0000xcfcbv2wf70h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一个朋友在面试的时候面到了深浅克隆的问题,</p>\n<p>浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.</p>\n<p>深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.</p>\n<p>我还是拿下面这个数据格式作为克隆对象 👇</p>\n<p>它里面是有对象,有函数和数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">    &quot;childrenList&quot;: [&#123;</span><br><span class=\"line\">        &quot;childrenList&quot;: [&#123;</span><br><span class=\"line\">            &quot;childrenList&quot;: () =&gt; &#123;</span><br><span class=\"line\">                console.log(this)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;id&quot;: 5,</span><br><span class=\"line\">            &quot;name&quot;: &quot;子节点11&quot;,</span><br><span class=\"line\">            &quot;pId&quot;: 3,</span><br><span class=\"line\">            &quot;type&quot;: &quot;1&quot;</span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        &quot;id&quot;: 3,</span><br><span class=\"line\">        &quot;name&quot;: &quot;子节点1&quot;,</span><br><span class=\"line\">        &quot;pId&quot;: 1,</span><br><span class=\"line\">        &quot;type&quot;: &quot;1&quot;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    &quot;id&quot;: 1,</span><br><span class=\"line\">    &quot;name&quot;: &quot;根节点1&quot;,</span><br><span class=\"line\">    &quot;pId&quot;: 0,</span><br><span class=\"line\">    &quot;type&quot;: &quot;1&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>话不多说,直接上代码.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clone(num) &#123;</span><br><span class=\"line\">\t// 申明一个变量,不赋值,因为他有可变性</span><br><span class=\"line\">    let data;</span><br><span class=\"line\">    // 判断 是否为对象</span><br><span class=\"line\">    if (num instanceof Object) &#123;</span><br><span class=\"line\">    // 函数是引用</span><br><span class=\"line\">        if (num instanceof Function) &#123;</span><br><span class=\"line\">            return new Function(&#x27;return &#x27;+num.toString()).call(this)</span><br><span class=\"line\">        &#125; else if (num instanceof Array) &#123;</span><br><span class=\"line\">        // 如果数组 递归遍历就好啦</span><br><span class=\"line\">            data = [];</span><br><span class=\"line\">            for (let v in num) &#123;</span><br><span class=\"line\">                data.push(clone(num[v]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        // 同数组一样</span><br><span class=\"line\">            data = &#123;&#125;;</span><br><span class=\"line\">            for (let v in num) &#123;</span><br><span class=\"line\">                data[v] = clone(num[v]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    // 基本数据类型 直接赋值就好啦</span><br><span class=\"line\">        data = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(clone(obj));</span><br></pre></td></tr></table></figure>\n\n<p>以下是我深克隆之后拿到的数据 👇</p>\n","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<p>一个朋友在面试的时候面到了深浅克隆的问题,</p>\n<p>浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.</p>\n<p>深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.</p>\n<p>我还是拿下面这个数据格式作为克隆对象 👇</p>\n<p>它里面是有对象,有函数和数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">    &quot;childrenList&quot;: [&#123;</span><br><span class=\"line\">        &quot;childrenList&quot;: [&#123;</span><br><span class=\"line\">            &quot;childrenList&quot;: () =&gt; &#123;</span><br><span class=\"line\">                console.log(this)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;id&quot;: 5,</span><br><span class=\"line\">            &quot;name&quot;: &quot;子节点11&quot;,</span><br><span class=\"line\">            &quot;pId&quot;: 3,</span><br><span class=\"line\">            &quot;type&quot;: &quot;1&quot;</span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        &quot;id&quot;: 3,</span><br><span class=\"line\">        &quot;name&quot;: &quot;子节点1&quot;,</span><br><span class=\"line\">        &quot;pId&quot;: 1,</span><br><span class=\"line\">        &quot;type&quot;: &quot;1&quot;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    &quot;id&quot;: 1,</span><br><span class=\"line\">    &quot;name&quot;: &quot;根节点1&quot;,</span><br><span class=\"line\">    &quot;pId&quot;: 0,</span><br><span class=\"line\">    &quot;type&quot;: &quot;1&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>话不多说,直接上代码.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clone(num) &#123;</span><br><span class=\"line\">\t// 申明一个变量,不赋值,因为他有可变性</span><br><span class=\"line\">    let data;</span><br><span class=\"line\">    // 判断 是否为对象</span><br><span class=\"line\">    if (num instanceof Object) &#123;</span><br><span class=\"line\">    // 函数是引用</span><br><span class=\"line\">        if (num instanceof Function) &#123;</span><br><span class=\"line\">            return new Function(&#x27;return &#x27;+num.toString()).call(this)</span><br><span class=\"line\">        &#125; else if (num instanceof Array) &#123;</span><br><span class=\"line\">        // 如果数组 递归遍历就好啦</span><br><span class=\"line\">            data = [];</span><br><span class=\"line\">            for (let v in num) &#123;</span><br><span class=\"line\">                data.push(clone(num[v]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        // 同数组一样</span><br><span class=\"line\">            data = &#123;&#125;;</span><br><span class=\"line\">            for (let v in num) &#123;</span><br><span class=\"line\">                data[v] = clone(num[v]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    // 基本数据类型 直接赋值就好啦</span><br><span class=\"line\">        data = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(clone(obj));</span><br></pre></td></tr></table></figure>\n\n<p>以下是我深克隆之后拿到的数据 👇</p>\n"},{"title":"俩数相加和回文数 算法解法","_content":"\n##### 回文数\n\n给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。\n\n示例 1：\n\n输入：x = 121\n输出：true\n示例 2：\n\n输入：x = -121\n输出：false\n解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n示例 3：\n\n输入：x = 10\n输出：false\n解释：从右向左读, 为 01 。因此它不是一个回文数。\n示例 4：\n\n输入：x = -101\n输出：false\n\n\n\n这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.\n\n```js\nconst isPalindrome = (x) => {\n    if (x || x === 0) {\n        return x.toString().split('').reverse().join().replace(/,/g, '') - 0 === x;\n    }\n    return false;\n}\n```\n\n下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~\n\n```js\nconst isPalindrome = (x) => {\n    let num = x;\n    let y = 0;\n    if (x === 0) return true;\n    if (x < 0 || x % 10 === 0) return false;\n    while (x) {\n        y = parseInt(y * 10 + parseInt(x % 10));\n        x = parseInt(x / 10)\n    }\n    if(y === num){\n        return true;\n    }else{\n        return false;\n    }\n}\n```\n\n好在这俩种解法都是没问题的(●'◡'●)\n\n\n\n##### 俩数相加\n\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n示例 2：\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n示例 3：\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n\n\n\n```js\nconst addTwoNumbers = (l1, l2) => {\n    const arr = [];\n    if (l1 !== null || l2 !== null) {\n        const l1Num = l1 !== null ? l1.reverse().join().replace(/,/g, '') - 0 : 0;\n        const l2Num = l2 !== null ? l2.reverse().join().replace(/,/g, '') - 0 : 0;\n        const num = (l1Num + l2Num).toString().split('').reverse();\n        for (let v in num) {\n            arr.push(num[v] - 0);\n        }\n        return arr;\n    }else{\n        return null;\n    }\n}\n```\n\n\n\n","source":"_posts/俩数相加.md","raw":"---\ntitle: 俩数相加和回文数 算法解法\n---\n\n##### 回文数\n\n给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。\n\n示例 1：\n\n输入：x = 121\n输出：true\n示例 2：\n\n输入：x = -121\n输出：false\n解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n示例 3：\n\n输入：x = 10\n输出：false\n解释：从右向左读, 为 01 。因此它不是一个回文数。\n示例 4：\n\n输入：x = -101\n输出：false\n\n\n\n这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.\n\n```js\nconst isPalindrome = (x) => {\n    if (x || x === 0) {\n        return x.toString().split('').reverse().join().replace(/,/g, '') - 0 === x;\n    }\n    return false;\n}\n```\n\n下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~\n\n```js\nconst isPalindrome = (x) => {\n    let num = x;\n    let y = 0;\n    if (x === 0) return true;\n    if (x < 0 || x % 10 === 0) return false;\n    while (x) {\n        y = parseInt(y * 10 + parseInt(x % 10));\n        x = parseInt(x / 10)\n    }\n    if(y === num){\n        return true;\n    }else{\n        return false;\n    }\n}\n```\n\n好在这俩种解法都是没问题的(●'◡'●)\n\n\n\n##### 俩数相加\n\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n示例 2：\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n示例 3：\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n\n\n\n```js\nconst addTwoNumbers = (l1, l2) => {\n    const arr = [];\n    if (l1 !== null || l2 !== null) {\n        const l1Num = l1 !== null ? l1.reverse().join().replace(/,/g, '') - 0 : 0;\n        const l2Num = l2 !== null ? l2.reverse().join().replace(/,/g, '') - 0 : 0;\n        const num = (l1Num + l2Num).toString().split('').reverse();\n        for (let v in num) {\n            arr.push(num[v] - 0);\n        }\n        return arr;\n    }else{\n        return null;\n    }\n}\n```\n\n\n\n","slug":"俩数相加","published":1,"date":"2021-09-19T16:58:53.763Z","updated":"2021-09-19T16:59:55.505Z","_id":"cktrgrxyi0006xcfc5d1h4320","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"回文数\"><a href=\"#回文数\" class=\"headerlink\" title=\"回文数\"></a>回文数</h5><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p>\n<p>示例 1：</p>\n<p>输入：x = 121<br>输出：true<br>示例 2：</p>\n<p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3：</p>\n<p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。<br>示例 4：</p>\n<p>输入：x = -101<br>输出：false</p>\n<p>这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x || x === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.toString().split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join().replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">&#x27;&#x27;</span>) - <span class=\"number\">0</span> === x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = x;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x % <span class=\"number\">10</span> === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x) &#123;</span><br><span class=\"line\">        y = <span class=\"built_in\">parseInt</span>(y * <span class=\"number\">10</span> + <span class=\"built_in\">parseInt</span>(x % <span class=\"number\">10</span>));</span><br><span class=\"line\">        x = <span class=\"built_in\">parseInt</span>(x / <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y === num)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好在这俩种解法都是没问题的(●’◡’●)</p>\n<h5 id=\"俩数相加\"><a href=\"#俩数相加\" class=\"headerlink\" title=\"俩数相加\"></a>俩数相加</h5><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br>示例 2：</p>\n<p>输入：l1 = [0], l2 = [0]<br>输出：[0]<br>示例 3：</p>\n<p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addTwoNumbers = <span class=\"function\">(<span class=\"params\">l1, l2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 !== <span class=\"literal\">null</span> || l2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> l1Num = l1 !== <span class=\"literal\">null</span> ? l1.reverse().join().replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">&#x27;&#x27;</span>) - <span class=\"number\">0</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> l2Num = l2 !== <span class=\"literal\">null</span> ? l2.reverse().join().replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">&#x27;&#x27;</span>) - <span class=\"number\">0</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> num = (l1Num + l2Num).toString().split(<span class=\"string\">&#x27;&#x27;</span>).reverse();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">in</span> num) &#123;</span><br><span class=\"line\">            arr.push(num[v] - <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<h5 id=\"回文数\"><a href=\"#回文数\" class=\"headerlink\" title=\"回文数\"></a>回文数</h5><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p>\n<p>示例 1：</p>\n<p>输入：x = 121<br>输出：true<br>示例 2：</p>\n<p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3：</p>\n<p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。<br>示例 4：</p>\n<p>输入：x = -101<br>输出：false</p>\n<p>这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x || x === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.toString().split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join().replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">&#x27;&#x27;</span>) - <span class=\"number\">0</span> === x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = x;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x % <span class=\"number\">10</span> === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x) &#123;</span><br><span class=\"line\">        y = <span class=\"built_in\">parseInt</span>(y * <span class=\"number\">10</span> + <span class=\"built_in\">parseInt</span>(x % <span class=\"number\">10</span>));</span><br><span class=\"line\">        x = <span class=\"built_in\">parseInt</span>(x / <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y === num)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好在这俩种解法都是没问题的(●’◡’●)</p>\n<h5 id=\"俩数相加\"><a href=\"#俩数相加\" class=\"headerlink\" title=\"俩数相加\"></a>俩数相加</h5><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br>示例 2：</p>\n<p>输入：l1 = [0], l2 = [0]<br>输出：[0]<br>示例 3：</p>\n<p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addTwoNumbers = <span class=\"function\">(<span class=\"params\">l1, l2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 !== <span class=\"literal\">null</span> || l2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> l1Num = l1 !== <span class=\"literal\">null</span> ? l1.reverse().join().replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">&#x27;&#x27;</span>) - <span class=\"number\">0</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> l2Num = l2 !== <span class=\"literal\">null</span> ? l2.reverse().join().replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">&#x27;&#x27;</span>) - <span class=\"number\">0</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> num = (l1Num + l2Num).toString().split(<span class=\"string\">&#x27;&#x27;</span>).reverse();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">in</span> num) &#123;</span><br><span class=\"line\">            arr.push(num[v] - <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"git push 出现的问题","_content":"\n每次登录账号密码都会推送失败,会出现同下这个问题,\n![在这里插入图片描述](https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left)\n\n```git\nLogon failed, use ctrl+c to cancel basic credential prompt.\nUsername for 'https://github.com': echo_c120@163.com\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/start-point/webpack.git/': The requested URL returned error: 403\n//登录失败，使用 ctrl+c 取消基本凭据提示。\n//“https://github.com”的用户名：echo_c120@163.com\n//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。\n//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。\n//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403\n```\n\n该问题是需要你升级git 去github设置一个个人访问令牌,\n\n解决办法,先去https://gitforwindows.org/官网下载最新版的git\n\n接着进去自己的github官网\n\n点击Settings\n\n\n\n点击Developer settings\n\n\n\n再去点击Personal access tokens\n\n\n\n点击新建一个token\n\n\n\n然后保存记住会生成一个token 记住它\n\n\n\n","source":"_posts/git push 问题.md","raw":"---\ntitle: git push 出现的问题\n---\n\n每次登录账号密码都会推送失败,会出现同下这个问题,\n![在这里插入图片描述](https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left)\n\n```git\nLogon failed, use ctrl+c to cancel basic credential prompt.\nUsername for 'https://github.com': echo_c120@163.com\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/start-point/webpack.git/': The requested URL returned error: 403\n//登录失败，使用 ctrl+c 取消基本凭据提示。\n//“https://github.com”的用户名：echo_c120@163.com\n//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。\n//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。\n//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403\n```\n\n该问题是需要你升级git 去github设置一个个人访问令牌,\n\n解决办法,先去https://gitforwindows.org/官网下载最新版的git\n\n接着进去自己的github官网\n\n点击Settings\n\n\n\n点击Developer settings\n\n\n\n再去点击Personal access tokens\n\n\n\n点击新建一个token\n\n\n\n然后保存记住会生成一个token 记住它\n\n\n\n","slug":"git push 问题","published":1,"date":"2021-09-19T16:58:53.756Z","updated":"2021-09-19T17:00:31.444Z","_id":"cktrh23bs0009xcfc1poe785t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>每次登录账号密码都会推送失败,会出现同下这个问题,<br><img src=\"https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\">Username for &#x27;https://github.com&#x27;: echo_c120@163.com</span><br><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class=\"line\">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/start-point/webpack.git/&#x27;: The requested URL returned error: 403</span><br><span class=\"line\">//登录失败，使用 ctrl+c 取消基本凭据提示。</span><br><span class=\"line\">//“https://github.com”的用户名：echo_c120@163.com</span><br><span class=\"line\">//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。</span><br><span class=\"line\">//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。</span><br><span class=\"line\">//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403</span><br></pre></td></tr></table></figure>\n\n<p>该问题是需要你升级git 去github设置一个个人访问令牌,</p>\n<p>解决办法,先去<a href=\"https://gitforwindows.org/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84git\">https://gitforwindows.org/官网下载最新版的git</a></p>\n<p>接着进去自己的github官网</p>\n<p>点击Settings</p>\n<p>点击Developer settings</p>\n<p>再去点击Personal access tokens</p>\n<p>点击新建一个token</p>\n<p>然后保存记住会生成一个token 记住它</p>\n","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<p>每次登录账号密码都会推送失败,会出现同下这个问题,<br><img src=\"https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class=\"line\">Username for &#x27;https://github.com&#x27;: echo_c120@163.com</span><br><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class=\"line\">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/start-point/webpack.git/&#x27;: The requested URL returned error: 403</span><br><span class=\"line\">//登录失败，使用 ctrl+c 取消基本凭据提示。</span><br><span class=\"line\">//“https://github.com”的用户名：echo_c120@163.com</span><br><span class=\"line\">//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。</span><br><span class=\"line\">//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。</span><br><span class=\"line\">//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403</span><br></pre></td></tr></table></figure>\n\n<p>该问题是需要你升级git 去github设置一个个人访问令牌,</p>\n<p>解决办法,先去<a href=\"https://gitforwindows.org/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84git\">https://gitforwindows.org/官网下载最新版的git</a></p>\n<p>接着进去自己的github官网</p>\n<p>点击Settings</p>\n<p>点击Developer settings</p>\n<p>再去点击Personal access tokens</p>\n<p>点击新建一个token</p>\n<p>然后保存记住会生成一个token 记住它</p>\n"},{"title":"react hook的基本使用","_content":"\n#### 1.useState\n\nuseState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态\n\n下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n    \n    const [state, setstate] = useState({\n        num:0,\n    })    \n\n    const AddClickAction = ()=>{\n        setstate({\n            num:state.num+1\n        })\n        console.log(state);\n    }\n\n    return (\n        <div className=\"app\">\n        //点击的时候增加\n            <button onClick={AddClickAction}>点我:{state.num}</button>\n        </div>\n    )\n}\n```\n\n#### 2.useRef\n\n1. 可以用来获取节点dom(节点标签)\n\n```js\nimport React,{useRef} from 'react'\n\nexport default function App() {\n\n    const ref = useRef()\n\n    // 获取到button按钮的节点\n    const getNode = ()=>{\n        console.log(ref.current);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={getNode} ref={ref}>点我</button>\n        </div>\n    )\n}\n```\n\n2. useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到\n\n#### 3.useEffect\n\n- useEffect有俩个参数:\n\n1. 第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些\n2. 第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码\n\n下面是对空依赖和不写依赖\n\n```js\nimport React,{useEffect,useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n\n    // 我只会执行一次\n    useEffect(() => {\n        console.log(state,\"执行一次\"); //state 0\n    }, [])\n\n    // 页面加载执行一次,当每次点击改变state数据的时候会继续执行\n    // 如果第二个参数不写的话函数内部执行的逻辑都会执行\n    useEffect(() => {\n        console.log(state,\"改变state就会执行一次\");\n    }, [state])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n\n\n- useEffect可以模拟类组件的一个生命周期\n\n```js\nimport React,{useEffect,useState,useRef} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n    const ref = useRef(true);\n    // 页面加载时执行...  componentDidMount\n    useEffect(() => {\n        console.log(\"页面结构已经创建完成.....\");\n    }, [])\n\n    // 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate\n    // useEffect(() => {\n    //     console.log(\"state改变...\");   \n    // })\n    // 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.\n    // 通过useRef来达到componentDidUpDate的一个效果\n    // 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行\n    useEffect(() => {\n        if(ref.current){\n            ref.current = false;\n            return;\n        }\n        console.log(\"state改变...\");   \n    })\n\n    // useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount\n    useEffect(() => {\n        return () => {\n            console.log(\"销毁....\");\n        }\n    },[])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 4.useCallback\n\n可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数\n\n1. 没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    return (\n        <div className=\"app\">\n            <button onClick={()=>{\n                setstate(state+2)\n                console.log(state);\n            }}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n2. 用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据\n\n```js\nimport React,{useCallback, useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const addAction = useCallback(()=>{\n        setstate(state+2)\n        console.log(state);\n    },[])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 5.useMemo\n\n对一个值进行一个缓存\n\n在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算\n\n```js\nimport React,{ useState,useMemo,useCallback} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    // 当fnc函数内部的数据发生变化会去计算state的数据\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 6.memo\n\nmemo相当于shouldComponentUpdate和PureComponent对性能的优化,\n\n他是减少没必要的组件渲染\n\n下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,\n\n```js\n#App 父组件\nimport React,{ useState,useMemo,useCallback} from 'react'\nimport One from './One'\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n\t\t\t// one组件\n            <One/>\n        </div>\n    )\n}\n\n```\n\n打印的结果\n\n![image-20210801224311088](C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png)\n\n在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行\n\n```js\n#one 子组件\nimport React,{memo} from 'react'\n// 用memo 减少无用组件的渲染\nexport default memo(function One() {\n    console.log(\"我是one组件...\");\n    return (\n        <div>\n            我是one组件\n        </div>\n    )\n}) \n```\n\n小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!\n\n\n\n\n\n\n\n","source":"_posts/react-hook.md","raw":"---\ntitle: react hook的基本使用\n---\n\n#### 1.useState\n\nuseState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态\n\n下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n    \n    const [state, setstate] = useState({\n        num:0,\n    })    \n\n    const AddClickAction = ()=>{\n        setstate({\n            num:state.num+1\n        })\n        console.log(state);\n    }\n\n    return (\n        <div className=\"app\">\n        //点击的时候增加\n            <button onClick={AddClickAction}>点我:{state.num}</button>\n        </div>\n    )\n}\n```\n\n#### 2.useRef\n\n1. 可以用来获取节点dom(节点标签)\n\n```js\nimport React,{useRef} from 'react'\n\nexport default function App() {\n\n    const ref = useRef()\n\n    // 获取到button按钮的节点\n    const getNode = ()=>{\n        console.log(ref.current);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={getNode} ref={ref}>点我</button>\n        </div>\n    )\n}\n```\n\n2. useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到\n\n#### 3.useEffect\n\n- useEffect有俩个参数:\n\n1. 第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些\n2. 第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码\n\n下面是对空依赖和不写依赖\n\n```js\nimport React,{useEffect,useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n\n    // 我只会执行一次\n    useEffect(() => {\n        console.log(state,\"执行一次\"); //state 0\n    }, [])\n\n    // 页面加载执行一次,当每次点击改变state数据的时候会继续执行\n    // 如果第二个参数不写的话函数内部执行的逻辑都会执行\n    useEffect(() => {\n        console.log(state,\"改变state就会执行一次\");\n    }, [state])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n\n\n- useEffect可以模拟类组件的一个生命周期\n\n```js\nimport React,{useEffect,useState,useRef} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n    const ref = useRef(true);\n    // 页面加载时执行...  componentDidMount\n    useEffect(() => {\n        console.log(\"页面结构已经创建完成.....\");\n    }, [])\n\n    // 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate\n    // useEffect(() => {\n    //     console.log(\"state改变...\");   \n    // })\n    // 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.\n    // 通过useRef来达到componentDidUpDate的一个效果\n    // 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行\n    useEffect(() => {\n        if(ref.current){\n            ref.current = false;\n            return;\n        }\n        console.log(\"state改变...\");   \n    })\n\n    // useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount\n    useEffect(() => {\n        return () => {\n            console.log(\"销毁....\");\n        }\n    },[])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 4.useCallback\n\n可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数\n\n1. 没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    return (\n        <div className=\"app\">\n            <button onClick={()=>{\n                setstate(state+2)\n                console.log(state);\n            }}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n2. 用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据\n\n```js\nimport React,{useCallback, useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const addAction = useCallback(()=>{\n        setstate(state+2)\n        console.log(state);\n    },[])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 5.useMemo\n\n对一个值进行一个缓存\n\n在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算\n\n```js\nimport React,{ useState,useMemo,useCallback} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    // 当fnc函数内部的数据发生变化会去计算state的数据\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 6.memo\n\nmemo相当于shouldComponentUpdate和PureComponent对性能的优化,\n\n他是减少没必要的组件渲染\n\n下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,\n\n```js\n#App 父组件\nimport React,{ useState,useMemo,useCallback} from 'react'\nimport One from './One'\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n\t\t\t// one组件\n            <One/>\n        </div>\n    )\n}\n\n```\n\n打印的结果\n\n![image-20210801224311088](C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png)\n\n在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行\n\n```js\n#one 子组件\nimport React,{memo} from 'react'\n// 用memo 减少无用组件的渲染\nexport default memo(function One() {\n    console.log(\"我是one组件...\");\n    return (\n        <div>\n            我是one组件\n        </div>\n    )\n}) \n```\n\n小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!\n\n\n\n\n\n\n\n","slug":"react-hook","published":1,"date":"2021-09-19T16:58:53.760Z","updated":"2021-09-19T17:00:16.518Z","_id":"cktrh23bw000axcfc90at5mw2","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-useState\"><a href=\"#1-useState\" class=\"headerlink\" title=\"1.useState\"></a>1.useState</h4><p>useState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态</p>\n<p>下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(&#123;</span><br><span class=\"line\">        <span class=\"attr\">num</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;)    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AddClickAction = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(&#123;</span><br><span class=\"line\">            <span class=\"attr\">num</span>:state.num+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        //点击的时候增加</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state.num&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-useRef\"><a href=\"#2-useRef\" class=\"headerlink\" title=\"2.useRef\"></a>2.useRef</h4><ol>\n<li>可以用来获取节点dom(节点标签)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = useRef()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到button按钮的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> getNode = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;getNode&#125;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到</li>\n</ol>\n<h4 id=\"3-useEffect\"><a href=\"#3-useEffect\" class=\"headerlink\" title=\"3.useEffect\"></a>3.useEffect</h4><ul>\n<li>useEffect有俩个参数:</li>\n</ul>\n<ol>\n<li>第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些</li>\n<li>第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码</li>\n</ol>\n<p>下面是对空依赖和不写依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useEffect,useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我只会执行一次</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state,<span class=\"string\">&quot;执行一次&quot;</span>); <span class=\"comment\">//state 0</span></span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 页面加载执行一次,当每次点击改变state数据的时候会继续执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果第二个参数不写的话函数内部执行的逻辑都会执行</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state,<span class=\"string\">&quot;改变state就会执行一次&quot;</span>);</span><br><span class=\"line\">    &#125;, [state])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AddClickAction = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>useEffect可以模拟类组件的一个生命周期</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useEffect,useState,useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = useRef(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 页面加载时执行...  componentDidMount</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;页面结构已经创建完成.....&quot;</span>);</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate</span></span><br><span class=\"line\">    <span class=\"comment\">// useEffect(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(&quot;state改变...&quot;);   </span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过useRef来达到componentDidUpDate的一个效果</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ref.current)&#123;</span><br><span class=\"line\">            ref.current = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;state改变...&quot;</span>);   </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;销毁....&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AddClickAction = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-useCallback\"><a href=\"#4-useCallback\" class=\"headerlink\" title=\"4.useCallback\"></a>4.useCallback</h4><p>可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数</p>\n<ol>\n<li>没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"xml\">                setstate(state+2)</span></span><br><span class=\"line\"><span class=\"xml\">                console.log(state);</span></span><br><span class=\"line\"><span class=\"xml\">            &#125;&#125;&gt;点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useCallback, useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> addAction = useCallback(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state);</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-useMemo\"><a href=\"#5-useMemo\" class=\"headerlink\" title=\"5.useMemo\"></a>5.useMemo</h4><p>对一个值进行一个缓存</p>\n<p>在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fnc =useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,[state]) </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当fnc函数内部的数据发生变化会去计算state的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> addAction = useMemo(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  fnc;</span><br><span class=\"line\">    &#125;,[fnc])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-memo\"><a href=\"#6-memo\" class=\"headerlink\" title=\"6.memo\"></a>6.memo</h4><p>memo相当于shouldComponentUpdate和PureComponent对性能的优化,</p>\n<p>他是减少没必要的组件渲染</p>\n<p>下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#App 父组件</span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> One <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./One&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fnc =useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,[state]) </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> addAction = useMemo(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  fnc;</span><br><span class=\"line\">    &#125;,[fnc])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t// one组件</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">One</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>打印的结果</p>\n<p><img src=\"C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png\" alt=\"image-20210801224311088\"></p>\n<p>在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#one 子组件</span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;memo&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 用memo 减少无用组件的渲染</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> memo(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">One</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是one组件...&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            我是one组件</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n\n<p>小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!</p>\n","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<h4 id=\"1-useState\"><a href=\"#1-useState\" class=\"headerlink\" title=\"1.useState\"></a>1.useState</h4><p>useState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态</p>\n<p>下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(&#123;</span><br><span class=\"line\">        <span class=\"attr\">num</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;)    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AddClickAction = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(&#123;</span><br><span class=\"line\">            <span class=\"attr\">num</span>:state.num+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        //点击的时候增加</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state.num&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-useRef\"><a href=\"#2-useRef\" class=\"headerlink\" title=\"2.useRef\"></a>2.useRef</h4><ol>\n<li>可以用来获取节点dom(节点标签)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = useRef()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到button按钮的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> getNode = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;getNode&#125;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到</li>\n</ol>\n<h4 id=\"3-useEffect\"><a href=\"#3-useEffect\" class=\"headerlink\" title=\"3.useEffect\"></a>3.useEffect</h4><ul>\n<li>useEffect有俩个参数:</li>\n</ul>\n<ol>\n<li>第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些</li>\n<li>第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码</li>\n</ol>\n<p>下面是对空依赖和不写依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useEffect,useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我只会执行一次</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state,<span class=\"string\">&quot;执行一次&quot;</span>); <span class=\"comment\">//state 0</span></span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 页面加载执行一次,当每次点击改变state数据的时候会继续执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果第二个参数不写的话函数内部执行的逻辑都会执行</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state,<span class=\"string\">&quot;改变state就会执行一次&quot;</span>);</span><br><span class=\"line\">    &#125;, [state])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AddClickAction = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>useEffect可以模拟类组件的一个生命周期</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useEffect,useState,useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = useRef(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 页面加载时执行...  componentDidMount</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;页面结构已经创建完成.....&quot;</span>);</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate</span></span><br><span class=\"line\">    <span class=\"comment\">// useEffect(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(&quot;state改变...&quot;);   </span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过useRef来达到componentDidUpDate的一个效果</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ref.current)&#123;</span><br><span class=\"line\">            ref.current = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;state改变...&quot;</span>);   </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount</span></span><br><span class=\"line\">    useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;销毁....&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> AddClickAction = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-useCallback\"><a href=\"#4-useCallback\" class=\"headerlink\" title=\"4.useCallback\"></a>4.useCallback</h4><p>可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数</p>\n<ol>\n<li>没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"xml\">                setstate(state+2)</span></span><br><span class=\"line\"><span class=\"xml\">                console.log(state);</span></span><br><span class=\"line\"><span class=\"xml\">            &#125;&#125;&gt;点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;useCallback, useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> addAction = useCallback(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(state);</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-useMemo\"><a href=\"#5-useMemo\" class=\"headerlink\" title=\"5.useMemo\"></a>5.useMemo</h4><p>对一个值进行一个缓存</p>\n<p>在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fnc =useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,[state]) </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当fnc函数内部的数据发生变化会去计算state的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> addAction = useMemo(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  fnc;</span><br><span class=\"line\">    &#125;,[fnc])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-memo\"><a href=\"#6-memo\" class=\"headerlink\" title=\"6.memo\"></a>6.memo</h4><p>memo相当于shouldComponentUpdate和PureComponent对性能的优化,</p>\n<p>他是减少没必要的组件渲染</p>\n<p>下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#App 父组件</span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> One <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./One&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state, setstate] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fnc =useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        setstate(state+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,[state]) </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> addAction = useMemo(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  fnc;</span><br><span class=\"line\">    &#125;,[fnc])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t// one组件</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">One</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>打印的结果</p>\n<p><img src=\"C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png\" alt=\"image-20210801224311088\"></p>\n<p>在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#one 子组件</span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;memo&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 用memo 减少无用组件的渲染</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> memo(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">One</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是one组件...&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            我是one组件</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n\n<p>小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!</p>\n"},{"title":"工作上常用的数组方法","_content":"\n##### reduce()\n\n1. reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)\n\n   initValue => 初始值(上次一回调函数的返回值),由最后一个参数init 赋予\n\n   currentValue => 当前所操作数组的值\n\n   currentIndex => 当前所操作数组的下标\n\n   currentArry => 当前数组\n\n   init => 初始值,值是传递给initValue\n\n   => 求和\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    // 数字求和 每次计算的结果都会被赋到init上面\n    const arrList = arry.reduce((init,currentValue)=>{\n        return init + currentValue\n    // 初始值为0 则 init一开始的数据就为0\n    },0)\n    console.log(arrList) // 48\n```\n\n​\t\t=> 求每一项出现的次数\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        if(currentValue in init){\n            init[currentValue] ++;\n        }else{\n            init[currentValue] = 1;\n        }\n        return init;\n    // 初始值设置为{} 因为返回出的结果 我期望是一个对象 来展现这样一个数据\n    },{})\n    // console.log(arrList); \n    // 打印结果\n    // {\n    // 1: 2,\n    // 3: 2,\n    // 4: 1,\n    // 5: 1,\n    // 7: 2,\n    // 8: 1\n    // }\n```\n\n​\t=> 数组去重\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        //includes 查找每一项有没有 有的返回true 没有则flase\n        return init.includes(currentValue) ? init : init.concat(currentValue);\n    },[])\n    console.log(arrList); \n```\n\n\n\n##### includes()\n\n1. includes 接收俩个参数 includes(value,index)\n\n   value =>  查找的数据\n\n   index => 开始查找的下标(如果是负数则从末尾还是向右找)\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n    const bool = arry.includes(3);\n    console.log(bool); //true\n```\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是7 向右边找3 找不到 则flase\n    const bool = arry.includes(3,-2);\n    console.log(bool); //flase\n\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是3 向右边找3 找到了 则true\n    const bool = arry.includes(3,-3);\n    console.log(bool); //true\n```\n\n##### map()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.map((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 并且会返回一个新的数组\n        return v;\n    })\n    console.log(num) // [2,3,7,8]\n```\n\n##### filter()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出大于3 返回新的数组\n        return v > 3;\n    })\n    console.log(num) //[7,8]\n\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出不等于3 返回新的数组\n        return v != 3;\n    })\n    console.log(num) //[2,7,8]\n```\n\n\n\n##### fill()\n\n1. fill 是替换掉原数组的内容,会改变原数组\n\n2. fill接收三个参数 fill(value,start,end)\n\n   value => 替换的内容\n\n   start => 开始的数组下标(位置)\n\n   end => 结束的数组下边(位置)\n\n```js\n    const arry = [1,3,7,8];\n    // 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标\n\t// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容\n\t// 会改变原数组\n    const fillArry = arry.fill(66,1,3);\n    console.log(fillArry); //[1, 66, 66, 8]\n```\n\n\n\n##### find()\n\n1. find始查找满足条件的第一个元素\n\n2. find(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值\n\tconst arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 3);\n    console.log(findArry); // 7\n\t// 找不到则返回 undefined\n    const arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 8);\n    console.log(findArry); // undefined\n```\n\n\n\n\n\n##### findIndex()\n\n1. findIndex是查找满足条件的第一个元素的位置\n\n2. findIndex(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值的下标\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // 2\n\n    // 找不到则返回 -1\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // -1\n```\n\n\n\n##### push()\n\n```\n    const arry = [2,3,7,8];\n    const arr = [];\n    for(let i = 0 ;i<arry.length;i++){\n    // 将数组arry里面的每一项都添加到新数组里面\n        arr.push(arry[i])\n    }\n    console.log(arr) // [2,3,7,8]\n```\n\n\n\n##### concat()\n\n```\n    const arry = [2,3,7,8];\n    const num =  [4,5,6,9,8,7];\n    // concat 可以将俩个数组 连接起来\n    const arNum = arry.concat(num)\n    console.log(arNum) // [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]\n```\n\n\n\n\n\n\n\n\n\n##### \n\n\n\n\n\n","source":"_posts/es6新特性.md","raw":"---\ntitle: 工作上常用的数组方法\n---\n\n##### reduce()\n\n1. reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)\n\n   initValue => 初始值(上次一回调函数的返回值),由最后一个参数init 赋予\n\n   currentValue => 当前所操作数组的值\n\n   currentIndex => 当前所操作数组的下标\n\n   currentArry => 当前数组\n\n   init => 初始值,值是传递给initValue\n\n   => 求和\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    // 数字求和 每次计算的结果都会被赋到init上面\n    const arrList = arry.reduce((init,currentValue)=>{\n        return init + currentValue\n    // 初始值为0 则 init一开始的数据就为0\n    },0)\n    console.log(arrList) // 48\n```\n\n​\t\t=> 求每一项出现的次数\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        if(currentValue in init){\n            init[currentValue] ++;\n        }else{\n            init[currentValue] = 1;\n        }\n        return init;\n    // 初始值设置为{} 因为返回出的结果 我期望是一个对象 来展现这样一个数据\n    },{})\n    // console.log(arrList); \n    // 打印结果\n    // {\n    // 1: 2,\n    // 3: 2,\n    // 4: 1,\n    // 5: 1,\n    // 7: 2,\n    // 8: 1\n    // }\n```\n\n​\t=> 数组去重\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        //includes 查找每一项有没有 有的返回true 没有则flase\n        return init.includes(currentValue) ? init : init.concat(currentValue);\n    },[])\n    console.log(arrList); \n```\n\n\n\n##### includes()\n\n1. includes 接收俩个参数 includes(value,index)\n\n   value =>  查找的数据\n\n   index => 开始查找的下标(如果是负数则从末尾还是向右找)\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n    const bool = arry.includes(3);\n    console.log(bool); //true\n```\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是7 向右边找3 找不到 则flase\n    const bool = arry.includes(3,-2);\n    console.log(bool); //flase\n\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是3 向右边找3 找到了 则true\n    const bool = arry.includes(3,-3);\n    console.log(bool); //true\n```\n\n##### map()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.map((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 并且会返回一个新的数组\n        return v;\n    })\n    console.log(num) // [2,3,7,8]\n```\n\n##### filter()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出大于3 返回新的数组\n        return v > 3;\n    })\n    console.log(num) //[7,8]\n\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出不等于3 返回新的数组\n        return v != 3;\n    })\n    console.log(num) //[2,7,8]\n```\n\n\n\n##### fill()\n\n1. fill 是替换掉原数组的内容,会改变原数组\n\n2. fill接收三个参数 fill(value,start,end)\n\n   value => 替换的内容\n\n   start => 开始的数组下标(位置)\n\n   end => 结束的数组下边(位置)\n\n```js\n    const arry = [1,3,7,8];\n    // 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标\n\t// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容\n\t// 会改变原数组\n    const fillArry = arry.fill(66,1,3);\n    console.log(fillArry); //[1, 66, 66, 8]\n```\n\n\n\n##### find()\n\n1. find始查找满足条件的第一个元素\n\n2. find(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值\n\tconst arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 3);\n    console.log(findArry); // 7\n\t// 找不到则返回 undefined\n    const arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 8);\n    console.log(findArry); // undefined\n```\n\n\n\n\n\n##### findIndex()\n\n1. findIndex是查找满足条件的第一个元素的位置\n\n2. findIndex(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值的下标\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // 2\n\n    // 找不到则返回 -1\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // -1\n```\n\n\n\n##### push()\n\n```\n    const arry = [2,3,7,8];\n    const arr = [];\n    for(let i = 0 ;i<arry.length;i++){\n    // 将数组arry里面的每一项都添加到新数组里面\n        arr.push(arry[i])\n    }\n    console.log(arr) // [2,3,7,8]\n```\n\n\n\n##### concat()\n\n```\n    const arry = [2,3,7,8];\n    const num =  [4,5,6,9,8,7];\n    // concat 可以将俩个数组 连接起来\n    const arNum = arry.concat(num)\n    console.log(arNum) // [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]\n```\n\n\n\n\n\n\n\n\n\n##### \n\n\n\n\n\n","slug":"es6新特性","published":1,"date":"2021-09-19T16:58:53.750Z","updated":"2021-09-19T17:01:16.872Z","_id":"cktrh23cj000bxcfccgt7fcoa","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h5><ol>\n<li><p>reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)</p>\n<p>initValue =&gt; 初始值(上次一回调函数的返回值),由最后一个参数init 赋予</p>\n<p>currentValue =&gt; 当前所操作数组的值</p>\n<p>currentIndex =&gt; 当前所操作数组的下标</p>\n<p>currentArry =&gt; 当前数组</p>\n<p>init =&gt; 初始值,值是传递给initValue</p>\n<p>=&gt; 求和</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"comment\">// 数字求和 每次计算的结果都会被赋到init上面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrList = arry.reduce(<span class=\"function\">(<span class=\"params\">init,currentValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init + currentValue</span><br><span class=\"line\"><span class=\"comment\">// 初始值为0 则 init一开始的数据就为0</span></span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrList) <span class=\"comment\">// 48</span></span><br></pre></td></tr></table></figure>\n\n<p>​        =&gt; 求每一项出现的次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrList = arry.reduce(<span class=\"function\">(<span class=\"params\">init,currentValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(currentValue <span class=\"keyword\">in</span> init)&#123;</span><br><span class=\"line\">        init[currentValue] ++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        init[currentValue] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\"><span class=\"comment\">// 初始值设置为&#123;&#125; 因为返回出的结果 我期望是一个对象 来展现这样一个数据</span></span><br><span class=\"line\">&#125;,&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(arrList); </span></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// 1: 2,</span></span><br><span class=\"line\"><span class=\"comment\">// 3: 2,</span></span><br><span class=\"line\"><span class=\"comment\">// 4: 1,</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 1,</span></span><br><span class=\"line\"><span class=\"comment\">// 7: 2,</span></span><br><span class=\"line\"><span class=\"comment\">// 8: 1</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>​    =&gt; 数组去重</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrList = arry.reduce(<span class=\"function\">(<span class=\"params\">init,currentValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//includes 查找每一项有没有 有的返回true 没有则flase</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> init.includes(currentValue) ? init : init.concat(currentValue);</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrList); </span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h5><ol>\n<li><p>includes 接收俩个参数 includes(value,index)</p>\n<p>value =&gt;  查找的数据</p>\n<p>index =&gt; 开始查找的下标(如果是负数则从末尾还是向右找)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"comment\">// 查找数组里面是否有3 有true 无flase;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bool = arry.includes(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"comment\">// 查找数组里面是否有3 有true 无flase;</span></span><br><span class=\"line\"><span class=\"comment\">// -2的位置是7 向右边找3 找不到 则flase</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> bool = arry.includes(<span class=\"number\">3</span>,-<span class=\"number\">2</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bool); <span class=\"comment\">//flase</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"comment\">// 查找数组里面是否有3 有true 无flase;</span></span><br><span class=\"line\"><span class=\"comment\">// -2的位置是3 向右边找3 找到了 则true</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> bool = arry.includes(<span class=\"number\">3</span>,-<span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bool); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = arry.map(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// v 是数组的每一项 i每一项数组的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且会返回一个新的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">// [2,3,7,8]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = arry.filter(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// v 是数组的每一项 i每一项数组的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 过滤出大于3 返回新的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">//[7,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = arry.filter(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// v 是数组的每一项 i每一项数组的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 过滤出不等于3 返回新的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v != <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">//[2,7,8]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h5><ol>\n<li><p>fill 是替换掉原数组的内容,会改变原数组</p>\n</li>\n<li><p>fill接收三个参数 fill(value,start,end)</p>\n<p>value =&gt; 替换的内容</p>\n<p>start =&gt; 开始的数组下标(位置)</p>\n<p>end =&gt; 结束的数组下边(位置)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"comment\">// 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标</span></span><br><span class=\"line\"><span class=\"comment\">// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容</span></span><br><span class=\"line\"><span class=\"comment\">// 会改变原数组</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> fillArry = arry.fill(<span class=\"number\">66</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(fillArry); <span class=\"comment\">//[1, 66, 66, 8]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h5><ol>\n<li><p>find始查找满足条件的第一个元素</p>\n</li>\n<li><p>find(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 找到了返回满足条件的第一个值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.find(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"comment\">// 找不到则返回 undefined</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.find(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h5><ol>\n<li><p>findIndex是查找满足条件的第一个元素的位置</p>\n</li>\n<li><p>findIndex(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 找到了返回满足条件的第一个值的下标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.findIndex(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 找不到则返回 -1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.findIndex(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arry = [2,3,7,8];</span><br><span class=\"line\">const arr = [];</span><br><span class=\"line\">for(let i = 0 ;i&lt;arry.length;i++)&#123;</span><br><span class=\"line\">// 将数组arry里面的每一项都添加到新数组里面</span><br><span class=\"line\">    arr.push(arry[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(arr) // [2,3,7,8]</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arry = [2,3,7,8];</span><br><span class=\"line\">const num =  [4,5,6,9,8,7];</span><br><span class=\"line\">// concat 可以将俩个数组 连接起来</span><br><span class=\"line\">const arNum = arry.concat(num)</span><br><span class=\"line\">console.log(arNum) // [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5>","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<h5 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h5><ol>\n<li><p>reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)</p>\n<p>initValue =&gt; 初始值(上次一回调函数的返回值),由最后一个参数init 赋予</p>\n<p>currentValue =&gt; 当前所操作数组的值</p>\n<p>currentIndex =&gt; 当前所操作数组的下标</p>\n<p>currentArry =&gt; 当前数组</p>\n<p>init =&gt; 初始值,值是传递给initValue</p>\n<p>=&gt; 求和</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"comment\">// 数字求和 每次计算的结果都会被赋到init上面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrList = arry.reduce(<span class=\"function\">(<span class=\"params\">init,currentValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init + currentValue</span><br><span class=\"line\"><span class=\"comment\">// 初始值为0 则 init一开始的数据就为0</span></span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrList) <span class=\"comment\">// 48</span></span><br></pre></td></tr></table></figure>\n\n<p>​        =&gt; 求每一项出现的次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrList = arry.reduce(<span class=\"function\">(<span class=\"params\">init,currentValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(currentValue <span class=\"keyword\">in</span> init)&#123;</span><br><span class=\"line\">        init[currentValue] ++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        init[currentValue] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\"><span class=\"comment\">// 初始值设置为&#123;&#125; 因为返回出的结果 我期望是一个对象 来展现这样一个数据</span></span><br><span class=\"line\">&#125;,&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(arrList); </span></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// 1: 2,</span></span><br><span class=\"line\"><span class=\"comment\">// 3: 2,</span></span><br><span class=\"line\"><span class=\"comment\">// 4: 1,</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 1,</span></span><br><span class=\"line\"><span class=\"comment\">// 7: 2,</span></span><br><span class=\"line\"><span class=\"comment\">// 8: 1</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>​    =&gt; 数组去重</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrList = arry.reduce(<span class=\"function\">(<span class=\"params\">init,currentValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//includes 查找每一项有没有 有的返回true 没有则flase</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> init.includes(currentValue) ? init : init.concat(currentValue);</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrList); </span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h5><ol>\n<li><p>includes 接收俩个参数 includes(value,index)</p>\n<p>value =&gt;  查找的数据</p>\n<p>index =&gt; 开始查找的下标(如果是负数则从末尾还是向右找)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"comment\">// 查找数组里面是否有3 有true 无flase;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bool = arry.includes(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"comment\">// 查找数组里面是否有3 有true 无flase;</span></span><br><span class=\"line\"><span class=\"comment\">// -2的位置是7 向右边找3 找不到 则flase</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> bool = arry.includes(<span class=\"number\">3</span>,-<span class=\"number\">2</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bool); <span class=\"comment\">//flase</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"comment\">// 查找数组里面是否有3 有true 无flase;</span></span><br><span class=\"line\"><span class=\"comment\">// -2的位置是3 向右边找3 找到了 则true</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> bool = arry.includes(<span class=\"number\">3</span>,-<span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bool); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = arry.map(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// v 是数组的每一项 i每一项数组的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且会返回一个新的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">// [2,3,7,8]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = arry.filter(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// v 是数组的每一项 i每一项数组的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 过滤出大于3 返回新的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">//[7,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = arry.filter(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// v 是数组的每一项 i每一项数组的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 过滤出不等于3 返回新的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v != <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">//[2,7,8]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h5><ol>\n<li><p>fill 是替换掉原数组的内容,会改变原数组</p>\n</li>\n<li><p>fill接收三个参数 fill(value,start,end)</p>\n<p>value =&gt; 替换的内容</p>\n<p>start =&gt; 开始的数组下标(位置)</p>\n<p>end =&gt; 结束的数组下边(位置)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"comment\">// 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标</span></span><br><span class=\"line\"><span class=\"comment\">// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容</span></span><br><span class=\"line\"><span class=\"comment\">// 会改变原数组</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> fillArry = arry.fill(<span class=\"number\">66</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(fillArry); <span class=\"comment\">//[1, 66, 66, 8]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h5><ol>\n<li><p>find始查找满足条件的第一个元素</p>\n</li>\n<li><p>find(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 找到了返回满足条件的第一个值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.find(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"comment\">// 找不到则返回 undefined</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.find(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h5><ol>\n<li><p>findIndex是查找满足条件的第一个元素的位置</p>\n</li>\n<li><p>findIndex(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 找到了返回满足条件的第一个值的下标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.findIndex(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 找不到则返回 -1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\">   <span class=\"keyword\">const</span> findArry = arry.findIndex(<span class=\"function\">(<span class=\"params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(findArry); <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arry = [2,3,7,8];</span><br><span class=\"line\">const arr = [];</span><br><span class=\"line\">for(let i = 0 ;i&lt;arry.length;i++)&#123;</span><br><span class=\"line\">// 将数组arry里面的每一项都添加到新数组里面</span><br><span class=\"line\">    arr.push(arry[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(arr) // [2,3,7,8]</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arry = [2,3,7,8];</span><br><span class=\"line\">const num =  [4,5,6,9,8,7];</span><br><span class=\"line\">// concat 可以将俩个数组 连接起来</span><br><span class=\"line\">const arNum = arry.concat(num)</span><br><span class=\"line\">console.log(arNum) // [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5>"},{"title":"generator的简单用法","_content":"\n#### generator\n\n介绍 => es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.\n\n1.generator基本用法\n\n```js\nfunction *generator(){\n    console.log(1);\n    yield; // 执行碰到yield 会去执行暂停\n    console.log(2);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next())\n\n// 打印结果:\n// 1\n// {value: undefined, done: false}\n// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完\n```\n\n2.next()里面也可以传参\n\n```js\nfunction *generator(){\n    console.log(1);\n    const a1 = yield 5;\n    console.log(a1);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next(111)) //第一次的传参111 是没有意义的,函数里也拿不到结果\nconsole.log(str.next(222)) //第二次传参的结果才会在第一次yield结束后拿到\n//执行结果:\n//1\n//{value: 5, done: false} //value为5 因为yield 后面赋值了为5\n//222\n//{value: undefined, done: false}\n```\n\n\n\n3.generator的迭代器委托\n\n```js\nfunction *generatorArry() {\n    var arry = ['这','个','世','你','好'];\n    var idx = 0;\n    while(idx < arry.length) yield arry[idx++];\n}\nfunction *Iterator() {\n    yield \"我是被第一次执行...\";\n    // 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕\n    yield *generatorArry();\n}\nvar ite = Iterator();\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\n// 运行结果:\n// 我是被第一次执行...\n// 这\n// 个\n// 世\n```\n\n","source":"_posts/generator.md","raw":"---\ntitle: generator的简单用法\n---\n\n#### generator\n\n介绍 => es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.\n\n1.generator基本用法\n\n```js\nfunction *generator(){\n    console.log(1);\n    yield; // 执行碰到yield 会去执行暂停\n    console.log(2);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next())\n\n// 打印结果:\n// 1\n// {value: undefined, done: false}\n// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完\n```\n\n2.next()里面也可以传参\n\n```js\nfunction *generator(){\n    console.log(1);\n    const a1 = yield 5;\n    console.log(a1);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next(111)) //第一次的传参111 是没有意义的,函数里也拿不到结果\nconsole.log(str.next(222)) //第二次传参的结果才会在第一次yield结束后拿到\n//执行结果:\n//1\n//{value: 5, done: false} //value为5 因为yield 后面赋值了为5\n//222\n//{value: undefined, done: false}\n```\n\n\n\n3.generator的迭代器委托\n\n```js\nfunction *generatorArry() {\n    var arry = ['这','个','世','你','好'];\n    var idx = 0;\n    while(idx < arry.length) yield arry[idx++];\n}\nfunction *Iterator() {\n    yield \"我是被第一次执行...\";\n    // 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕\n    yield *generatorArry();\n}\nvar ite = Iterator();\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\n// 运行结果:\n// 我是被第一次执行...\n// 这\n// 个\n// 世\n```\n\n","slug":"generator","published":1,"date":"2021-09-19T16:58:53.754Z","updated":"2021-09-19T17:00:53.524Z","_id":"cktrh23cz000cxcfchist3ro6","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h4><p>介绍 =&gt; es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.</p>\n<p>1.generator基本用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>; <span class=\"comment\">// 执行碰到yield 会去执行暂停</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = generator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.next())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: undefined, done: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完</span></span><br></pre></td></tr></table></figure>\n\n<p>2.next()里面也可以传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a1 = <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a1);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = generator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.next(<span class=\"number\">111</span>)) <span class=\"comment\">//第一次的传参111 是没有意义的,函数里也拿不到结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.next(<span class=\"number\">222</span>)) <span class=\"comment\">//第二次传参的结果才会在第一次yield结束后拿到</span></span><br><span class=\"line\"><span class=\"comment\">//执行结果:</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;value: 5, done: false&#125; //value为5 因为yield 后面赋值了为5</span></span><br><span class=\"line\"><span class=\"comment\">//222</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;value: undefined, done: false&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.generator的迭代器委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generatorArry</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arry = [<span class=\"string\">&#x27;这&#x27;</span>,<span class=\"string\">&#x27;个&#x27;</span>,<span class=\"string\">&#x27;世&#x27;</span>,<span class=\"string\">&#x27;你&#x27;</span>,<span class=\"string\">&#x27;好&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(idx &lt; arry.length) <span class=\"keyword\">yield</span> arry[idx++];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">Iterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&quot;我是被第一次执行...&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> *generatorArry();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ite = Iterator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 我是被第一次执行...</span></span><br><span class=\"line\"><span class=\"comment\">// 这</span></span><br><span class=\"line\"><span class=\"comment\">// 个</span></span><br><span class=\"line\"><span class=\"comment\">// 世</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<h4 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h4><p>介绍 =&gt; es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.</p>\n<p>1.generator基本用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>; <span class=\"comment\">// 执行碰到yield 会去执行暂停</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = generator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.next())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: undefined, done: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完</span></span><br></pre></td></tr></table></figure>\n\n<p>2.next()里面也可以传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a1 = <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a1);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = generator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.next(<span class=\"number\">111</span>)) <span class=\"comment\">//第一次的传参111 是没有意义的,函数里也拿不到结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.next(<span class=\"number\">222</span>)) <span class=\"comment\">//第二次传参的结果才会在第一次yield结束后拿到</span></span><br><span class=\"line\"><span class=\"comment\">//执行结果:</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;value: 5, done: false&#125; //value为5 因为yield 后面赋值了为5</span></span><br><span class=\"line\"><span class=\"comment\">//222</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;value: undefined, done: false&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.generator的迭代器委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generatorArry</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arry = [<span class=\"string\">&#x27;这&#x27;</span>,<span class=\"string\">&#x27;个&#x27;</span>,<span class=\"string\">&#x27;世&#x27;</span>,<span class=\"string\">&#x27;你&#x27;</span>,<span class=\"string\">&#x27;好&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(idx &lt; arry.length) <span class=\"keyword\">yield</span> arry[idx++];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">Iterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&quot;我是被第一次执行...&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> *generatorArry();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ite = Iterator();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next().value);</span><br><span class=\"line\"><span class=\"comment\">// 运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 我是被第一次执行...</span></span><br><span class=\"line\"><span class=\"comment\">// 这</span></span><br><span class=\"line\"><span class=\"comment\">// 个</span></span><br><span class=\"line\"><span class=\"comment\">// 世</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"项目组没UI,设计图怎么办","_content":"\n作为一个前端开发,你有没有类似的经历.\n\n当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,\n\n\n\n这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io \n\n\n\n它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的\n\n如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5 缺点就是下载比较慢\n\n这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的\n\n链接：https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA \n提取码：xm6s \n\n最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)\n\n","source":"_posts/项目没UI,设计图自己画.md","raw":"---\ntitle: 项目组没UI,设计图怎么办\n---\n\n作为一个前端开发,你有没有类似的经历.\n\n当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,\n\n\n\n这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io \n\n\n\n它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的\n\n如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5 缺点就是下载比较慢\n\n这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的\n\n链接：https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA \n提取码：xm6s \n\n最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)\n\n","slug":"项目没UI,设计图自己画","published":1,"date":"2021-09-19T16:58:53.747Z","updated":"2021-09-19T17:01:52.825Z","_id":"cktrh23d0000dxcfcacocc3lk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作为一个前端开发,你有没有类似的经历.</p>\n<p>当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,</p>\n<p>这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io </p>\n<p>它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的</p>\n<p>如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:<a href=\"https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5\">https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5</a> 缺点就是下载比较慢</p>\n<p>这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA\">https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA</a><br>提取码：xm6s </p>\n<p>最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)</p>\n","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<p>作为一个前端开发,你有没有类似的经历.</p>\n<p>当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,</p>\n<p>这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io </p>\n<p>它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的</p>\n<p>如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:<a href=\"https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5\">https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5</a> 缺点就是下载比较慢</p>\n<p>这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA\">https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA</a><br>提取码：xm6s </p>\n<p>最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)</p>\n"},{"title":"实现 pow(x, n)","_content":"\n实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。\n\n示例 1：\n\n```js\n输入：x = 2.00000, n = 10\n输出：1024.00000\n```\n\n示例 2：\n\n```js\n输入：x = 2.10000, n = 3\n输出：9.26100\n```\n\n示例 3：\n\n```js\n输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25\n```\n\n用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂\n\n```js\nvar myPow = function (x, n) {\n    // 当n为0次幂时 直接返回0\n    if (n === 0) return 1 \n    // 当n<0时候 x的n次方 1/x 的 -n 次方 \n    if (n < 0) {\n        return 1 / myPow(x, -n)\n    }\n    // 当n为奇次幂时 x的n次方就等于 x*x的n-1次方\n    if (n % 2) {    \n        return x * myPow(x, n - 1)\n    }\n    // 当n为偶次幂时 就等于x*x的n/2次方 \n    return myPow(x * x, n / 2)\n}\n```\n\n\n\n当然你要是觉得这么写很麻烦你也可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return Math.pow(x,n);\n}\n```\n\n还可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return x ** n;\n}\n```\n\n","source":"_posts/实现Math.pow.md","raw":"---\ntitle: 实现 pow(x, n)\n---\n\n实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。\n\n示例 1：\n\n```js\n输入：x = 2.00000, n = 10\n输出：1024.00000\n```\n\n示例 2：\n\n```js\n输入：x = 2.10000, n = 3\n输出：9.26100\n```\n\n示例 3：\n\n```js\n输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25\n```\n\n用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂\n\n```js\nvar myPow = function (x, n) {\n    // 当n为0次幂时 直接返回0\n    if (n === 0) return 1 \n    // 当n<0时候 x的n次方 1/x 的 -n 次方 \n    if (n < 0) {\n        return 1 / myPow(x, -n)\n    }\n    // 当n为奇次幂时 x的n次方就等于 x*x的n-1次方\n    if (n % 2) {    \n        return x * myPow(x, n - 1)\n    }\n    // 当n为偶次幂时 就等于x*x的n/2次方 \n    return myPow(x * x, n / 2)\n}\n```\n\n\n\n当然你要是觉得这么写很麻烦你也可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return Math.pow(x,n);\n}\n```\n\n还可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return x ** n;\n}\n```\n\n","slug":"实现Math.pow","published":1,"date":"2021-09-19T16:58:53.766Z","updated":"2021-09-19T16:59:14.665Z","_id":"cktrh23d0000excfc4kd23n0u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。</p>\n<p>示例 1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：x = <span class=\"number\">2.00000</span>, n = <span class=\"number\">10</span></span><br><span class=\"line\">输出：<span class=\"number\">1024.00000</span></span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：x = <span class=\"number\">2.10000</span>, n = <span class=\"number\">3</span></span><br><span class=\"line\">输出：<span class=\"number\">9.26100</span></span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：x = <span class=\"number\">2.00000</span>, n = -<span class=\"number\">2</span></span><br><span class=\"line\">输出：<span class=\"number\">0.25000</span></span><br><span class=\"line\">解释：<span class=\"number\">2</span>-<span class=\"number\">2</span> = <span class=\"number\">1</span>/<span class=\"number\">22</span> = <span class=\"number\">1</span>/<span class=\"number\">4</span> = <span class=\"number\">0.25</span></span><br></pre></td></tr></table></figure>\n\n<p>用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当n为0次幂时 直接返回0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"comment\">// 当n&lt;0时候 x的n次方 1/x 的 -n 次方 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> / myPow(x, -n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当n为奇次幂时 x的n次方就等于 x*x的n-1次方</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span>) &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> x * myPow(x, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当n为偶次幂时 就等于x*x的n/2次方 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> myPow(x * x, n / <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当然你要是觉得这么写很麻烦你也可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x,n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x ** n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"sidebar":"< div  class = \"cc-license animation\"  itemprop = \"sponsor\" > < a href = \"https://www.netlify.com\" class = \"cc-opacity\" title = \"用Netlify部署→ https://www .netlify.com\" target = \"_blank\" > < img width = \"80\" src = \"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt = \"Netlify\" > < / a > </ div >\n         \n\n"}},"excerpt":"","more":"<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。</p>\n<p>示例 1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：x = <span class=\"number\">2.00000</span>, n = <span class=\"number\">10</span></span><br><span class=\"line\">输出：<span class=\"number\">1024.00000</span></span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：x = <span class=\"number\">2.10000</span>, n = <span class=\"number\">3</span></span><br><span class=\"line\">输出：<span class=\"number\">9.26100</span></span><br></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：x = <span class=\"number\">2.00000</span>, n = -<span class=\"number\">2</span></span><br><span class=\"line\">输出：<span class=\"number\">0.25000</span></span><br><span class=\"line\">解释：<span class=\"number\">2</span>-<span class=\"number\">2</span> = <span class=\"number\">1</span>/<span class=\"number\">22</span> = <span class=\"number\">1</span>/<span class=\"number\">4</span> = <span class=\"number\">0.25</span></span><br></pre></td></tr></table></figure>\n\n<p>用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当n为0次幂时 直接返回0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"comment\">// 当n&lt;0时候 x的n次方 1/x 的 -n 次方 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> / myPow(x, -n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当n为奇次幂时 x的n次方就等于 x*x的n-1次方</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span>) &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> x * myPow(x, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当n为偶次幂时 就等于x*x的n/2次方 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> myPow(x * x, n / <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当然你要是觉得这么写很麻烦你也可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x,n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x ** n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}