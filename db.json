{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/img/we.png","path":"img/we.png","modified":0,"renderable":0},{"_id":"source/img/t.jpg","path":"img/t.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/bg.jpg","path":"img/bg/bg.jpg","modified":0,"renderable":0},{"_id":"source/img/i.ico","path":"img/i.ico","modified":0,"renderable":0},{"_id":"source/img/foc.png","path":"img/foc.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/es6新特性.md","hash":"84c14d5868f66bf015278fa8623b11766da522de","modified":1632070876872},{"_id":"source/_posts/generator.md","hash":"1e3f6727463c3d51d5d58bf3139dd79e46d9acf2","modified":1632070853524},{"_id":"source/_posts/git push 问题.md","hash":"93537fbfe1212232eaf43817d4202a65c7e3a3be","modified":1632070831444},{"_id":"source/_posts/react-hook.md","hash":"977065e5a34e3fc3e867d9fcdca5095312c18f92","modified":1632070816518},{"_id":"source/_posts/webpack-react-ts环境.md","hash":"b76406b9d65fff28695ffaf4f365f40a664db2d8","modified":1632069385180},{"_id":"source/_posts/俩数相加.md","hash":"74be78874e7d6cf26453e8409de70816e914b2aa","modified":1632122384329},{"_id":"source/_posts/实现Math.pow.md","hash":"3c6b905c35b17dc5ba1fb89414cb8514f40da861","modified":1632070754665},{"_id":"source/_posts/深克隆.md","hash":"8e6822b717fc0cc59c9867d585dd4d506c672ae8","modified":1632118925843},{"_id":"source/_posts/项目没UI,设计图自己画.md","hash":"6bd2c62a7a471cad527d339664819106021a6025","modified":1632070912825},{"_id":"source/about/index.md","hash":"94dbc8ac6dc52c00874997b0d55a3df16a684a88","modified":1632115630253},{"_id":"source/img/t.jpg","hash":"e17d0dea99b346549d4d6958ee79bcdd1d258e60","modified":1632119610688},{"_id":"source/img/we.png","hash":"d2701abd5a1b1d95c1f1df28aad731dd8f00254b","modified":1632120299919},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"dcba308ceb66dc1f29ed74c49ad40abe3658bd95","modified":1632130890075},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"source/img/bg/bg.jpg","hash":"e0d2554bf3bd0ca96948286cea5801ca2eb8772a","modified":1632122914154},{"_id":"public/local-search.xml","hash":"d60a8ea54a9ae8871425d628446a86ae5811414c","modified":1632122674356},{"_id":"public/about/index.html","hash":"10a89b2caf690fb6149fbdac7e899a8db2377319","modified":1632122674356},{"_id":"public/2021/09/20/git push 问题/index.html","hash":"8883ea7a6e9904b09a75a4e99563e897159c66f0","modified":1632122674356},{"_id":"public/2021/09/20/项目没UI,设计图自己画/index.html","hash":"29fd6e7bfa422ac56b3388912c2b4fb6fce8d35d","modified":1632122674356},{"_id":"public/archives/index.html","hash":"7ccaced94c0d99df7c87f8d27680efd581471917","modified":1632122674356},{"_id":"public/archives/2021/index.html","hash":"7ccaced94c0d99df7c87f8d27680efd581471917","modified":1632122674356},{"_id":"public/archives/2021/09/index.html","hash":"7ccaced94c0d99df7c87f8d27680efd581471917","modified":1632122674356},{"_id":"public/categories/算法/index.html","hash":"37107242755c2b8b8e6e007f87ea7e64aebefcd5","modified":1632122674356},{"_id":"public/tags/javascript-算法/index.html","hash":"c0016bd0a4df8cfdc1d5c479fb581313a6a64400","modified":1632122674356},{"_id":"public/404.html","hash":"0bf5806b3e7967931d667cab0c04595fec19a761","modified":1632122674356},{"_id":"public/tags/index.html","hash":"4dbf8c7552547811c63f2cb5835028fcbbe8efd4","modified":1632122674356},{"_id":"public/categories/index.html","hash":"c87c8a975ae33f4ed97067969b8980d869be9db6","modified":1632122674356},{"_id":"public/links/index.html","hash":"11703c8106c817809ca51a01c4fef6bf7eeadd1a","modified":1632122674356},{"_id":"public/2021/09/20/实现Math.pow/index.html","hash":"4697c52586b077f0827c3cec2453f7362d4810cb","modified":1632122674356},{"_id":"public/2021/09/20/俩数相加/index.html","hash":"6a579df41e33daa9773f1839ad761de812cb59e8","modified":1632122674356},{"_id":"public/2021/09/20/react-hook/index.html","hash":"f70af98f7aaf9238870614b53bf2fc2d17e7a17d","modified":1632122674356},{"_id":"public/2021/09/20/generator/index.html","hash":"55f337cc9897c509e978ae2ff7be34a4b1700ba2","modified":1632122674356},{"_id":"public/2021/09/20/es6新特性/index.html","hash":"e2935043c4c89ff1a5440ba82f8b02226c39af8e","modified":1632122674356},{"_id":"public/2021/09/20/深克隆/index.html","hash":"40c72c2201ca096a8402c14d1a8aed80343f2deb","modified":1632122674356},{"_id":"public/2021/09/20/webpack-react-ts环境/index.html","hash":"1fdb5b7fa088c75d84cc092f2ad019140dcd66bc","modified":1632122674356},{"_id":"public/index.html","hash":"d4b2ea7a7471bedd151404f31d56b48db318d11f","modified":1632122674356},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1632122674356},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1632122674356},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1632122674356},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1632122674356},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1632122674356},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1632122674356},{"_id":"public/img/t.jpg","hash":"e17d0dea99b346549d4d6958ee79bcdd1d258e60","modified":1632122674356},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1632122674356},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1632122674356},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1632122674356},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1632122674356},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1632122674356},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1632122674356},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1632122674356},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1632122674356},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1632122674356},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1632122674356},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1632122674356},{"_id":"public/img/we.png","hash":"d2701abd5a1b1d95c1f1df28aad731dd8f00254b","modified":1632122674356},{"_id":"public/img/bg/bg.jpg","hash":"0acbe3b9411a7c1918a4c92210a9be061f544325","modified":1632122674356},{"_id":"source/img/i.ico","hash":"79f3e473ff30ee3ccb7ac15a726bee51cb064509","modified":1576420284168},{"_id":"source/img/foc.png","hash":"9ee3c94935ef83ab41154edcfeb7f7ceef138c35","modified":1632124244802}],"Category":[{"name":"算法","_id":"cktsbp7xe0008agfc48cx2rrj"}],"Data":[],"Page":[{"title":"about","date":"2020-02-23T11:20:33.000Z","layout":"about","_content":"sfsfaf","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\nsfsfaf","updated":"2021-09-20T05:27:10.253Z","path":"about/index.html","comments":1,"_id":"cktsbp7wz0000agfcan610ntd","content":"<p>sfsfaf</p>\n","site":{"data":{}},"excerpt":"","more":"<p>sfsfaf</p>\n"}],"Post":[{"title":"工作上常用的数组方法","_content":"\n##### reduce()\n\n1. reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)\n\n   initValue => 初始值(上次一回调函数的返回值),由最后一个参数init 赋予\n\n   currentValue => 当前所操作数组的值\n\n   currentIndex => 当前所操作数组的下标\n\n   currentArry => 当前数组\n\n   init => 初始值,值是传递给initValue\n\n   => 求和\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    // 数字求和 每次计算的结果都会被赋到init上面\n    const arrList = arry.reduce((init,currentValue)=>{\n        return init + currentValue\n    // 初始值为0 则 init一开始的数据就为0\n    },0)\n    console.log(arrList) // 48\n```\n\n​\t\t=> 求每一项出现的次数\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        if(currentValue in init){\n            init[currentValue] ++;\n        }else{\n            init[currentValue] = 1;\n        }\n        return init;\n    // 初始值设置为{} 因为返回出的结果 我期望是一个对象 来展现这样一个数据\n    },{})\n    // console.log(arrList); \n    // 打印结果\n    // {\n    // 1: 2,\n    // 3: 2,\n    // 4: 1,\n    // 5: 1,\n    // 7: 2,\n    // 8: 1\n    // }\n```\n\n​\t=> 数组去重\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        //includes 查找每一项有没有 有的返回true 没有则flase\n        return init.includes(currentValue) ? init : init.concat(currentValue);\n    },[])\n    console.log(arrList); \n```\n\n\n\n##### includes()\n\n1. includes 接收俩个参数 includes(value,index)\n\n   value =>  查找的数据\n\n   index => 开始查找的下标(如果是负数则从末尾还是向右找)\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n    const bool = arry.includes(3);\n    console.log(bool); //true\n```\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是7 向右边找3 找不到 则flase\n    const bool = arry.includes(3,-2);\n    console.log(bool); //flase\n\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是3 向右边找3 找到了 则true\n    const bool = arry.includes(3,-3);\n    console.log(bool); //true\n```\n\n##### map()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.map((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 并且会返回一个新的数组\n        return v;\n    })\n    console.log(num) // [2,3,7,8]\n```\n\n##### filter()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出大于3 返回新的数组\n        return v > 3;\n    })\n    console.log(num) //[7,8]\n\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出不等于3 返回新的数组\n        return v != 3;\n    })\n    console.log(num) //[2,7,8]\n```\n\n\n\n##### fill()\n\n1. fill 是替换掉原数组的内容,会改变原数组\n\n2. fill接收三个参数 fill(value,start,end)\n\n   value => 替换的内容\n\n   start => 开始的数组下标(位置)\n\n   end => 结束的数组下边(位置)\n\n```js\n    const arry = [1,3,7,8];\n    // 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标\n\t// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容\n\t// 会改变原数组\n    const fillArry = arry.fill(66,1,3);\n    console.log(fillArry); //[1, 66, 66, 8]\n```\n\n\n\n##### find()\n\n1. find始查找满足条件的第一个元素\n\n2. find(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值\n\tconst arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 3);\n    console.log(findArry); // 7\n\t// 找不到则返回 undefined\n    const arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 8);\n    console.log(findArry); // undefined\n```\n\n\n\n\n\n##### findIndex()\n\n1. findIndex是查找满足条件的第一个元素的位置\n\n2. findIndex(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值的下标\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // 2\n\n    // 找不到则返回 -1\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // -1\n```\n\n\n\n##### push()\n\n```\n    const arry = [2,3,7,8];\n    const arr = [];\n    for(let i = 0 ;i<arry.length;i++){\n    // 将数组arry里面的每一项都添加到新数组里面\n        arr.push(arry[i])\n    }\n    console.log(arr) // [2,3,7,8]\n```\n\n\n\n##### concat()\n\n```\n    const arry = [2,3,7,8];\n    const num =  [4,5,6,9,8,7];\n    // concat 可以将俩个数组 连接起来\n    const arNum = arry.concat(num)\n    console.log(arNum) // [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]\n```\n\n\n\n\n\n\n\n\n\n##### \n\n\n\n\n\n","source":"_posts/es6新特性.md","raw":"---\ntitle: 工作上常用的数组方法\n---\n\n##### reduce()\n\n1. reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)\n\n   initValue => 初始值(上次一回调函数的返回值),由最后一个参数init 赋予\n\n   currentValue => 当前所操作数组的值\n\n   currentIndex => 当前所操作数组的下标\n\n   currentArry => 当前数组\n\n   init => 初始值,值是传递给initValue\n\n   => 求和\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    // 数字求和 每次计算的结果都会被赋到init上面\n    const arrList = arry.reduce((init,currentValue)=>{\n        return init + currentValue\n    // 初始值为0 则 init一开始的数据就为0\n    },0)\n    console.log(arrList) // 48\n```\n\n​\t\t=> 求每一项出现的次数\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        if(currentValue in init){\n            init[currentValue] ++;\n        }else{\n            init[currentValue] = 1;\n        }\n        return init;\n    // 初始值设置为{} 因为返回出的结果 我期望是一个对象 来展现这样一个数据\n    },{})\n    // console.log(arrList); \n    // 打印结果\n    // {\n    // 1: 2,\n    // 3: 2,\n    // 4: 1,\n    // 5: 1,\n    // 7: 2,\n    // 8: 1\n    // }\n```\n\n​\t=> 数组去重\n\n```js\n    const arry = [1,3,5,4,3,1,8,9,7,7];\n    const arrList = arry.reduce((init,currentValue)=>{\n        //includes 查找每一项有没有 有的返回true 没有则flase\n        return init.includes(currentValue) ? init : init.concat(currentValue);\n    },[])\n    console.log(arrList); \n```\n\n\n\n##### includes()\n\n1. includes 接收俩个参数 includes(value,index)\n\n   value =>  查找的数据\n\n   index => 开始查找的下标(如果是负数则从末尾还是向右找)\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n    const bool = arry.includes(3);\n    console.log(bool); //true\n```\n\n```js\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是7 向右边找3 找不到 则flase\n    const bool = arry.includes(3,-2);\n    console.log(bool); //flase\n\n    const arry = [1,3,7,8];\n    // 查找数组里面是否有3 有true 无flase;\n\t// -2的位置是3 向右边找3 找到了 则true\n    const bool = arry.includes(3,-3);\n    console.log(bool); //true\n```\n\n##### map()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.map((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 并且会返回一个新的数组\n        return v;\n    })\n    console.log(num) // [2,3,7,8]\n```\n\n##### filter()\n\n```js\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出大于3 返回新的数组\n        return v > 3;\n    })\n    console.log(num) //[7,8]\n\n    const arry = [2,3,7,8];\n    const num = arry.filter((v,i)=>{\n        // v 是数组的每一项 i每一项数组的下标\n        // 过滤出不等于3 返回新的数组\n        return v != 3;\n    })\n    console.log(num) //[2,7,8]\n```\n\n\n\n##### fill()\n\n1. fill 是替换掉原数组的内容,会改变原数组\n\n2. fill接收三个参数 fill(value,start,end)\n\n   value => 替换的内容\n\n   start => 开始的数组下标(位置)\n\n   end => 结束的数组下边(位置)\n\n```js\n    const arry = [1,3,7,8];\n    // 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标\n\t// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容\n\t// 会改变原数组\n    const fillArry = arry.fill(66,1,3);\n    console.log(fillArry); //[1, 66, 66, 8]\n```\n\n\n\n##### find()\n\n1. find始查找满足条件的第一个元素\n\n2. find(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值\n\tconst arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 3);\n    console.log(findArry); // 7\n\t// 找不到则返回 undefined\n    const arry = [1,3,7,8];\n    const findArry = arry.find((value,index,arr)=>value > 8);\n    console.log(findArry); // undefined\n```\n\n\n\n\n\n##### findIndex()\n\n1. findIndex是查找满足条件的第一个元素的位置\n\n2. findIndex(function(currentValue, index, arr))\n\n   => currentValue 当前值\n\n   => index 数组元素下边下标\n\n   => arr 当前值所属数组\n\n```js\n    // 找到了返回满足条件的第一个值的下标\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // 2\n\n    // 找不到则返回 -1\n\tconst arry = [1,3,7,8];\n    const findArry = arry.findIndex((value,index,arr)=>value > 3);\n    console.log(findArry); // -1\n```\n\n\n\n##### push()\n\n```\n    const arry = [2,3,7,8];\n    const arr = [];\n    for(let i = 0 ;i<arry.length;i++){\n    // 将数组arry里面的每一项都添加到新数组里面\n        arr.push(arry[i])\n    }\n    console.log(arr) // [2,3,7,8]\n```\n\n\n\n##### concat()\n\n```\n    const arry = [2,3,7,8];\n    const num =  [4,5,6,9,8,7];\n    // concat 可以将俩个数组 连接起来\n    const arNum = arry.concat(num)\n    console.log(arNum) // [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]\n```\n\n\n\n\n\n\n\n\n\n##### \n\n\n\n\n\n","slug":"es6新特性","published":1,"date":"2021-09-19T16:58:53.750Z","updated":"2021-09-19T17:01:16.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7x30001agfchd8h0cdr","content":"<h5 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h5><ol>\n<li><p>reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)</p>\n<p>initValue =&gt; 初始值(上次一回调函数的返回值),由最后一个参数init 赋予</p>\n<p>currentValue =&gt; 当前所操作数组的值</p>\n<p>currentIndex =&gt; 当前所操作数组的下标</p>\n<p>currentArry =&gt; 当前数组</p>\n<p>init =&gt; 初始值,值是传递给initValue</p>\n<p>=&gt; 求和</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-comment\">// 数字求和 每次计算的结果都会被赋到init上面</span><br><span class=\"hljs-keyword\">const</span> arrList = arry.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> init + currentValue<br><span class=\"hljs-comment\">// 初始值为0 则 init一开始的数据就为0</span><br>&#125;,<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-built_in\">console</span>.log(arrList) <span class=\"hljs-comment\">// 48</span><br></code></pre></td></tr></table></figure>\n\n<p>​        =&gt; 求每一项出现的次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-keyword\">const</span> arrList = arry.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(currentValue <span class=\"hljs-keyword\">in</span> init)&#123;<br>        init[currentValue] ++;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        init[currentValue] = <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> init;<br><span class=\"hljs-comment\">// 初始值设置为&#123;&#125; 因为返回出的结果 我期望是一个对象 来展现这样一个数据</span><br>&#125;,&#123;&#125;)<br><span class=\"hljs-comment\">// console.log(arrList); </span><br><span class=\"hljs-comment\">// 打印结果</span><br><span class=\"hljs-comment\">// &#123;</span><br><span class=\"hljs-comment\">// 1: 2,</span><br><span class=\"hljs-comment\">// 3: 2,</span><br><span class=\"hljs-comment\">// 4: 1,</span><br><span class=\"hljs-comment\">// 5: 1,</span><br><span class=\"hljs-comment\">// 7: 2,</span><br><span class=\"hljs-comment\">// 8: 1</span><br><span class=\"hljs-comment\">// &#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    =&gt; 数组去重</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-keyword\">const</span> arrList = arry.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//includes 查找每一项有没有 有的返回true 没有则flase</span><br>    <span class=\"hljs-keyword\">return</span> init.includes(currentValue) ? init : init.concat(currentValue);<br>&#125;,[])<br><span class=\"hljs-built_in\">console</span>.log(arrList); <br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h5><ol>\n<li><p>includes 接收俩个参数 includes(value,index)</p>\n<p>value =&gt;  查找的数据</p>\n<p>index =&gt; 开始查找的下标(如果是负数则从末尾还是向右找)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-comment\">// 查找数组里面是否有3 有true 无flase;</span><br><span class=\"hljs-keyword\">const</span> bool = arry.includes(<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-built_in\">console</span>.log(bool); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-comment\">// 查找数组里面是否有3 有true 无flase;</span><br><span class=\"hljs-comment\">// -2的位置是7 向右边找3 找不到 则flase</span><br>   <span class=\"hljs-keyword\">const</span> bool = arry.includes(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">2</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(bool); <span class=\"hljs-comment\">//flase</span><br><br>   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-comment\">// 查找数组里面是否有3 有true 无flase;</span><br><span class=\"hljs-comment\">// -2的位置是3 向右边找3 找到了 则true</span><br>   <span class=\"hljs-keyword\">const</span> bool = arry.includes(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(bool); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> num = arry.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class=\"hljs-comment\">// 并且会返回一个新的数组</span><br>    <span class=\"hljs-keyword\">return</span> v;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(num) <span class=\"hljs-comment\">// [2,3,7,8]</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> num = arry.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class=\"hljs-comment\">// 过滤出大于3 返回新的数组</span><br>    <span class=\"hljs-keyword\">return</span> v &gt; <span class=\"hljs-number\">3</span>;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(num) <span class=\"hljs-comment\">//[7,8]</span><br><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> num = arry.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class=\"hljs-comment\">// 过滤出不等于3 返回新的数组</span><br>    <span class=\"hljs-keyword\">return</span> v != <span class=\"hljs-number\">3</span>;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(num) <span class=\"hljs-comment\">//[2,7,8]</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h5><ol>\n<li><p>fill 是替换掉原数组的内容,会改变原数组</p>\n</li>\n<li><p>fill接收三个参数 fill(value,start,end)</p>\n<p>value =&gt; 替换的内容</p>\n<p>start =&gt; 开始的数组下标(位置)</p>\n<p>end =&gt; 结束的数组下边(位置)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-comment\">// 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标</span><br><span class=\"hljs-comment\">// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容</span><br><span class=\"hljs-comment\">// 会改变原数组</span><br>   <span class=\"hljs-keyword\">const</span> fillArry = arry.fill(<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(fillArry); <span class=\"hljs-comment\">//[1, 66, 66, 8]</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h5><ol>\n<li><p>find始查找满足条件的第一个元素</p>\n</li>\n<li><p>find(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-comment\">// 找到了返回满足条件的第一个值</span><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// 7</span><br><span class=\"hljs-comment\">// 找不到则返回 undefined</span><br>   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">8</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h5><ol>\n<li><p>findIndex是查找满足条件的第一个元素的位置</p>\n</li>\n<li><p>findIndex(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-comment\">// 找到了返回满足条件的第一个值的下标</span><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.findIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// 2</span><br><br>   <span class=\"hljs-comment\">// 找不到则返回 -1</span><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.findIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// -1</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h5><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs glsl\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> arr = [];<br><span class=\"hljs-keyword\">for</span>(let i = <span class=\"hljs-number\">0</span> ;i&lt;arry.<span class=\"hljs-built_in\">length</span>;i++)&#123;<br><span class=\"hljs-comment\">// 将数组arry里面的每一项都添加到新数组里面</span><br>    arr.push(arry[i])<br>&#125;<br>console.<span class=\"hljs-built_in\">log</span>(arr) <span class=\"hljs-comment\">// [2,3,7,8]</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">num</span> =  [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-comment\">// concat 可以将俩个数组 连接起来</span><br><span class=\"hljs-keyword\">const</span> arNum = arry.concat(<span class=\"hljs-built_in\">num</span>)<br>console.log(arNum) <span class=\"hljs-comment\">// [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h5><ol>\n<li><p>reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)</p>\n<p>initValue =&gt; 初始值(上次一回调函数的返回值),由最后一个参数init 赋予</p>\n<p>currentValue =&gt; 当前所操作数组的值</p>\n<p>currentIndex =&gt; 当前所操作数组的下标</p>\n<p>currentArry =&gt; 当前数组</p>\n<p>init =&gt; 初始值,值是传递给initValue</p>\n<p>=&gt; 求和</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-comment\">// 数字求和 每次计算的结果都会被赋到init上面</span><br><span class=\"hljs-keyword\">const</span> arrList = arry.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> init + currentValue<br><span class=\"hljs-comment\">// 初始值为0 则 init一开始的数据就为0</span><br>&#125;,<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-built_in\">console</span>.log(arrList) <span class=\"hljs-comment\">// 48</span><br></code></pre></td></tr></table></figure>\n\n<p>​        =&gt; 求每一项出现的次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-keyword\">const</span> arrList = arry.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(currentValue <span class=\"hljs-keyword\">in</span> init)&#123;<br>        init[currentValue] ++;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        init[currentValue] = <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> init;<br><span class=\"hljs-comment\">// 初始值设置为&#123;&#125; 因为返回出的结果 我期望是一个对象 来展现这样一个数据</span><br>&#125;,&#123;&#125;)<br><span class=\"hljs-comment\">// console.log(arrList); </span><br><span class=\"hljs-comment\">// 打印结果</span><br><span class=\"hljs-comment\">// &#123;</span><br><span class=\"hljs-comment\">// 1: 2,</span><br><span class=\"hljs-comment\">// 3: 2,</span><br><span class=\"hljs-comment\">// 4: 1,</span><br><span class=\"hljs-comment\">// 5: 1,</span><br><span class=\"hljs-comment\">// 7: 2,</span><br><span class=\"hljs-comment\">// 8: 1</span><br><span class=\"hljs-comment\">// &#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    =&gt; 数组去重</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-keyword\">const</span> arrList = arry.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//includes 查找每一项有没有 有的返回true 没有则flase</span><br>    <span class=\"hljs-keyword\">return</span> init.includes(currentValue) ? init : init.concat(currentValue);<br>&#125;,[])<br><span class=\"hljs-built_in\">console</span>.log(arrList); <br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h5><ol>\n<li><p>includes 接收俩个参数 includes(value,index)</p>\n<p>value =&gt;  查找的数据</p>\n<p>index =&gt; 开始查找的下标(如果是负数则从末尾还是向右找)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-comment\">// 查找数组里面是否有3 有true 无flase;</span><br><span class=\"hljs-keyword\">const</span> bool = arry.includes(<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-built_in\">console</span>.log(bool); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-comment\">// 查找数组里面是否有3 有true 无flase;</span><br><span class=\"hljs-comment\">// -2的位置是7 向右边找3 找不到 则flase</span><br>   <span class=\"hljs-keyword\">const</span> bool = arry.includes(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">2</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(bool); <span class=\"hljs-comment\">//flase</span><br><br>   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-comment\">// 查找数组里面是否有3 有true 无flase;</span><br><span class=\"hljs-comment\">// -2的位置是3 向右边找3 找到了 则true</span><br>   <span class=\"hljs-keyword\">const</span> bool = arry.includes(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(bool); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> num = arry.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class=\"hljs-comment\">// 并且会返回一个新的数组</span><br>    <span class=\"hljs-keyword\">return</span> v;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(num) <span class=\"hljs-comment\">// [2,3,7,8]</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> num = arry.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class=\"hljs-comment\">// 过滤出大于3 返回新的数组</span><br>    <span class=\"hljs-keyword\">return</span> v &gt; <span class=\"hljs-number\">3</span>;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(num) <span class=\"hljs-comment\">//[7,8]</span><br><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> num = arry.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class=\"hljs-comment\">// 过滤出不等于3 返回新的数组</span><br>    <span class=\"hljs-keyword\">return</span> v != <span class=\"hljs-number\">3</span>;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(num) <span class=\"hljs-comment\">//[2,7,8]</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h5><ol>\n<li><p>fill 是替换掉原数组的内容,会改变原数组</p>\n</li>\n<li><p>fill接收三个参数 fill(value,start,end)</p>\n<p>value =&gt; 替换的内容</p>\n<p>start =&gt; 开始的数组下标(位置)</p>\n<p>end =&gt; 结束的数组下边(位置)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-comment\">// 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标</span><br><span class=\"hljs-comment\">// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容</span><br><span class=\"hljs-comment\">// 会改变原数组</span><br>   <span class=\"hljs-keyword\">const</span> fillArry = arry.fill(<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(fillArry); <span class=\"hljs-comment\">//[1, 66, 66, 8]</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h5><ol>\n<li><p>find始查找满足条件的第一个元素</p>\n</li>\n<li><p>find(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-comment\">// 找到了返回满足条件的第一个值</span><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// 7</span><br><span class=\"hljs-comment\">// 找不到则返回 undefined</span><br>   <span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">8</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h5><ol>\n<li><p>findIndex是查找满足条件的第一个元素的位置</p>\n</li>\n<li><p>findIndex(function(currentValue, index, arr))</p>\n<p>=&gt; currentValue 当前值</p>\n<p>=&gt; index 数组元素下边下标</p>\n<p>=&gt; arr 当前值所属数组</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">   <span class=\"hljs-comment\">// 找到了返回满足条件的第一个值的下标</span><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.findIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// 2</span><br><br>   <span class=\"hljs-comment\">// 找不到则返回 -1</span><br><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br>   <span class=\"hljs-keyword\">const</span> findArry = arry.findIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,arr</span>)=&gt;</span>value &gt; <span class=\"hljs-number\">3</span>);<br>   <span class=\"hljs-built_in\">console</span>.log(findArry); <span class=\"hljs-comment\">// -1</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h5><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs glsl\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> arr = [];<br><span class=\"hljs-keyword\">for</span>(let i = <span class=\"hljs-number\">0</span> ;i&lt;arry.<span class=\"hljs-built_in\">length</span>;i++)&#123;<br><span class=\"hljs-comment\">// 将数组arry里面的每一项都添加到新数组里面</span><br>    arr.push(arry[i])<br>&#125;<br>console.<span class=\"hljs-built_in\">log</span>(arr) <span class=\"hljs-comment\">// [2,3,7,8]</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">const</span> arry = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">num</span> =  [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>];<br><span class=\"hljs-comment\">// concat 可以将俩个数组 连接起来</span><br><span class=\"hljs-keyword\">const</span> arNum = arry.concat(<span class=\"hljs-built_in\">num</span>)<br>console.log(arNum) <span class=\"hljs-comment\">// [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5>"},{"title":"generator的简单用法","_content":"\n#### generator\n\n介绍 => es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.\n\n1.generator基本用法\n\n```js\nfunction *generator(){\n    console.log(1);\n    yield; // 执行碰到yield 会去执行暂停\n    console.log(2);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next())\n\n// 打印结果:\n// 1\n// {value: undefined, done: false}\n// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完\n```\n\n2.next()里面也可以传参\n\n```js\nfunction *generator(){\n    console.log(1);\n    const a1 = yield 5;\n    console.log(a1);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next(111)) //第一次的传参111 是没有意义的,函数里也拿不到结果\nconsole.log(str.next(222)) //第二次传参的结果才会在第一次yield结束后拿到\n//执行结果:\n//1\n//{value: 5, done: false} //value为5 因为yield 后面赋值了为5\n//222\n//{value: undefined, done: false}\n```\n\n\n\n3.generator的迭代器委托\n\n```js\nfunction *generatorArry() {\n    var arry = ['这','个','世','你','好'];\n    var idx = 0;\n    while(idx < arry.length) yield arry[idx++];\n}\nfunction *Iterator() {\n    yield \"我是被第一次执行...\";\n    // 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕\n    yield *generatorArry();\n}\nvar ite = Iterator();\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\n// 运行结果:\n// 我是被第一次执行...\n// 这\n// 个\n// 世\n```\n\n","source":"_posts/generator.md","raw":"---\ntitle: generator的简单用法\n---\n\n#### generator\n\n介绍 => es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.\n\n1.generator基本用法\n\n```js\nfunction *generator(){\n    console.log(1);\n    yield; // 执行碰到yield 会去执行暂停\n    console.log(2);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next())\n\n// 打印结果:\n// 1\n// {value: undefined, done: false}\n// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完\n```\n\n2.next()里面也可以传参\n\n```js\nfunction *generator(){\n    console.log(1);\n    const a1 = yield 5;\n    console.log(a1);\n    yield;\n    console.log(3);\n    return 10;\n}\nconst str = generator();\nconsole.log(str.next(111)) //第一次的传参111 是没有意义的,函数里也拿不到结果\nconsole.log(str.next(222)) //第二次传参的结果才会在第一次yield结束后拿到\n//执行结果:\n//1\n//{value: 5, done: false} //value为5 因为yield 后面赋值了为5\n//222\n//{value: undefined, done: false}\n```\n\n\n\n3.generator的迭代器委托\n\n```js\nfunction *generatorArry() {\n    var arry = ['这','个','世','你','好'];\n    var idx = 0;\n    while(idx < arry.length) yield arry[idx++];\n}\nfunction *Iterator() {\n    yield \"我是被第一次执行...\";\n    // 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕\n    yield *generatorArry();\n}\nvar ite = Iterator();\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\nconsole.log(ite.next().value);\n// 运行结果:\n// 我是被第一次执行...\n// 这\n// 个\n// 世\n```\n\n","slug":"generator","published":1,"date":"2021-09-19T16:58:53.754Z","updated":"2021-09-19T17:00:53.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7x70002agfc5shdddxm","content":"<h4 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h4><p>介绍 =&gt; es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.</p>\n<p>1.generator基本用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">generator</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">yield</span>; <span class=\"hljs-comment\">// 执行碰到yield 会去执行暂停</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">yield</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span>;<br>&#125;<br><span class=\"hljs-keyword\">const</span> str = generator();<br><span class=\"hljs-built_in\">console</span>.log(str.next())<br><br><span class=\"hljs-comment\">// 打印结果:</span><br><span class=\"hljs-comment\">// 1</span><br><span class=\"hljs-comment\">// &#123;value: undefined, done: false&#125;</span><br><span class=\"hljs-comment\">// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完</span><br></code></pre></td></tr></table></figure>\n\n<p>2.next()里面也可以传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">generator</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">const</span> a1 = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(a1);<br>    <span class=\"hljs-keyword\">yield</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span>;<br>&#125;<br><span class=\"hljs-keyword\">const</span> str = generator();<br><span class=\"hljs-built_in\">console</span>.log(str.next(<span class=\"hljs-number\">111</span>)) <span class=\"hljs-comment\">//第一次的传参111 是没有意义的,函数里也拿不到结果</span><br><span class=\"hljs-built_in\">console</span>.log(str.next(<span class=\"hljs-number\">222</span>)) <span class=\"hljs-comment\">//第二次传参的结果才会在第一次yield结束后拿到</span><br><span class=\"hljs-comment\">//执行结果:</span><br><span class=\"hljs-comment\">//1</span><br><span class=\"hljs-comment\">//&#123;value: 5, done: false&#125; //value为5 因为yield 后面赋值了为5</span><br><span class=\"hljs-comment\">//222</span><br><span class=\"hljs-comment\">//&#123;value: undefined, done: false&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>3.generator的迭代器委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">generatorArry</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> arry = [<span class=\"hljs-string\">&#x27;这&#x27;</span>,<span class=\"hljs-string\">&#x27;个&#x27;</span>,<span class=\"hljs-string\">&#x27;世&#x27;</span>,<span class=\"hljs-string\">&#x27;你&#x27;</span>,<span class=\"hljs-string\">&#x27;好&#x27;</span>];<br>    <span class=\"hljs-keyword\">var</span> idx = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(idx &lt; arry.length) <span class=\"hljs-keyword\">yield</span> arry[idx++];<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">Iterator</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&quot;我是被第一次执行...&quot;</span>;<br>    <span class=\"hljs-comment\">// 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕</span><br>    <span class=\"hljs-keyword\">yield</span> *generatorArry();<br>&#125;<br><span class=\"hljs-keyword\">var</span> ite = Iterator();<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-comment\">// 运行结果:</span><br><span class=\"hljs-comment\">// 我是被第一次执行...</span><br><span class=\"hljs-comment\">// 这</span><br><span class=\"hljs-comment\">// 个</span><br><span class=\"hljs-comment\">// 世</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h4><p>介绍 =&gt; es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.</p>\n<p>1.generator基本用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">generator</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">yield</span>; <span class=\"hljs-comment\">// 执行碰到yield 会去执行暂停</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">yield</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span>;<br>&#125;<br><span class=\"hljs-keyword\">const</span> str = generator();<br><span class=\"hljs-built_in\">console</span>.log(str.next())<br><br><span class=\"hljs-comment\">// 打印结果:</span><br><span class=\"hljs-comment\">// 1</span><br><span class=\"hljs-comment\">// &#123;value: undefined, done: false&#125;</span><br><span class=\"hljs-comment\">// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完</span><br></code></pre></td></tr></table></figure>\n\n<p>2.next()里面也可以传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">generator</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">const</span> a1 = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(a1);<br>    <span class=\"hljs-keyword\">yield</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span>;<br>&#125;<br><span class=\"hljs-keyword\">const</span> str = generator();<br><span class=\"hljs-built_in\">console</span>.log(str.next(<span class=\"hljs-number\">111</span>)) <span class=\"hljs-comment\">//第一次的传参111 是没有意义的,函数里也拿不到结果</span><br><span class=\"hljs-built_in\">console</span>.log(str.next(<span class=\"hljs-number\">222</span>)) <span class=\"hljs-comment\">//第二次传参的结果才会在第一次yield结束后拿到</span><br><span class=\"hljs-comment\">//执行结果:</span><br><span class=\"hljs-comment\">//1</span><br><span class=\"hljs-comment\">//&#123;value: 5, done: false&#125; //value为5 因为yield 后面赋值了为5</span><br><span class=\"hljs-comment\">//222</span><br><span class=\"hljs-comment\">//&#123;value: undefined, done: false&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>3.generator的迭代器委托</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">generatorArry</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> arry = [<span class=\"hljs-string\">&#x27;这&#x27;</span>,<span class=\"hljs-string\">&#x27;个&#x27;</span>,<span class=\"hljs-string\">&#x27;世&#x27;</span>,<span class=\"hljs-string\">&#x27;你&#x27;</span>,<span class=\"hljs-string\">&#x27;好&#x27;</span>];<br>    <span class=\"hljs-keyword\">var</span> idx = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(idx &lt; arry.length) <span class=\"hljs-keyword\">yield</span> arry[idx++];<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">Iterator</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&quot;我是被第一次执行...&quot;</span>;<br>    <span class=\"hljs-comment\">// 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕</span><br>    <span class=\"hljs-keyword\">yield</span> *generatorArry();<br>&#125;<br><span class=\"hljs-keyword\">var</span> ite = Iterator();<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-built_in\">console</span>.log(ite.next().value);<br><span class=\"hljs-comment\">// 运行结果:</span><br><span class=\"hljs-comment\">// 我是被第一次执行...</span><br><span class=\"hljs-comment\">// 这</span><br><span class=\"hljs-comment\">// 个</span><br><span class=\"hljs-comment\">// 世</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"git push 出现的问题","_content":"\n每次登录账号密码都会推送失败,会出现同下这个问题,\n![在这里插入图片描述](https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left)\n\n```git\nLogon failed, use ctrl+c to cancel basic credential prompt.\nUsername for 'https://github.com': echo_c120@163.com\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/start-point/webpack.git/': The requested URL returned error: 403\n//登录失败，使用 ctrl+c 取消基本凭据提示。\n//“https://github.com”的用户名：echo_c120@163.com\n//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。\n//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。\n//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403\n```\n\n该问题是需要你升级git 去github设置一个个人访问令牌,\n\n解决办法,先去https://gitforwindows.org/官网下载最新版的git\n\n接着进去自己的github官网\n\n点击Settings\n\n\n\n点击Developer settings\n\n\n\n再去点击Personal access tokens\n\n\n\n点击新建一个token\n\n\n\n然后保存记住会生成一个token 记住它\n\n\n\n","source":"_posts/git push 问题.md","raw":"---\ntitle: git push 出现的问题\n---\n\n每次登录账号密码都会推送失败,会出现同下这个问题,\n![在这里插入图片描述](https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left)\n\n```git\nLogon failed, use ctrl+c to cancel basic credential prompt.\nUsername for 'https://github.com': echo_c120@163.com\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/start-point/webpack.git/': The requested URL returned error: 403\n//登录失败，使用 ctrl+c 取消基本凭据提示。\n//“https://github.com”的用户名：echo_c120@163.com\n//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。\n//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。\n//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403\n```\n\n该问题是需要你升级git 去github设置一个个人访问令牌,\n\n解决办法,先去https://gitforwindows.org/官网下载最新版的git\n\n接着进去自己的github官网\n\n点击Settings\n\n\n\n点击Developer settings\n\n\n\n再去点击Personal access tokens\n\n\n\n点击新建一个token\n\n\n\n然后保存记住会生成一个token 记住它\n\n\n\n","slug":"git push 问题","published":1,"date":"2021-09-19T16:58:53.756Z","updated":"2021-09-19T17:00:31.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7x90003agfc2axc95d8","content":"<p>每次登录账号密码都会推送失败,会出现同下这个问题,<br><img src=\"https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">Logon failed, use ctrl+c to cancel basic credential prompt.<br>Username for &#x27;https://github.com&#x27;: echo_c120@163.com<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.<br>fatal: unable to access &#x27;https://github.com/start-point/webpack.git/&#x27;: The requested URL returned error: 403<br>//登录失败，使用 ctrl+c 取消基本凭据提示。<br>//“https://github.com”的用户名：echo_c120@163.com<br>//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。<br>//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。<br>//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403<br></code></pre></td></tr></table></figure>\n\n<p>该问题是需要你升级git 去github设置一个个人访问令牌,</p>\n<p>解决办法,先去<a href=\"https://gitforwindows.org/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84git\">https://gitforwindows.org/官网下载最新版的git</a></p>\n<p>接着进去自己的github官网</p>\n<p>点击Settings</p>\n<p>点击Developer settings</p>\n<p>再去点击Personal access tokens</p>\n<p>点击新建一个token</p>\n<p>然后保存记住会生成一个token 记住它</p>\n","site":{"data":{}},"excerpt":"","more":"<p>每次登录账号密码都会推送失败,会出现同下这个问题,<br><img src=\"https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">Logon failed, use ctrl+c to cancel basic credential prompt.<br>Username for &#x27;https://github.com&#x27;: echo_c120@163.com<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.<br>fatal: unable to access &#x27;https://github.com/start-point/webpack.git/&#x27;: The requested URL returned error: 403<br>//登录失败，使用 ctrl+c 取消基本凭据提示。<br>//“https://github.com”的用户名：echo_c120@163.com<br>//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。<br>//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。<br>//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403<br></code></pre></td></tr></table></figure>\n\n<p>该问题是需要你升级git 去github设置一个个人访问令牌,</p>\n<p>解决办法,先去<a href=\"https://gitforwindows.org/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84git\">https://gitforwindows.org/官网下载最新版的git</a></p>\n<p>接着进去自己的github官网</p>\n<p>点击Settings</p>\n<p>点击Developer settings</p>\n<p>再去点击Personal access tokens</p>\n<p>点击新建一个token</p>\n<p>然后保存记住会生成一个token 记住它</p>\n"},{"title":"react hook的基本使用","_content":"\n#### 1.useState\n\nuseState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态\n\n下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n    \n    const [state, setstate] = useState({\n        num:0,\n    })    \n\n    const AddClickAction = ()=>{\n        setstate({\n            num:state.num+1\n        })\n        console.log(state);\n    }\n\n    return (\n        <div className=\"app\">\n        //点击的时候增加\n            <button onClick={AddClickAction}>点我:{state.num}</button>\n        </div>\n    )\n}\n```\n\n#### 2.useRef\n\n1. 可以用来获取节点dom(节点标签)\n\n```js\nimport React,{useRef} from 'react'\n\nexport default function App() {\n\n    const ref = useRef()\n\n    // 获取到button按钮的节点\n    const getNode = ()=>{\n        console.log(ref.current);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={getNode} ref={ref}>点我</button>\n        </div>\n    )\n}\n```\n\n2. useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到\n\n#### 3.useEffect\n\n- useEffect有俩个参数:\n\n1. 第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些\n2. 第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码\n\n下面是对空依赖和不写依赖\n\n```js\nimport React,{useEffect,useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n\n    // 我只会执行一次\n    useEffect(() => {\n        console.log(state,\"执行一次\"); //state 0\n    }, [])\n\n    // 页面加载执行一次,当每次点击改变state数据的时候会继续执行\n    // 如果第二个参数不写的话函数内部执行的逻辑都会执行\n    useEffect(() => {\n        console.log(state,\"改变state就会执行一次\");\n    }, [state])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n\n\n- useEffect可以模拟类组件的一个生命周期\n\n```js\nimport React,{useEffect,useState,useRef} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n    const ref = useRef(true);\n    // 页面加载时执行...  componentDidMount\n    useEffect(() => {\n        console.log(\"页面结构已经创建完成.....\");\n    }, [])\n\n    // 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate\n    // useEffect(() => {\n    //     console.log(\"state改变...\");   \n    // })\n    // 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.\n    // 通过useRef来达到componentDidUpDate的一个效果\n    // 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行\n    useEffect(() => {\n        if(ref.current){\n            ref.current = false;\n            return;\n        }\n        console.log(\"state改变...\");   \n    })\n\n    // useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount\n    useEffect(() => {\n        return () => {\n            console.log(\"销毁....\");\n        }\n    },[])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 4.useCallback\n\n可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数\n\n1. 没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    return (\n        <div className=\"app\">\n            <button onClick={()=>{\n                setstate(state+2)\n                console.log(state);\n            }}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n2. 用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据\n\n```js\nimport React,{useCallback, useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const addAction = useCallback(()=>{\n        setstate(state+2)\n        console.log(state);\n    },[])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 5.useMemo\n\n对一个值进行一个缓存\n\n在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算\n\n```js\nimport React,{ useState,useMemo,useCallback} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    // 当fnc函数内部的数据发生变化会去计算state的数据\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 6.memo\n\nmemo相当于shouldComponentUpdate和PureComponent对性能的优化,\n\n他是减少没必要的组件渲染\n\n下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,\n\n```js\n#App 父组件\nimport React,{ useState,useMemo,useCallback} from 'react'\nimport One from './One'\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n\t\t\t// one组件\n            <One/>\n        </div>\n    )\n}\n\n```\n\n打印的结果\n\n![image-20210801224311088](C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png)\n\n在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行\n\n```js\n#one 子组件\nimport React,{memo} from 'react'\n// 用memo 减少无用组件的渲染\nexport default memo(function One() {\n    console.log(\"我是one组件...\");\n    return (\n        <div>\n            我是one组件\n        </div>\n    )\n}) \n```\n\n小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!\n\n\n\n\n\n\n\n","source":"_posts/react-hook.md","raw":"---\ntitle: react hook的基本使用\n---\n\n#### 1.useState\n\nuseState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态\n\n下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n    \n    const [state, setstate] = useState({\n        num:0,\n    })    \n\n    const AddClickAction = ()=>{\n        setstate({\n            num:state.num+1\n        })\n        console.log(state);\n    }\n\n    return (\n        <div className=\"app\">\n        //点击的时候增加\n            <button onClick={AddClickAction}>点我:{state.num}</button>\n        </div>\n    )\n}\n```\n\n#### 2.useRef\n\n1. 可以用来获取节点dom(节点标签)\n\n```js\nimport React,{useRef} from 'react'\n\nexport default function App() {\n\n    const ref = useRef()\n\n    // 获取到button按钮的节点\n    const getNode = ()=>{\n        console.log(ref.current);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={getNode} ref={ref}>点我</button>\n        </div>\n    )\n}\n```\n\n2. useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到\n\n#### 3.useEffect\n\n- useEffect有俩个参数:\n\n1. 第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些\n2. 第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码\n\n下面是对空依赖和不写依赖\n\n```js\nimport React,{useEffect,useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n\n    // 我只会执行一次\n    useEffect(() => {\n        console.log(state,\"执行一次\"); //state 0\n    }, [])\n\n    // 页面加载执行一次,当每次点击改变state数据的时候会继续执行\n    // 如果第二个参数不写的话函数内部执行的逻辑都会执行\n    useEffect(() => {\n        console.log(state,\"改变state就会执行一次\");\n    }, [state])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n\n\n- useEffect可以模拟类组件的一个生命周期\n\n```js\nimport React,{useEffect,useState,useRef} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0);\n    const ref = useRef(true);\n    // 页面加载时执行...  componentDidMount\n    useEffect(() => {\n        console.log(\"页面结构已经创建完成.....\");\n    }, [])\n\n    // 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate\n    // useEffect(() => {\n    //     console.log(\"state改变...\");   \n    // })\n    // 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.\n    // 通过useRef来达到componentDidUpDate的一个效果\n    // 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行\n    useEffect(() => {\n        if(ref.current){\n            ref.current = false;\n            return;\n        }\n        console.log(\"state改变...\");   \n    })\n\n    // useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount\n    useEffect(() => {\n        return () => {\n            console.log(\"销毁....\");\n        }\n    },[])\n\n    const AddClickAction = ()=>{\n        setstate(state+1);\n    }\n\n    return (\n        <div className=\"app\">\n            <button onClick={AddClickAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 4.useCallback\n\n可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数\n\n1. 没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据\n\n```js\nimport React,{useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    return (\n        <div className=\"app\">\n            <button onClick={()=>{\n                setstate(state+2)\n                console.log(state);\n            }}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n2. 用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据\n\n```js\nimport React,{useCallback, useState} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const addAction = useCallback(()=>{\n        setstate(state+2)\n        console.log(state);\n    },[])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 5.useMemo\n\n对一个值进行一个缓存\n\n在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算\n\n```js\nimport React,{ useState,useMemo,useCallback} from 'react'\n\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    // 当fnc函数内部的数据发生变化会去计算state的数据\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n        </div>\n    )\n}\n```\n\n#### 6.memo\n\nmemo相当于shouldComponentUpdate和PureComponent对性能的优化,\n\n他是减少没必要的组件渲染\n\n下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,\n\n```js\n#App 父组件\nimport React,{ useState,useMemo,useCallback} from 'react'\nimport One from './One'\nexport default function App() {\n\n    const [state, setstate] = useState(0)\n\n    const fnc =useCallback(() => {\n        setstate(state+1)\n    },[state]) \n\n    const addAction = useMemo(()=>{\n        return  fnc;\n    },[fnc])\n\n    return (\n        <div className=\"app\">\n            <button onClick={addAction}>点我:{state}</button>\n\t\t\t// one组件\n            <One/>\n        </div>\n    )\n}\n\n```\n\n打印的结果\n\n![image-20210801224311088](C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png)\n\n在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行\n\n```js\n#one 子组件\nimport React,{memo} from 'react'\n// 用memo 减少无用组件的渲染\nexport default memo(function One() {\n    console.log(\"我是one组件...\");\n    return (\n        <div>\n            我是one组件\n        </div>\n    )\n}) \n```\n\n小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!\n\n\n\n\n\n\n\n","slug":"react-hook","published":1,"date":"2021-09-19T16:58:53.760Z","updated":"2021-09-19T17:00:16.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7x90004agfchmeo9tow","content":"<h4 id=\"1-useState\"><a href=\"#1-useState\" class=\"headerlink\" title=\"1.useState\"></a>1.useState</h4><p>useState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态</p>\n<p>下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(&#123;<br>        <span class=\"hljs-attr\">num</span>:<span class=\"hljs-number\">0</span>,<br>    &#125;)    <br><br>    <span class=\"hljs-keyword\">const</span> AddClickAction = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(&#123;<br>            <span class=\"hljs-attr\">num</span>:state.num+<span class=\"hljs-number\">1</span><br>        &#125;)<br>        <span class=\"hljs-built_in\">console</span>.log(state);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">        //点击的时候增加</span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state.num&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-useRef\"><a href=\"#2-useRef\" class=\"headerlink\" title=\"2.useRef\"></a>2.useRef</h4><ol>\n<li>可以用来获取节点dom(节点标签)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useRef&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> ref = useRef()<br><br>    <span class=\"hljs-comment\">// 获取到button按钮的节点</span><br>    <span class=\"hljs-keyword\">const</span> getNode = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(ref.current);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;getNode&#125;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;ref&#125;</span>&gt;</span>点我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到</li>\n</ol>\n<h4 id=\"3-useEffect\"><a href=\"#3-useEffect\" class=\"headerlink\" title=\"3.useEffect\"></a>3.useEffect</h4><ul>\n<li>useEffect有俩个参数:</li>\n</ul>\n<ol>\n<li>第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些</li>\n<li>第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码</li>\n</ol>\n<p>下面是对空依赖和不写依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useEffect,useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>);<br><br>    <span class=\"hljs-comment\">// 我只会执行一次</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(state,<span class=\"hljs-string\">&quot;执行一次&quot;</span>); <span class=\"hljs-comment\">//state 0</span><br>    &#125;, [])<br><br>    <span class=\"hljs-comment\">// 页面加载执行一次,当每次点击改变state数据的时候会继续执行</span><br>    <span class=\"hljs-comment\">// 如果第二个参数不写的话函数内部执行的逻辑都会执行</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(state,<span class=\"hljs-string\">&quot;改变state就会执行一次&quot;</span>);<br>    &#125;, [state])<br><br>    <span class=\"hljs-keyword\">const</span> AddClickAction = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>useEffect可以模拟类组件的一个生命周期</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useEffect,useState,useRef&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">const</span> ref = useRef(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-comment\">// 页面加载时执行...  componentDidMount</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;页面结构已经创建完成.....&quot;</span>);<br>    &#125;, [])<br><br>    <span class=\"hljs-comment\">// 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate</span><br>    <span class=\"hljs-comment\">// useEffect(() =&gt; &#123;</span><br>    <span class=\"hljs-comment\">//     console.log(&quot;state改变...&quot;);   </span><br>    <span class=\"hljs-comment\">// &#125;)</span><br>    <span class=\"hljs-comment\">// 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.</span><br>    <span class=\"hljs-comment\">// 通过useRef来达到componentDidUpDate的一个效果</span><br>    <span class=\"hljs-comment\">// 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(ref.current)&#123;<br>            ref.current = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;state改变...&quot;</span>);   <br>    &#125;)<br><br>    <span class=\"hljs-comment\">// useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;销毁....&quot;</span>);<br>        &#125;<br>    &#125;,[])<br><br>    <span class=\"hljs-keyword\">const</span> AddClickAction = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-useCallback\"><a href=\"#4-useCallback\" class=\"headerlink\" title=\"4.useCallback\"></a>4.useCallback</h4><p>可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数</p>\n<ol>\n<li>没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"xml\">                setstate(state+2)</span><br><span class=\"xml\">                console.log(state);</span><br><span class=\"xml\">            &#125;&#125;&gt;点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useCallback, useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">const</span> addAction = useCallback(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(state+<span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-built_in\">console</span>.log(state);<br>    &#125;,[])<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-useMemo\"><a href=\"#5-useMemo\" class=\"headerlink\" title=\"5.useMemo\"></a>5.useMemo</h4><p>对一个值进行一个缓存</p>\n<p>在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">const</span> fnc =useCallback(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>)<br>    &#125;,[state]) <br><br>    <span class=\"hljs-comment\">// 当fnc函数内部的数据发生变化会去计算state的数据</span><br>    <span class=\"hljs-keyword\">const</span> addAction = useMemo(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span>  fnc;<br>    &#125;,[fnc])<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-memo\"><a href=\"#6-memo\" class=\"headerlink\" title=\"6.memo\"></a>6.memo</h4><p>memo相当于shouldComponentUpdate和PureComponent对性能的优化,</p>\n<p>他是减少没必要的组件渲染</p>\n<p>下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#App 父组件<br><span class=\"hljs-keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><span class=\"hljs-keyword\">import</span> One <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./One&#x27;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">const</span> fnc =useCallback(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>)<br>    &#125;,[state]) <br><br>    <span class=\"hljs-keyword\">const</span> addAction = useMemo(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span>  fnc;<br>    &#125;,[fnc])<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">\t\t\t// one组件</span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">One</span>/&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>打印的结果</p>\n<p><img src=\"C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png\" alt=\"image-20210801224311088\"></p>\n<p>在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#one 子组件<br><span class=\"hljs-keyword\">import</span> React,&#123;memo&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><span class=\"hljs-comment\">// 用memo 减少无用组件的渲染</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> memo(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">One</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;我是one组件...&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">            我是one组件</span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;) <br></code></pre></td></tr></table></figure>\n\n<p>小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-useState\"><a href=\"#1-useState\" class=\"headerlink\" title=\"1.useState\"></a>1.useState</h4><p>useState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态</p>\n<p>下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(&#123;<br>        <span class=\"hljs-attr\">num</span>:<span class=\"hljs-number\">0</span>,<br>    &#125;)    <br><br>    <span class=\"hljs-keyword\">const</span> AddClickAction = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(&#123;<br>            <span class=\"hljs-attr\">num</span>:state.num+<span class=\"hljs-number\">1</span><br>        &#125;)<br>        <span class=\"hljs-built_in\">console</span>.log(state);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">        //点击的时候增加</span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state.num&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-useRef\"><a href=\"#2-useRef\" class=\"headerlink\" title=\"2.useRef\"></a>2.useRef</h4><ol>\n<li>可以用来获取节点dom(节点标签)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useRef&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> ref = useRef()<br><br>    <span class=\"hljs-comment\">// 获取到button按钮的节点</span><br>    <span class=\"hljs-keyword\">const</span> getNode = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(ref.current);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;getNode&#125;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;ref&#125;</span>&gt;</span>点我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到</li>\n</ol>\n<h4 id=\"3-useEffect\"><a href=\"#3-useEffect\" class=\"headerlink\" title=\"3.useEffect\"></a>3.useEffect</h4><ul>\n<li>useEffect有俩个参数:</li>\n</ul>\n<ol>\n<li>第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些</li>\n<li>第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码</li>\n</ol>\n<p>下面是对空依赖和不写依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useEffect,useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>);<br><br>    <span class=\"hljs-comment\">// 我只会执行一次</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(state,<span class=\"hljs-string\">&quot;执行一次&quot;</span>); <span class=\"hljs-comment\">//state 0</span><br>    &#125;, [])<br><br>    <span class=\"hljs-comment\">// 页面加载执行一次,当每次点击改变state数据的时候会继续执行</span><br>    <span class=\"hljs-comment\">// 如果第二个参数不写的话函数内部执行的逻辑都会执行</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(state,<span class=\"hljs-string\">&quot;改变state就会执行一次&quot;</span>);<br>    &#125;, [state])<br><br>    <span class=\"hljs-keyword\">const</span> AddClickAction = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>useEffect可以模拟类组件的一个生命周期</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useEffect,useState,useRef&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">const</span> ref = useRef(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-comment\">// 页面加载时执行...  componentDidMount</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;页面结构已经创建完成.....&quot;</span>);<br>    &#125;, [])<br><br>    <span class=\"hljs-comment\">// 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate</span><br>    <span class=\"hljs-comment\">// useEffect(() =&gt; &#123;</span><br>    <span class=\"hljs-comment\">//     console.log(&quot;state改变...&quot;);   </span><br>    <span class=\"hljs-comment\">// &#125;)</span><br>    <span class=\"hljs-comment\">// 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.</span><br>    <span class=\"hljs-comment\">// 通过useRef来达到componentDidUpDate的一个效果</span><br>    <span class=\"hljs-comment\">// 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(ref.current)&#123;<br>            ref.current = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;state改变...&quot;</span>);   <br>    &#125;)<br><br>    <span class=\"hljs-comment\">// useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount</span><br>    useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;销毁....&quot;</span>);<br>        &#125;<br>    &#125;,[])<br><br>    <span class=\"hljs-keyword\">const</span> AddClickAction = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-useCallback\"><a href=\"#4-useCallback\" class=\"headerlink\" title=\"4.useCallback\"></a>4.useCallback</h4><p>可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数</p>\n<ol>\n<li>没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"xml\">                setstate(state+2)</span><br><span class=\"xml\">                console.log(state);</span><br><span class=\"xml\">            &#125;&#125;&gt;点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123;useCallback, useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">const</span> addAction = useCallback(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        setstate(state+<span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-built_in\">console</span>.log(state);<br>    &#125;,[])<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-useMemo\"><a href=\"#5-useMemo\" class=\"headerlink\" title=\"5.useMemo\"></a>5.useMemo</h4><p>对一个值进行一个缓存</p>\n<p>在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">const</span> fnc =useCallback(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>)<br>    &#125;,[state]) <br><br>    <span class=\"hljs-comment\">// 当fnc函数内部的数据发生变化会去计算state的数据</span><br>    <span class=\"hljs-keyword\">const</span> addAction = useMemo(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span>  fnc;<br>    &#125;,[fnc])<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-memo\"><a href=\"#6-memo\" class=\"headerlink\" title=\"6.memo\"></a>6.memo</h4><p>memo相当于shouldComponentUpdate和PureComponent对性能的优化,</p>\n<p>他是减少没必要的组件渲染</p>\n<p>下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#App 父组件<br><span class=\"hljs-keyword\">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><span class=\"hljs-keyword\">import</span> One <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./One&#x27;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> [state, setstate] = useState(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">const</span> fnc =useCallback(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        setstate(state+<span class=\"hljs-number\">1</span>)<br>    &#125;,[state]) <br><br>    <span class=\"hljs-keyword\">const</span> addAction = useMemo(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span>  fnc;<br>    &#125;,[fnc])<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">\t\t\t// one组件</span><br><span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">One</span>/&gt;</span></span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>打印的结果</p>\n<p><img src=\"C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210801224311088.png\" alt=\"image-20210801224311088\"></p>\n<p>在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#one 子组件<br><span class=\"hljs-keyword\">import</span> React,&#123;memo&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><span class=\"hljs-comment\">// 用memo 减少无用组件的渲染</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> memo(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">One</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;我是one组件...&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">            我是one组件</span><br><span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>&#125;) <br></code></pre></td></tr></table></figure>\n\n<p>小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!</p>\n"},{"title":"webpack-react-ts环境","_content":"最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件\n\n接下来开始吧\n\n```shell\nmkdir proj\ncd proj\n```\n\n```shell\nmkdir src\n```\n\n```shell\nnpm init -y\n```\n\n```shell\nnpm install -g webpack\n```\n\n现在我们添加React和React-DOM以及它们的声明文件到`package.json`文件里做为依赖：\n\n```shell\nnpm install --save react react-dom @types/react @types/react-dom\n```\n\n接下来，我们要添加开发时依赖[awesome-typescript-loader](https://www.npmjs.com/package/awesome-typescript-loader)和[source-map-loader](https://www.npmjs.com/package/source-map-loader)。\n\n```shell\nnpm install --save-dev typescript awesome-typescript-loader source-map-loader\n```\n\n我们需要创建一个`tsconfig.json`文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 `tsconfig.json`文件，添加以下内容：\n\n```shell\n{\n    \"compilerOptions\": {\n        \"outDir\": \"./dist/\",\n        \"sourceMap\": true,\n        \"noImplicitAny\": true,\n        \"module\": \"commonjs\",\n        \"target\": \"es6\",\n        \"jsx\": \"react\"\n    },\n    \"include\": [\n        \"./src/**/*\"\n    ]\n}\n```\n\n在src目录建一个App.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\n\ntype Props = {\n    compiler:String,\n    framework:String,\n}\n\nexport const App: React.FC<Props> = (props) => {\n    return (\n        <div className=\"home-wrap\">\n            <h1>Hello from {props.compiler} and {props.framework}!</h1>;\n        </div>\n    )\n}\n```\n\n在src目录下建一个index.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport {App} from \"./App\";\n\nReactDOM.render(\n    <App compiler=\"TypeScript\" framework=\"React\" />,\n    document.getElementById(\"app\")\n);\n```\n\n\n\n在proj的根目录下面建一个index.html用来展示,内容如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Hello React!</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=\"./node_modules/react/umd/react.development.js\"></script>\n        <script src=\"./node_modules/react-dom/umd/react-dom.development.js\"></script>\n        <script src=\"./dist/bundle.js\"></script>\n    </body>\n</html>\n```\n\n\n\n然后在proj文件里新建一个 webpack.config.js,用来配置\n\n```js\nmodule.exports = {\n    // 入口\n    entry: \"./src/index.tsx\",\n    // 出口\n    output: {\n        filename: \"bundle.js\",\n        path: __dirname + \"/dist\"\n    },\n\n    // 启用 sourcemaps 以调试 webpack 的输出\n    devtool: \"source-map\",\n    mode: 'development',\n    resolve: {\n        // Add '.ts' and '.tsx' as resolvable extensions.\n        extensions: [\".ts\", \".tsx\", \".js\", \".json\"]\n    },\n\n    module: {\n        rules: [\n            // 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理\n            { test: /\\.tsx?$/, loader: \"awesome-typescript-loader\" },\n\n            // 所有输出 '.js' 文件都将包含由 'source-map-loader' 重新处理的所有源映射。\n            { enforce: \"pre\", test: /\\.js$/, loader: \"source-map-loader\" }\n        ]\n    },\n\n    // 当导入一个路径匹配以下之一的模块时，只需\n    // 假设存在相应的全局变量并改用它。\n    // 这很重要，因为它允许我们避免捆绑我们所有的\n    // 依赖项，允许浏览器在构建之间缓存这些库。\n    externals: {\n        \"react\": \"React\",\n        \"react-dom\": \"ReactDOM\"\n    }\n};\n```\n\n执行：\n\n```shell\nwebpack\n```\n\n这时候就运行成功了 ! ! !\n\n不过远远不够\n\n如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:\n\n```shell\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D\n```\n\n安装完了之后,在你的 webpack.config.js 中添加:\n\n```js\nrules: [\n    // 解析jsx\n    {\n        test: /\\.(js|jsx)$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n            loader: 'babel-loader',\n            options: {\n                presets: ['@babel/preset-env', '@babel/preset-react']\n            }\n        }\n    },\n]\n```\n\n这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,\n\n如果你想要去样式 less,则需要添加:\n\n```shell\nnpm i style-loader css-loader less less-loader -D\n```\n\n安装完之后,再去webpack.config.js里面配置:\n\n```js\nrules: [\n\t// 解析less css 文件\n    {\n        test: /\\.(css|less)$/,\n        // 这玩意儿是有顺序的\n        use: ['style-loader', 'css-loader', 'less-loader']\n    }\n]\n```\n\n这时候就已经可以去解析css,less文件了\n\n这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:\n\n```js\nmodule.exports = {  \n\t// 监听 执行 webpack --watch\n    watch: true,\n    watchOptions: {\n        // 不监听的文件或文件夹\n        ignored: /node_modules/,\n        // 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  \n        aggregateTimeout: 300,\n        // 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的\n        poll: 1000\n    },\n}\n```\n\n好了,你去执行webpack 或者 webpack --watch 就不要再去管cmd了 ,保存之后,会自动去打包\n\n动手去试试吧 ! ! !\n","source":"_posts/webpack-react-ts环境.md","raw":"---\ntitle: webpack-react-ts环境\n---\n最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件\n\n接下来开始吧\n\n```shell\nmkdir proj\ncd proj\n```\n\n```shell\nmkdir src\n```\n\n```shell\nnpm init -y\n```\n\n```shell\nnpm install -g webpack\n```\n\n现在我们添加React和React-DOM以及它们的声明文件到`package.json`文件里做为依赖：\n\n```shell\nnpm install --save react react-dom @types/react @types/react-dom\n```\n\n接下来，我们要添加开发时依赖[awesome-typescript-loader](https://www.npmjs.com/package/awesome-typescript-loader)和[source-map-loader](https://www.npmjs.com/package/source-map-loader)。\n\n```shell\nnpm install --save-dev typescript awesome-typescript-loader source-map-loader\n```\n\n我们需要创建一个`tsconfig.json`文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 `tsconfig.json`文件，添加以下内容：\n\n```shell\n{\n    \"compilerOptions\": {\n        \"outDir\": \"./dist/\",\n        \"sourceMap\": true,\n        \"noImplicitAny\": true,\n        \"module\": \"commonjs\",\n        \"target\": \"es6\",\n        \"jsx\": \"react\"\n    },\n    \"include\": [\n        \"./src/**/*\"\n    ]\n}\n```\n\n在src目录建一个App.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\n\ntype Props = {\n    compiler:String,\n    framework:String,\n}\n\nexport const App: React.FC<Props> = (props) => {\n    return (\n        <div className=\"home-wrap\">\n            <h1>Hello from {props.compiler} and {props.framework}!</h1>;\n        </div>\n    )\n}\n```\n\n在src目录下建一个index.tsx,内容如下:\n\n```tsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport {App} from \"./App\";\n\nReactDOM.render(\n    <App compiler=\"TypeScript\" framework=\"React\" />,\n    document.getElementById(\"app\")\n);\n```\n\n\n\n在proj的根目录下面建一个index.html用来展示,内容如下:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Hello React!</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=\"./node_modules/react/umd/react.development.js\"></script>\n        <script src=\"./node_modules/react-dom/umd/react-dom.development.js\"></script>\n        <script src=\"./dist/bundle.js\"></script>\n    </body>\n</html>\n```\n\n\n\n然后在proj文件里新建一个 webpack.config.js,用来配置\n\n```js\nmodule.exports = {\n    // 入口\n    entry: \"./src/index.tsx\",\n    // 出口\n    output: {\n        filename: \"bundle.js\",\n        path: __dirname + \"/dist\"\n    },\n\n    // 启用 sourcemaps 以调试 webpack 的输出\n    devtool: \"source-map\",\n    mode: 'development',\n    resolve: {\n        // Add '.ts' and '.tsx' as resolvable extensions.\n        extensions: [\".ts\", \".tsx\", \".js\", \".json\"]\n    },\n\n    module: {\n        rules: [\n            // 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理\n            { test: /\\.tsx?$/, loader: \"awesome-typescript-loader\" },\n\n            // 所有输出 '.js' 文件都将包含由 'source-map-loader' 重新处理的所有源映射。\n            { enforce: \"pre\", test: /\\.js$/, loader: \"source-map-loader\" }\n        ]\n    },\n\n    // 当导入一个路径匹配以下之一的模块时，只需\n    // 假设存在相应的全局变量并改用它。\n    // 这很重要，因为它允许我们避免捆绑我们所有的\n    // 依赖项，允许浏览器在构建之间缓存这些库。\n    externals: {\n        \"react\": \"React\",\n        \"react-dom\": \"ReactDOM\"\n    }\n};\n```\n\n执行：\n\n```shell\nwebpack\n```\n\n这时候就运行成功了 ! ! !\n\n不过远远不够\n\n如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:\n\n```shell\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D\n```\n\n安装完了之后,在你的 webpack.config.js 中添加:\n\n```js\nrules: [\n    // 解析jsx\n    {\n        test: /\\.(js|jsx)$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n            loader: 'babel-loader',\n            options: {\n                presets: ['@babel/preset-env', '@babel/preset-react']\n            }\n        }\n    },\n]\n```\n\n这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,\n\n如果你想要去样式 less,则需要添加:\n\n```shell\nnpm i style-loader css-loader less less-loader -D\n```\n\n安装完之后,再去webpack.config.js里面配置:\n\n```js\nrules: [\n\t// 解析less css 文件\n    {\n        test: /\\.(css|less)$/,\n        // 这玩意儿是有顺序的\n        use: ['style-loader', 'css-loader', 'less-loader']\n    }\n]\n```\n\n这时候就已经可以去解析css,less文件了\n\n这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:\n\n```js\nmodule.exports = {  \n\t// 监听 执行 webpack --watch\n    watch: true,\n    watchOptions: {\n        // 不监听的文件或文件夹\n        ignored: /node_modules/,\n        // 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  \n        aggregateTimeout: 300,\n        // 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的\n        poll: 1000\n    },\n}\n```\n\n好了,你去执行webpack 或者 webpack --watch 就不要再去管cmd了 ,保存之后,会自动去打包\n\n动手去试试吧 ! ! !\n","slug":"webpack-react-ts环境","published":1,"date":"2021-09-19T16:36:25.180Z","updated":"2021-09-19T16:36:25.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7xa0005agfchmcmhiuq","content":"<p>最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件</p>\n<p>接下来开始吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir proj<br>cd proj<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir src<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm init -y<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install -g webpack<br></code></pre></td></tr></table></figure>\n\n<p>现在我们添加React和React-DOM以及它们的声明文件到<code>package.json</code>文件里做为依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install --save react react-dom @types/react @types/react-dom<br></code></pre></td></tr></table></figure>\n\n<p>接下来，我们要添加开发时依赖<a href=\"https://www.npmjs.com/package/awesome-typescript-loader\">awesome-typescript-loader</a>和<a href=\"https://www.npmjs.com/package/source-map-loader\">source-map-loader</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install --save-dev typescript awesome-typescript-loader source-map-loader<br></code></pre></td></tr></table></figure>\n\n<p>我们需要创建一个<code>tsconfig.json</code>文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 <code>tsconfig.json</code>文件，添加以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">&#123;<br>    &quot;compilerOptions&quot;: &#123;<br>        &quot;outDir&quot;: &quot;./dist/&quot;,<br>        &quot;sourceMap&quot;: true,<br>        &quot;noImplicitAny&quot;: true,<br>        &quot;module&quot;: &quot;commonjs&quot;,<br>        &quot;target&quot;: &quot;es6&quot;,<br>        &quot;jsx&quot;: &quot;react&quot;<br>    &#125;,<br>    &quot;include&quot;: [<br>        &quot;./src/**/*&quot;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在src目录建一个App.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\">import * as React from &quot;react&quot;;<br><br>type Props = &#123;<br>    compiler:String,<br>    framework:String,<br>&#125;<br><br>export const App: React.FC&lt;Props&gt; = (props) =&gt; &#123;<br>    return (<br>        &lt;div className=&quot;home-wrap&quot;&gt;<br>            &lt;h1&gt;Hello from &#123;props.compiler&#125; and &#123;props.framework&#125;!&lt;/h1&gt;;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在src目录下建一个index.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\">import * as React from &quot;react&quot;;<br>import * as ReactDOM from &quot;react-dom&quot;;<br><br>import &#123;App&#125; from &quot;./App&quot;;<br><br>ReactDOM.render(<br>    &lt;App compiler=&quot;TypeScript&quot; framework=&quot;React&quot; /&gt;,<br>    document.getElementById(&quot;app&quot;)<br>);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在proj的根目录下面建一个index.html用来展示,内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello React!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>然后在proj文件里新建一个 webpack.config.js,用来配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    <span class=\"hljs-comment\">// 入口</span><br>    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&quot;./src/index.tsx&quot;</span>,<br>    <span class=\"hljs-comment\">// 出口</span><br>    <span class=\"hljs-attr\">output</span>: &#123;<br>        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;bundle.js&quot;</span>,<br>        <span class=\"hljs-attr\">path</span>: __dirname + <span class=\"hljs-string\">&quot;/dist&quot;</span><br>    &#125;,<br><br>    <span class=\"hljs-comment\">// 启用 sourcemaps 以调试 webpack 的输出</span><br>    <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&quot;source-map&quot;</span>,<br>    <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>,<br>    <span class=\"hljs-attr\">resolve</span>: &#123;<br>        <span class=\"hljs-comment\">// Add &#x27;.ts&#x27; and &#x27;.tsx&#x27; as resolvable extensions.</span><br>        <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">&quot;.ts&quot;</span>, <span class=\"hljs-string\">&quot;.tsx&quot;</span>, <span class=\"hljs-string\">&quot;.js&quot;</span>, <span class=\"hljs-string\">&quot;.json&quot;</span>]<br>    &#125;,<br><br>    <span class=\"hljs-attr\">module</span>: &#123;<br>        <span class=\"hljs-attr\">rules</span>: [<br>            <span class=\"hljs-comment\">// 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理</span><br>            &#123; <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.tsx?$/</span>, loader: <span class=\"hljs-string\">&quot;awesome-typescript-loader&quot;</span> &#125;,<br><br>            <span class=\"hljs-comment\">// 所有输出 &#x27;.js&#x27; 文件都将包含由 &#x27;source-map-loader&#x27; 重新处理的所有源映射。</span><br>            &#123; <span class=\"hljs-attr\">enforce</span>: <span class=\"hljs-string\">&quot;pre&quot;</span>, <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>, loader: <span class=\"hljs-string\">&quot;source-map-loader&quot;</span> &#125;<br>        ]<br>    &#125;,<br><br>    <span class=\"hljs-comment\">// 当导入一个路径匹配以下之一的模块时，只需</span><br>    <span class=\"hljs-comment\">// 假设存在相应的全局变量并改用它。</span><br>    <span class=\"hljs-comment\">// 这很重要，因为它允许我们避免捆绑我们所有的</span><br>    <span class=\"hljs-comment\">// 依赖项，允许浏览器在构建之间缓存这些库。</span><br>    <span class=\"hljs-attr\">externals</span>: &#123;<br>        <span class=\"hljs-string\">&quot;react&quot;</span>: <span class=\"hljs-string\">&quot;React&quot;</span>,<br>        <span class=\"hljs-string\">&quot;react-dom&quot;</span>: <span class=\"hljs-string\">&quot;ReactDOM&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">webpack<br></code></pre></td></tr></table></figure>\n\n<p>这时候就运行成功了 ! ! !</p>\n<p>不过远远不够</p>\n<p>如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D<br></code></pre></td></tr></table></figure>\n\n<p>安装完了之后,在你的 webpack.config.js 中添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">rules: [<br>    <span class=\"hljs-comment\">// 解析jsx</span><br>    &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(js|jsx)$/</span>,<br>        exclude: <span class=\"hljs-regexp\">/(node_modules|bower_components)/</span>,<br>        use: &#123;<br>            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>,<br>            <span class=\"hljs-attr\">options</span>: &#123;<br>                <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">&#x27;@babel/preset-env&#x27;</span>, <span class=\"hljs-string\">&#x27;@babel/preset-react&#x27;</span>]<br>            &#125;<br>        &#125;<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure>\n\n<p>这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,</p>\n<p>如果你想要去样式 less,则需要添加:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i style-loader css-loader less less-loader -D<br></code></pre></td></tr></table></figure>\n\n<p>安装完之后,再去webpack.config.js里面配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">rules: [<br>\t<span class=\"hljs-comment\">// 解析less css 文件</span><br>    &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(css|less)$/</span>,<br>        <span class=\"hljs-comment\">// 这玩意儿是有顺序的</span><br>        use: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>    &#125;<br>]<br></code></pre></td></tr></table></figure>\n\n<p>这时候就已经可以去解析css,less文件了</p>\n<p>这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;  <br>\t<span class=\"hljs-comment\">// 监听 执行 webpack --watch</span><br>    <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">watchOptions</span>: &#123;<br>        <span class=\"hljs-comment\">// 不监听的文件或文件夹</span><br>        <span class=\"hljs-attr\">ignored</span>: <span class=\"hljs-regexp\">/node_modules/</span>,<br>        <span class=\"hljs-comment\">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  </span><br>        aggregateTimeout: <span class=\"hljs-number\">300</span>,<br>        <span class=\"hljs-comment\">// 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的</span><br>        <span class=\"hljs-attr\">poll</span>: <span class=\"hljs-number\">1000</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>好了,你去执行webpack 或者 webpack –watch 就不要再去管cmd了 ,保存之后,会自动去打包</p>\n<p>动手去试试吧 ! ! !</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件</p>\n<p>接下来开始吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir proj<br>cd proj<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir src<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm init -y<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install -g webpack<br></code></pre></td></tr></table></figure>\n\n<p>现在我们添加React和React-DOM以及它们的声明文件到<code>package.json</code>文件里做为依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install --save react react-dom @types/react @types/react-dom<br></code></pre></td></tr></table></figure>\n\n<p>接下来，我们要添加开发时依赖<a href=\"https://www.npmjs.com/package/awesome-typescript-loader\">awesome-typescript-loader</a>和<a href=\"https://www.npmjs.com/package/source-map-loader\">source-map-loader</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install --save-dev typescript awesome-typescript-loader source-map-loader<br></code></pre></td></tr></table></figure>\n\n<p>我们需要创建一个<code>tsconfig.json</code>文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 <code>tsconfig.json</code>文件，添加以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">&#123;<br>    &quot;compilerOptions&quot;: &#123;<br>        &quot;outDir&quot;: &quot;./dist/&quot;,<br>        &quot;sourceMap&quot;: true,<br>        &quot;noImplicitAny&quot;: true,<br>        &quot;module&quot;: &quot;commonjs&quot;,<br>        &quot;target&quot;: &quot;es6&quot;,<br>        &quot;jsx&quot;: &quot;react&quot;<br>    &#125;,<br>    &quot;include&quot;: [<br>        &quot;./src/**/*&quot;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在src目录建一个App.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\">import * as React from &quot;react&quot;;<br><br>type Props = &#123;<br>    compiler:String,<br>    framework:String,<br>&#125;<br><br>export const App: React.FC&lt;Props&gt; = (props) =&gt; &#123;<br>    return (<br>        &lt;div className=&quot;home-wrap&quot;&gt;<br>            &lt;h1&gt;Hello from &#123;props.compiler&#125; and &#123;props.framework&#125;!&lt;/h1&gt;;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在src目录下建一个index.tsx,内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\">import * as React from &quot;react&quot;;<br>import * as ReactDOM from &quot;react-dom&quot;;<br><br>import &#123;App&#125; from &quot;./App&quot;;<br><br>ReactDOM.render(<br>    &lt;App compiler=&quot;TypeScript&quot; framework=&quot;React&quot; /&gt;,<br>    document.getElementById(&quot;app&quot;)<br>);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在proj的根目录下面建一个index.html用来展示,内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello React!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>然后在proj文件里新建一个 webpack.config.js,用来配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    <span class=\"hljs-comment\">// 入口</span><br>    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&quot;./src/index.tsx&quot;</span>,<br>    <span class=\"hljs-comment\">// 出口</span><br>    <span class=\"hljs-attr\">output</span>: &#123;<br>        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;bundle.js&quot;</span>,<br>        <span class=\"hljs-attr\">path</span>: __dirname + <span class=\"hljs-string\">&quot;/dist&quot;</span><br>    &#125;,<br><br>    <span class=\"hljs-comment\">// 启用 sourcemaps 以调试 webpack 的输出</span><br>    <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&quot;source-map&quot;</span>,<br>    <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>,<br>    <span class=\"hljs-attr\">resolve</span>: &#123;<br>        <span class=\"hljs-comment\">// Add &#x27;.ts&#x27; and &#x27;.tsx&#x27; as resolvable extensions.</span><br>        <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">&quot;.ts&quot;</span>, <span class=\"hljs-string\">&quot;.tsx&quot;</span>, <span class=\"hljs-string\">&quot;.js&quot;</span>, <span class=\"hljs-string\">&quot;.json&quot;</span>]<br>    &#125;,<br><br>    <span class=\"hljs-attr\">module</span>: &#123;<br>        <span class=\"hljs-attr\">rules</span>: [<br>            <span class=\"hljs-comment\">// 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理</span><br>            &#123; <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.tsx?$/</span>, loader: <span class=\"hljs-string\">&quot;awesome-typescript-loader&quot;</span> &#125;,<br><br>            <span class=\"hljs-comment\">// 所有输出 &#x27;.js&#x27; 文件都将包含由 &#x27;source-map-loader&#x27; 重新处理的所有源映射。</span><br>            &#123; <span class=\"hljs-attr\">enforce</span>: <span class=\"hljs-string\">&quot;pre&quot;</span>, <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>, loader: <span class=\"hljs-string\">&quot;source-map-loader&quot;</span> &#125;<br>        ]<br>    &#125;,<br><br>    <span class=\"hljs-comment\">// 当导入一个路径匹配以下之一的模块时，只需</span><br>    <span class=\"hljs-comment\">// 假设存在相应的全局变量并改用它。</span><br>    <span class=\"hljs-comment\">// 这很重要，因为它允许我们避免捆绑我们所有的</span><br>    <span class=\"hljs-comment\">// 依赖项，允许浏览器在构建之间缓存这些库。</span><br>    <span class=\"hljs-attr\">externals</span>: &#123;<br>        <span class=\"hljs-string\">&quot;react&quot;</span>: <span class=\"hljs-string\">&quot;React&quot;</span>,<br>        <span class=\"hljs-string\">&quot;react-dom&quot;</span>: <span class=\"hljs-string\">&quot;ReactDOM&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">webpack<br></code></pre></td></tr></table></figure>\n\n<p>这时候就运行成功了 ! ! !</p>\n<p>不过远远不够</p>\n<p>如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D<br></code></pre></td></tr></table></figure>\n\n<p>安装完了之后,在你的 webpack.config.js 中添加:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">rules: [<br>    <span class=\"hljs-comment\">// 解析jsx</span><br>    &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(js|jsx)$/</span>,<br>        exclude: <span class=\"hljs-regexp\">/(node_modules|bower_components)/</span>,<br>        use: &#123;<br>            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>,<br>            <span class=\"hljs-attr\">options</span>: &#123;<br>                <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">&#x27;@babel/preset-env&#x27;</span>, <span class=\"hljs-string\">&#x27;@babel/preset-react&#x27;</span>]<br>            &#125;<br>        &#125;<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure>\n\n<p>这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,</p>\n<p>如果你想要去样式 less,则需要添加:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm i style-loader css-loader less less-loader -D<br></code></pre></td></tr></table></figure>\n\n<p>安装完之后,再去webpack.config.js里面配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">rules: [<br>\t<span class=\"hljs-comment\">// 解析less css 文件</span><br>    &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(css|less)$/</span>,<br>        <span class=\"hljs-comment\">// 这玩意儿是有顺序的</span><br>        use: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>    &#125;<br>]<br></code></pre></td></tr></table></figure>\n\n<p>这时候就已经可以去解析css,less文件了</p>\n<p>这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;  <br>\t<span class=\"hljs-comment\">// 监听 执行 webpack --watch</span><br>    <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">watchOptions</span>: &#123;<br>        <span class=\"hljs-comment\">// 不监听的文件或文件夹</span><br>        <span class=\"hljs-attr\">ignored</span>: <span class=\"hljs-regexp\">/node_modules/</span>,<br>        <span class=\"hljs-comment\">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  </span><br>        aggregateTimeout: <span class=\"hljs-number\">300</span>,<br>        <span class=\"hljs-comment\">// 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的</span><br>        <span class=\"hljs-attr\">poll</span>: <span class=\"hljs-number\">1000</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>好了,你去执行webpack 或者 webpack –watch 就不要再去管cmd了 ,保存之后,会自动去打包</p>\n<p>动手去试试吧 ! ! !</p>\n"},{"title":"俩数相加和回文数 算法解法","_content":"\n##### 回文数\n\n给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。\n\n示例 1：\n\n输入：x = 121\n输出：true\n示例 2：\n\n输入：x = -121\n输出：false\n解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n示例 3：\n\n输入：x = 10\n输出：false\n解释：从右向左读, 为 01 。因此它不是一个回文数。\n示例 4：\n\n输入：x = -101\n输出：false\n\n\n\n这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.\n\n```js\nconst isPalindrome = (x) => {\n    if (x || x === 0) {\n        return x.toString().split('').reverse().join().replace(/,/g, '') - 0 === x;\n    }\n    return false;\n}\n```\n\n下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~\n\n```js\nconst isPalindrome = (x) => {\n    let num = x;\n    let y = 0;\n    if (x === 0) return true;\n    if (x < 0 || x % 10 === 0) return false;\n    while (x) {\n        y = parseInt(y * 10 + parseInt(x % 10));\n        x = parseInt(x / 10)\n    }\n    if(y === num){\n        return true;\n    }else{\n        return false;\n    }\n}\n```\n\n好在这俩种解法都是没问题的(●'◡'●)\n\n\n\n##### 俩数相加\n\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n示例 2：\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n示例 3：\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n\n\n\n```js\nconst addTwoNumbers = (l1, l2) => {\n    const arr = [];\n    if (l1 !== null || l2 !== null) {\n        const l1Num = l1 !== null ? l1.reverse().join().replace(/,/g, '') - 0 : 0;\n        const l2Num = l2 !== null ? l2.reverse().join().replace(/,/g, '') - 0 : 0;\n        const num = (l1Num + l2Num).toString().split('').reverse();\n        for (let v in num) {\n            arr.push(num[v] - 0);\n        }\n        return arr;\n    }else{\n        return null;\n    }\n}\n```\n\n\n\n\n","source":"_posts/俩数相加.md","raw":"---\ntitle: 俩数相加和回文数 算法解法\ntags: javascript 算法\ncategories: 算法\n---\n\n##### 回文数\n\n给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。\n\n示例 1：\n\n输入：x = 121\n输出：true\n示例 2：\n\n输入：x = -121\n输出：false\n解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n示例 3：\n\n输入：x = 10\n输出：false\n解释：从右向左读, 为 01 。因此它不是一个回文数。\n示例 4：\n\n输入：x = -101\n输出：false\n\n\n\n这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.\n\n```js\nconst isPalindrome = (x) => {\n    if (x || x === 0) {\n        return x.toString().split('').reverse().join().replace(/,/g, '') - 0 === x;\n    }\n    return false;\n}\n```\n\n下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~\n\n```js\nconst isPalindrome = (x) => {\n    let num = x;\n    let y = 0;\n    if (x === 0) return true;\n    if (x < 0 || x % 10 === 0) return false;\n    while (x) {\n        y = parseInt(y * 10 + parseInt(x % 10));\n        x = parseInt(x / 10)\n    }\n    if(y === num){\n        return true;\n    }else{\n        return false;\n    }\n}\n```\n\n好在这俩种解法都是没问题的(●'◡'●)\n\n\n\n##### 俩数相加\n\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n示例 2：\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n示例 3：\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n\n\n\n```js\nconst addTwoNumbers = (l1, l2) => {\n    const arr = [];\n    if (l1 !== null || l2 !== null) {\n        const l1Num = l1 !== null ? l1.reverse().join().replace(/,/g, '') - 0 : 0;\n        const l2Num = l2 !== null ? l2.reverse().join().replace(/,/g, '') - 0 : 0;\n        const num = (l1Num + l2Num).toString().split('').reverse();\n        for (let v in num) {\n            arr.push(num[v] - 0);\n        }\n        return arr;\n    }else{\n        return null;\n    }\n}\n```\n\n\n\n\n","slug":"俩数相加","published":1,"date":"2021-09-19T16:58:53.763Z","updated":"2021-09-20T07:19:44.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7xc0006agfc7nt91ge6","content":"<h5 id=\"回文数\"><a href=\"#回文数\" class=\"headerlink\" title=\"回文数\"></a>回文数</h5><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p>\n<p>示例 1：</p>\n<p>输入：x = 121<br>输出：true<br>示例 2：</p>\n<p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3：</p>\n<p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。<br>示例 4：</p>\n<p>输入：x = -101<br>输出：false</p>\n<p>这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> isPalindrome = <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (x || x === <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> x.toString().split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join().replace(<span class=\"hljs-regexp\">/,/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) - <span class=\"hljs-number\">0</span> === x;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> isPalindrome = <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> num = x;<br>    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span> || x % <span class=\"hljs-number\">10</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">while</span> (x) &#123;<br>        y = <span class=\"hljs-built_in\">parseInt</span>(y * <span class=\"hljs-number\">10</span> + <span class=\"hljs-built_in\">parseInt</span>(x % <span class=\"hljs-number\">10</span>));<br>        x = <span class=\"hljs-built_in\">parseInt</span>(x / <span class=\"hljs-number\">10</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(y === num)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>好在这俩种解法都是没问题的(●’◡’●)</p>\n<h5 id=\"俩数相加\"><a href=\"#俩数相加\" class=\"headerlink\" title=\"俩数相加\"></a>俩数相加</h5><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br>示例 2：</p>\n<p>输入：l1 = [0], l2 = [0]<br>输出：[0]<br>示例 3：</p>\n<p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> addTwoNumbers = <span class=\"hljs-function\">(<span class=\"hljs-params\">l1, l2</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> arr = [];<br>    <span class=\"hljs-keyword\">if</span> (l1 !== <span class=\"hljs-literal\">null</span> || l2 !== <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> l1Num = l1 !== <span class=\"hljs-literal\">null</span> ? l1.reverse().join().replace(<span class=\"hljs-regexp\">/,/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) - <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">const</span> l2Num = l2 !== <span class=\"hljs-literal\">null</span> ? l2.reverse().join().replace(<span class=\"hljs-regexp\">/,/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) - <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">const</span> num = (l1Num + l2Num).toString().split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">in</span> num) &#123;<br>            arr.push(num[v] - <span class=\"hljs-number\">0</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> arr;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"回文数\"><a href=\"#回文数\" class=\"headerlink\" title=\"回文数\"></a>回文数</h5><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p>\n<p>示例 1：</p>\n<p>输入：x = 121<br>输出：true<br>示例 2：</p>\n<p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3：</p>\n<p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。<br>示例 4：</p>\n<p>输入：x = -101<br>输出：false</p>\n<p>这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> isPalindrome = <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (x || x === <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> x.toString().split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join().replace(<span class=\"hljs-regexp\">/,/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) - <span class=\"hljs-number\">0</span> === x;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> isPalindrome = <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> num = x;<br>    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span> || x % <span class=\"hljs-number\">10</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">while</span> (x) &#123;<br>        y = <span class=\"hljs-built_in\">parseInt</span>(y * <span class=\"hljs-number\">10</span> + <span class=\"hljs-built_in\">parseInt</span>(x % <span class=\"hljs-number\">10</span>));<br>        x = <span class=\"hljs-built_in\">parseInt</span>(x / <span class=\"hljs-number\">10</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(y === num)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>好在这俩种解法都是没问题的(●’◡’●)</p>\n<h5 id=\"俩数相加\"><a href=\"#俩数相加\" class=\"headerlink\" title=\"俩数相加\"></a>俩数相加</h5><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br>示例 2：</p>\n<p>输入：l1 = [0], l2 = [0]<br>输出：[0]<br>示例 3：</p>\n<p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> addTwoNumbers = <span class=\"hljs-function\">(<span class=\"hljs-params\">l1, l2</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> arr = [];<br>    <span class=\"hljs-keyword\">if</span> (l1 !== <span class=\"hljs-literal\">null</span> || l2 !== <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> l1Num = l1 !== <span class=\"hljs-literal\">null</span> ? l1.reverse().join().replace(<span class=\"hljs-regexp\">/,/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) - <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">const</span> l2Num = l2 !== <span class=\"hljs-literal\">null</span> ? l2.reverse().join().replace(<span class=\"hljs-regexp\">/,/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) - <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">const</span> num = (l1Num + l2Num).toString().split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">in</span> num) &#123;<br>            arr.push(num[v] - <span class=\"hljs-number\">0</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> arr;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"实现 pow(x, n)","_content":"\n实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。\n\n示例 1：\n\n```js\n输入：x = 2.00000, n = 10\n输出：1024.00000\n```\n\n示例 2：\n\n```js\n输入：x = 2.10000, n = 3\n输出：9.26100\n```\n\n示例 3：\n\n```js\n输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25\n```\n\n用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂\n\n```js\nvar myPow = function (x, n) {\n    // 当n为0次幂时 直接返回0\n    if (n === 0) return 1 \n    // 当n<0时候 x的n次方 1/x 的 -n 次方 \n    if (n < 0) {\n        return 1 / myPow(x, -n)\n    }\n    // 当n为奇次幂时 x的n次方就等于 x*x的n-1次方\n    if (n % 2) {    \n        return x * myPow(x, n - 1)\n    }\n    // 当n为偶次幂时 就等于x*x的n/2次方 \n    return myPow(x * x, n / 2)\n}\n```\n\n\n\n当然你要是觉得这么写很麻烦你也可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return Math.pow(x,n);\n}\n```\n\n还可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return x ** n;\n}\n```\n\n","source":"_posts/实现Math.pow.md","raw":"---\ntitle: 实现 pow(x, n)\n---\n\n实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。\n\n示例 1：\n\n```js\n输入：x = 2.00000, n = 10\n输出：1024.00000\n```\n\n示例 2：\n\n```js\n输入：x = 2.10000, n = 3\n输出：9.26100\n```\n\n示例 3：\n\n```js\n输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25\n```\n\n用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂\n\n```js\nvar myPow = function (x, n) {\n    // 当n为0次幂时 直接返回0\n    if (n === 0) return 1 \n    // 当n<0时候 x的n次方 1/x 的 -n 次方 \n    if (n < 0) {\n        return 1 / myPow(x, -n)\n    }\n    // 当n为奇次幂时 x的n次方就等于 x*x的n-1次方\n    if (n % 2) {    \n        return x * myPow(x, n - 1)\n    }\n    // 当n为偶次幂时 就等于x*x的n/2次方 \n    return myPow(x * x, n / 2)\n}\n```\n\n\n\n当然你要是觉得这么写很麻烦你也可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return Math.pow(x,n);\n}\n```\n\n还可以这么写\n\n```js\nvar myPow = function (x, n) {\n    return x ** n;\n}\n```\n\n","slug":"实现Math.pow","published":1,"date":"2021-09-19T16:58:53.766Z","updated":"2021-09-19T16:59:14.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7xd0007agfcf0cj8si1","content":"<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。</p>\n<p>示例 1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">输入：x = <span class=\"hljs-number\">2.00000</span>, n = <span class=\"hljs-number\">10</span><br>输出：<span class=\"hljs-number\">1024.00000</span><br></code></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">输入：x = <span class=\"hljs-number\">2.10000</span>, n = <span class=\"hljs-number\">3</span><br>输出：<span class=\"hljs-number\">9.26100</span><br></code></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">输入：x = <span class=\"hljs-number\">2.00000</span>, n = -<span class=\"hljs-number\">2</span><br>输出：<span class=\"hljs-number\">0.25000</span><br>解释：<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span> = <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">22</span> = <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">4</span> = <span class=\"hljs-number\">0.25</span><br></code></pre></td></tr></table></figure>\n\n<p>用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myPow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 当n为0次幂时 直接返回0</span><br>    <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> <br>    <span class=\"hljs-comment\">// 当n&lt;0时候 x的n次方 1/x 的 -n 次方 </span><br>    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / myPow(x, -n)<br>    &#125;<br>    <span class=\"hljs-comment\">// 当n为奇次幂时 x的n次方就等于 x*x的n-1次方</span><br>    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span>) &#123;    <br>        <span class=\"hljs-keyword\">return</span> x * myPow(x, n - <span class=\"hljs-number\">1</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 当n为偶次幂时 就等于x*x的n/2次方 </span><br>    <span class=\"hljs-keyword\">return</span> myPow(x * x, n / <span class=\"hljs-number\">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>当然你要是觉得这么写很麻烦你也可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myPow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.pow(x,n);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>还可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myPow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x ** n;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。</p>\n<p>示例 1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">输入：x = <span class=\"hljs-number\">2.00000</span>, n = <span class=\"hljs-number\">10</span><br>输出：<span class=\"hljs-number\">1024.00000</span><br></code></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">输入：x = <span class=\"hljs-number\">2.10000</span>, n = <span class=\"hljs-number\">3</span><br>输出：<span class=\"hljs-number\">9.26100</span><br></code></pre></td></tr></table></figure>\n\n<p>示例 3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">输入：x = <span class=\"hljs-number\">2.00000</span>, n = -<span class=\"hljs-number\">2</span><br>输出：<span class=\"hljs-number\">0.25000</span><br>解释：<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span> = <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">22</span> = <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">4</span> = <span class=\"hljs-number\">0.25</span><br></code></pre></td></tr></table></figure>\n\n<p>用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myPow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 当n为0次幂时 直接返回0</span><br>    <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> <br>    <span class=\"hljs-comment\">// 当n&lt;0时候 x的n次方 1/x 的 -n 次方 </span><br>    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / myPow(x, -n)<br>    &#125;<br>    <span class=\"hljs-comment\">// 当n为奇次幂时 x的n次方就等于 x*x的n-1次方</span><br>    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span>) &#123;    <br>        <span class=\"hljs-keyword\">return</span> x * myPow(x, n - <span class=\"hljs-number\">1</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 当n为偶次幂时 就等于x*x的n/2次方 </span><br>    <span class=\"hljs-keyword\">return</span> myPow(x * x, n / <span class=\"hljs-number\">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>当然你要是觉得这么写很麻烦你也可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myPow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.pow(x,n);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>还可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myPow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x ** n;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"对象的深克隆,内有函数,数组","_content":"\n一个朋友在面试的时候面到了深浅克隆的问题,\n\n浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.\n\n深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.\n\n我还是拿下面这个数据格式作为克隆对象 👇\n\n它里面是有对象,有函数和数组\n\n```\nconst obj = {\n    \"childrenList\": [{\n        \"childrenList\": [{\n            \"childrenList\": () => {\n                console.log(this)\n            },\n            \"id\": 5,\n            \"name\": \"子节点11\",\n            \"pId\": 3,\n            \"type\": \"1\"\n        }],\n        \"id\": 3,\n        \"name\": \"子节点1\",\n        \"pId\": 1,\n        \"type\": \"1\"\n    }],\n    \"id\": 1,\n    \"name\": \"根节点1\",\n    \"pId\": 0,\n    \"type\": \"1\"\n}\n```\n\n话不多说,直接上代码.\n\n```\nfunction clone(num) {\n\t// 申明一个变量,不赋值,因为他有可变性\n    let data;\n    // 判断 是否为对象\n    if (num instanceof Object) {\n    // 函数是引用\n        if (num instanceof Function) {\n            return new Function('return '+num.toString()).call(this)\n        } else if (num instanceof Array) {\n        // 如果数组 递归遍历就好啦\n            data = [];\n            for (let v in num) {\n                data.push(clone(num[v]));\n            }\n        } else {\n        // 同数组一样\n            data = {};\n            for (let v in num) {\n                data[v] = clone(num[v]);\n            }\n        }\n    } else {\n    // 基本数据类型 直接赋值就好啦\n        data = num;\n    }\n    return data;\n}\n\nconsole.log(clone(obj));\n```\n\n以下是我深克隆之后拿到的数据 👇\n\n","source":"_posts/深克隆.md","raw":"---\ntitle: 对象的深克隆,内有函数,数组\n---\n\n一个朋友在面试的时候面到了深浅克隆的问题,\n\n浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.\n\n深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.\n\n我还是拿下面这个数据格式作为克隆对象 👇\n\n它里面是有对象,有函数和数组\n\n```\nconst obj = {\n    \"childrenList\": [{\n        \"childrenList\": [{\n            \"childrenList\": () => {\n                console.log(this)\n            },\n            \"id\": 5,\n            \"name\": \"子节点11\",\n            \"pId\": 3,\n            \"type\": \"1\"\n        }],\n        \"id\": 3,\n        \"name\": \"子节点1\",\n        \"pId\": 1,\n        \"type\": \"1\"\n    }],\n    \"id\": 1,\n    \"name\": \"根节点1\",\n    \"pId\": 0,\n    \"type\": \"1\"\n}\n```\n\n话不多说,直接上代码.\n\n```\nfunction clone(num) {\n\t// 申明一个变量,不赋值,因为他有可变性\n    let data;\n    // 判断 是否为对象\n    if (num instanceof Object) {\n    // 函数是引用\n        if (num instanceof Function) {\n            return new Function('return '+num.toString()).call(this)\n        } else if (num instanceof Array) {\n        // 如果数组 递归遍历就好啦\n            data = [];\n            for (let v in num) {\n                data.push(clone(num[v]));\n            }\n        } else {\n        // 同数组一样\n            data = {};\n            for (let v in num) {\n                data[v] = clone(num[v]);\n            }\n        }\n    } else {\n    // 基本数据类型 直接赋值就好啦\n        data = num;\n    }\n    return data;\n}\n\nconsole.log(clone(obj));\n```\n\n以下是我深克隆之后拿到的数据 👇\n\n","slug":"深克隆","published":1,"date":"2021-09-19T16:56:52.916Z","updated":"2021-09-20T06:22:05.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7xh000aagfcaa2w3om8","content":"<p>一个朋友在面试的时候面到了深浅克隆的问题,</p>\n<p>浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.</p>\n<p>深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.</p>\n<p>我还是拿下面这个数据格式作为克隆对象 👇</p>\n<p>它里面是有对象,有函数和数组</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">const obj = &#123;<br>    <span class=\"hljs-string\">&quot;childrenList&quot;</span>: [&#123;<br>        <span class=\"hljs-string\">&quot;childrenList&quot;</span>: [&#123;<br>            <span class=\"hljs-string\">&quot;childrenList&quot;</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)<br>            &#125;,<br>            <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">5</span>,<br>            <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;子节点11&quot;</span>,<br>            <span class=\"hljs-string\">&quot;pId&quot;</span>: <span class=\"hljs-number\">3</span>,<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span><br>        &#125;],<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">3</span>,<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;子节点1&quot;</span>,<br>        <span class=\"hljs-string\">&quot;pId&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span><br>    &#125;],<br>    <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;根节点1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;pId&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>话不多说,直接上代码.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\">num</span>) </span>&#123;<br>\t<span class=\"hljs-comment\">// 申明一个变量,不赋值,因为他有可变性</span><br>    let data;<br>    <span class=\"hljs-comment\">// 判断 是否为对象</span><br>    <span class=\"hljs-keyword\">if</span> (num <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-keyword\">Object</span>) &#123;<br>    <span class=\"hljs-comment\">// 函数是引用</span><br>        <span class=\"hljs-keyword\">if</span> (num <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">Function</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">Function</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;return &#x27;</span>+num.toString(<span class=\"hljs-params\"></span>)</span>).<span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">this</span>)</span><br><span class=\"hljs-function\">        &#125; <span class=\"hljs-title\">else</span> <span class=\"hljs-title\">if</span> (<span class=\"hljs-params\">num <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-keyword\">Array</span></span>) </span>&#123;<br>        <span class=\"hljs-comment\">// 如果数组 递归遍历就好啦</span><br>            data = [];<br>            <span class=\"hljs-keyword\">for</span> (let v in num) &#123;<br>                data.push(<span class=\"hljs-keyword\">clone</span>(num[v]));<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 同数组一样</span><br>            data = &#123;&#125;;<br>            <span class=\"hljs-keyword\">for</span> (let v in num) &#123;<br>                data[v] = <span class=\"hljs-keyword\">clone</span>(num[v]);<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 基本数据类型 直接赋值就好啦</span><br>        data = num;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> data;<br>&#125;<br><br>console.log(<span class=\"hljs-keyword\">clone</span>(obj));<br></code></pre></td></tr></table></figure>\n\n<p>以下是我深克隆之后拿到的数据 👇</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个朋友在面试的时候面到了深浅克隆的问题,</p>\n<p>浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.</p>\n<p>深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.</p>\n<p>我还是拿下面这个数据格式作为克隆对象 👇</p>\n<p>它里面是有对象,有函数和数组</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">const obj = &#123;<br>    <span class=\"hljs-string\">&quot;childrenList&quot;</span>: [&#123;<br>        <span class=\"hljs-string\">&quot;childrenList&quot;</span>: [&#123;<br>            <span class=\"hljs-string\">&quot;childrenList&quot;</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)<br>            &#125;,<br>            <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">5</span>,<br>            <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;子节点11&quot;</span>,<br>            <span class=\"hljs-string\">&quot;pId&quot;</span>: <span class=\"hljs-number\">3</span>,<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span><br>        &#125;],<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">3</span>,<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;子节点1&quot;</span>,<br>        <span class=\"hljs-string\">&quot;pId&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span><br>    &#125;],<br>    <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;根节点1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;pId&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>话不多说,直接上代码.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\">num</span>) </span>&#123;<br>\t<span class=\"hljs-comment\">// 申明一个变量,不赋值,因为他有可变性</span><br>    let data;<br>    <span class=\"hljs-comment\">// 判断 是否为对象</span><br>    <span class=\"hljs-keyword\">if</span> (num <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-keyword\">Object</span>) &#123;<br>    <span class=\"hljs-comment\">// 函数是引用</span><br>        <span class=\"hljs-keyword\">if</span> (num <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">Function</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">Function</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;return &#x27;</span>+num.toString(<span class=\"hljs-params\"></span>)</span>).<span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">this</span>)</span><br><span class=\"hljs-function\">        &#125; <span class=\"hljs-title\">else</span> <span class=\"hljs-title\">if</span> (<span class=\"hljs-params\">num <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-keyword\">Array</span></span>) </span>&#123;<br>        <span class=\"hljs-comment\">// 如果数组 递归遍历就好啦</span><br>            data = [];<br>            <span class=\"hljs-keyword\">for</span> (let v in num) &#123;<br>                data.push(<span class=\"hljs-keyword\">clone</span>(num[v]));<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 同数组一样</span><br>            data = &#123;&#125;;<br>            <span class=\"hljs-keyword\">for</span> (let v in num) &#123;<br>                data[v] = <span class=\"hljs-keyword\">clone</span>(num[v]);<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 基本数据类型 直接赋值就好啦</span><br>        data = num;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> data;<br>&#125;<br><br>console.log(<span class=\"hljs-keyword\">clone</span>(obj));<br></code></pre></td></tr></table></figure>\n\n<p>以下是我深克隆之后拿到的数据 👇</p>\n"},{"title":"项目组没UI,设计图怎么办","_content":"\n作为一个前端开发,你有没有类似的经历.\n\n当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,\n\n\n\n这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io \n\n\n\n它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的\n\n如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5 缺点就是下载比较慢\n\n这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的\n\n链接：https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA \n提取码：xm6s \n\n最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)\n\n","source":"_posts/项目没UI,设计图自己画.md","raw":"---\ntitle: 项目组没UI,设计图怎么办\n---\n\n作为一个前端开发,你有没有类似的经历.\n\n当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,\n\n\n\n这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io \n\n\n\n它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的\n\n如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5 缺点就是下载比较慢\n\n这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的\n\n链接：https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA \n提取码：xm6s \n\n最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)\n\n","slug":"项目没UI,设计图自己画","published":1,"date":"2021-09-19T16:58:53.747Z","updated":"2021-09-19T17:01:52.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktsbp7xh000bagfc9q54dsyh","content":"<p>作为一个前端开发,你有没有类似的经历.</p>\n<p>当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,</p>\n<p>这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io </p>\n<p>它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的</p>\n<p>如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:<a href=\"https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5\">https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5</a> 缺点就是下载比较慢</p>\n<p>这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA\">https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA</a><br>提取码：xm6s </p>\n<p>最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为一个前端开发,你有没有类似的经历.</p>\n<p>当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,</p>\n<p>这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io </p>\n<p>它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的</p>\n<p>如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:<a href=\"https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5\">https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5</a> 缺点就是下载比较慢</p>\n<p>这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA\">https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA</a><br>提取码：xm6s </p>\n<p>最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktsbp7xc0006agfc7nt91ge6","category_id":"cktsbp7xe0008agfc48cx2rrj","_id":"cktsbp7xl000dagfcc0up2kip"}],"PostTag":[{"post_id":"cktsbp7xc0006agfc7nt91ge6","tag_id":"cktsbp7xg0009agfcbh9v2y7u","_id":"cktsbp7xk000cagfc122i4ro5"}],"Tag":[{"name":"javascript 算法","_id":"cktsbp7xg0009agfcbh9v2y7u"}]}}
