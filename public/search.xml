<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>✨网站资源|VPN</title>
      <link href="/2021/10/02/%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/"/>
      <url>/2021/10/02/%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站:"></a>资源网站:</h4><ol><li><p><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></p><p>这是一个图片资源网站,图片的格式在里面也是应有尽有,4k..</p></li><li><p><a href="https://cloudconvert.com/png-to-ico">https://cloudconvert.com/png-to-ico</a></p><p>这是一个将图片转换成ico格式,比如你在换电脑里面的文件图标,你可能就会需要这个网站,来将你吧需要的图片转换成你想要的ico图标格式的<img src="/img/pic/ico01.png" alt="image-20210925095437689"></p><p>这就是网站打开的样子,你可以直接把你的图片直接拖进去,也可以点击上传,总之不要太好用,并且速度很快….</p></li><li><p><a href="http://pngimg.com/">http://pngimg.com/</a></p><p>这是一个png格式的素材网站,如果在做设计方面或者需要用到素材的,这里有很多场景的素材,例如:蛇的素材</p><p>要说我为什么找🐍的素材,完全是因为他是第一个.拉拉..</p><p><img src="/img/pic/png01.png" alt="image-20210925095437689">    如果你需要直接点击dowmload下载就可以了…</p></li><li><p><a href="https://unsplash.com/">https://unsplash.com/</a></p><p>这是一个图片网站，和上面的<a href="https://wallhaven.cc/%E4%B8%8D%E5%90%8C,%E4%BB%96%E4%B8%BB%E8%A6%81%E6%98%AF%E6%95%B4%E5%90%88%E4%BA%86%E5%88%9B%E6%84%8F%E5%9B%BE%E7%89%87%E5%92%8C%E4%B8%80%E4%BA%9B%E7%94%9F%E6%B4%BB%E7%B1%BB%E7%9A%84%E5%9B%BE%E7%89%87,%E6%9B%B4%E8%B4%B4%E8%BF%91%E7%94%9F%E6%B4%BB,%E5%A6%82%E6%9E%9C%E4%BD%A0%E8%A6%81%E4%B8%BA%E4%BA%86%E6%8B%8D%E7%85%A7%E8%80%8C%E6%89%BE%E7%81%B5%E6%84%9F,%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E6%98%AF%E4%B8%8D%E4%B8%8D%E9%94%99%E7%9A%84%E9%80%89%E6%8B%A9">https://wallhaven.cc/不同,他主要是整合了创意图片和一些生活类的图片,更贴近生活,如果你要为了拍照而找灵感,这个网站是不不错的选择</a></p><p><img src="/img/pic/c01.png" alt="c01"></p></li><li><p><a href="https://www.3gbizhi.com/">https://www.3gbizhi.com/</a></p><p>一个手机壁纸网站,可以进来看看,总有你喜欢的图片在里面</p><p><img src="/img/pic/phone01.png" alt="image-20210925102136991"></p></li><li><p><a href="https://www.iloveimg.com/zh-cn">https://www.iloveimg.com/zh-cn</a></p><p>一个编辑图片的网站,你想要的编辑操作它里面都有,如果你平时有在用ps的话,可以忽略这个网站</p><p>关键这个网站一直是免费的,白嫖的总是最好的</p><p><img src="/img/pic/caozuo01.png" alt="image-20210925101519064"></p></li><li><p><a href="https://www.aconvert.com/cn/">https://www.aconvert.com/cn/</a></p><p>这是一个在线转换文档,图像,视频.音频…是一个很便捷的网站,可以在线编译,最主要的是,他是个免费的…</p><p>图片就不贴这了,因为一你打开你就知道该怎么做..</p></li><li><p><a href="https://www.alltoall.net/">https://www.alltoall.net/</a></p><p>也是个转换资源的网站,他主要是将一些 PDF转word 或者压缩图片等等一类的..</p></li></ol><h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><ol><li><p><a href="https://webgradients.com/">https://webgradients.com/</a></p><p>一个渐变色的网站,里面很多种色彩,开箱即用,在平时写网页的时候,这个网站可能派得上用处</p></li><li><p><a href="http://zhongguose.com/">http://zhongguose.com/</a></p><p>这个就没什么好说的了,当之无愧的中国色网站,也是非常好用的一个,我平时要是找颜色,或者用到什么,都是在这个上面找,他真是给了我一个很好的体验,没点击一个颜色,他会以整个屏幕变换颜色反馈给我们…真的非常棒</p><p><img src="/img/pic/color01.png" alt="image-20210925102826706"></p></li></ol><h4 id="VPN-v2ray"><a href="#VPN-v2ray" class="headerlink" title="VPN(v2ray):"></a>VPN(v2ray):</h4><ul><li><p><a href="https://bilibili.steins-gate.network/user/">https://bilibili.steins-gate.network/user/</a></p><p>一个好用又便宜的vpn网站,你也可以白嫖,白嫖的后果就是进小黑屋.</p><p>接下来手把手我教你怎么用这个….</p><p>先是注册一个账号,然后点击登录进去</p></li></ul><ol><li><p>这是你登陆之后的页面:</p><p><img src="/img/pic/ray01.png" alt="image-20210925102826706"></p></li><li><p>然后下载软件</p><p><img src="/img/pic/ray02.png" alt="image-20211002104859885"></p></li><li><p>软件下载好之后 打开</p><p><img src="/img/pic/ray04.png" alt="image-20211002105230029"></p></li><li><p>点击订阅设置之后</p><p>在下载软件时 复制的链接 粘贴进去 </p><p>点击确定之后 ,再去点击更新订阅 (更新订阅 在订阅 按钮那里)</p><p><img src="/img/pic/ray05.png" alt="image-20211002105356716"></p></li><li><p>然后会出现像下面这个一样的节点,</p><p>对每个节点单击鼠标右边 设置为活动服务器 就可以用了</p><p><img src="/img/pic/ray06.png" alt="image-20211002110425750"></p></li><li><p>然后你的电脑右边的小图标 是不是又v2ray图标了 ,点击右键 将http代理设置为 全局模式就可以了 如果你不用了 就给他关闭就好了</p></li></ol><p>vpn虽好,但过渡去用,建议拿来学习用,比如用来进github官网…(●’◡’●)</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨国庆第一天出个“旅行终点站“,还没开始就结束了</title>
      <link href="/2021/10/01/%E6%97%85%E8%A1%8C%E7%BB%88%E7%82%B9%E7%AB%99/"/>
      <url>/2021/10/01/%E6%97%85%E8%A1%8C%E7%BB%88%E7%82%B9%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>给你一份旅游线路图，该线路图中的旅行线路用数组 paths 表示，其中 paths[i] = [cityAi, cityBi] 表示该线路将会从 cityAi 直接前往 cityBi 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。</p><p>题目数据保证线路图会形成一条不存在循环的线路，因此恰有一个旅行终点站。</p><p>示例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：paths = [[<span class="string">&quot;London&quot;</span>,<span class="string">&quot;New York&quot;</span>],[<span class="string">&quot;New York&quot;</span>,<span class="string">&quot;Lima&quot;</span>],[<span class="string">&quot;Lima&quot;</span>,<span class="string">&quot;Sao Paulo&quot;</span>]]</span><br><span class="line">输出：<span class="string">&quot;Sao Paulo&quot;</span> </span><br><span class="line">解释：从 <span class="string">&quot;London&quot;</span> 出发，最后抵达终点站 <span class="string">&quot;Sao Paulo&quot;</span> 。本次旅行的路线是 <span class="string">&quot;London&quot;</span> -&gt; <span class="string">&quot;New York&quot;</span> -&gt; <span class="string">&quot;Lima&quot;</span> -&gt; <span class="string">&quot;Sao Paulo&quot;</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：paths = [[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>],[<span class="string">&quot;D&quot;</span>,<span class="string">&quot;B&quot;</span>],[<span class="string">&quot;C&quot;</span>,<span class="string">&quot;A&quot;</span>]]</span><br><span class="line">输出：<span class="string">&quot;A&quot;</span></span><br><span class="line">解释：所有可能的线路是：</span><br><span class="line"><span class="string">&quot;D&quot;</span> -&gt; <span class="string">&quot;B&quot;</span> -&gt; <span class="string">&quot;C&quot;</span> -&gt; <span class="string">&quot;A&quot;</span>. </span><br><span class="line"><span class="string">&quot;B&quot;</span> -&gt; <span class="string">&quot;C&quot;</span> -&gt; <span class="string">&quot;A&quot;</span>. </span><br><span class="line"><span class="string">&quot;C&quot;</span> -&gt; <span class="string">&quot;A&quot;</span>. </span><br><span class="line"><span class="string">&quot;A&quot;</span>. </span><br><span class="line">显然，旅行终点站是 <span class="string">&quot;A&quot;</span> 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：paths = [[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;Z&quot;</span>]]</span><br><span class="line">输出：<span class="string">&quot;Z&quot;</span></span><br></pre></td></tr></table></figure><p>解题思路:</p><p>将每个数组的起点和终点站分开存储,然后拿终点站去起点站查询没有查询道德的就是最终的 终点站</p><p>好了 上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> destCity = <span class="function"><span class="keyword">function</span>(<span class="params">paths</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">in</span> paths)&#123;</span><br><span class="line">        <span class="comment">// 数组的起点和终点以键值对的形式分开存储</span></span><br><span class="line">         map.set(paths[i][<span class="number">0</span>],paths[i][<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [key,value] <span class="keyword">of</span> map)&#123;</span><br><span class="line">        <span class="comment">// 拿值去查找</span></span><br><span class="line">        <span class="keyword">if</span>(!map.has(value))&#123;</span><br><span class="line">            <span class="comment">// 返回找不到的那一个</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨递归和动态规划解“爬楼梯“算法</title>
      <link href="/2021/09/23/%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2021/09/23/%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p>示例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入： <span class="number">2</span></span><br><span class="line">输出： <span class="number">2</span></span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span>  <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span>  <span class="number">2</span> 阶</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入： <span class="number">3</span></span><br><span class="line">输出： <span class="number">3</span></span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>  <span class="number">1</span> 阶 + <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span>  <span class="number">1</span> 阶 + <span class="number">2</span> 阶</span><br><span class="line"><span class="number">3.</span>  <span class="number">2</span> 阶 + <span class="number">1</span> 阶</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解法：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>阶=&gt; （<span class="number">1</span>）不需要走 走法所以为<span class="number">1</span>种</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>阶=&gt; （<span class="number">1</span>）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>阶=&gt; （<span class="number">1</span>+<span class="number">1</span>）+（<span class="number">2</span>）<span class="number">0</span>阶+<span class="number">1</span>阶</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>阶 =&gt; （<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>） + （<span class="number">1</span>+<span class="number">2</span>）+（<span class="number">2</span>+<span class="number">1</span>）<span class="number">2</span>阶+<span class="number">1</span>阶</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>阶 =&gt; （<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>） + （<span class="number">1</span>+<span class="number">2</span>+<span class="number">1</span>）+（<span class="number">1</span>+<span class="number">1</span>+<span class="number">2</span>）+（<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>）+（<span class="number">2</span>+<span class="number">2</span>） <span class="number">3</span>阶+<span class="number">2</span>阶</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">总结：方法数 = f(n-<span class="number">1</span>)+f(n-<span class="number">2</span>)；</span><br></pre></td></tr></table></figure><p>下面是思路的递归图解：</p><p><img src="/img/pic/palouti.jpg" alt="share"></p><p>公式有了，可以直接用递归解决，就是数值过大的话，运行速率会很慢</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> climbStairs(n - <span class="number">2</span>) + climbStairs(n - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面用到了动态规划，大大解决了递归所带来的效率低下的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 台阶数小于2的 都只需要1种方法</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="comment">// 如果大于2 定义一个dp 将每次的方法记录下来 </span></span><br><span class="line">    <span class="keyword">const</span> dp = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 根据公式每次的值都是前面俩次台阶的方法和</span></span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出最后一位就可以了</span></span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨字符串介绍及其常见的pai用法</title>
      <link href="/2021/09/22/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/09/22/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>计算机产生之初，内部只能识别二进制数字，无法识别英文字母和符号。为了能让计算机识别字母、数字和符号，科学家们制定了一个对照表，字母、数字、符号跟二进制数字相对应，这样当人们输入字母的时候，计算机使用对应的二进制数字处理，这样就相当于计算机能识别字母、符号和数字了。这个对照表叫做ASCII，翻译成中文叫阿斯克码。</p><h3 id="阿斯克码"><a href="#阿斯克码" class="headerlink" title="阿斯克码"></a>阿斯克码</h3><p>阿斯克码计算机中用得最广泛的字符集及其编码，是由美国国家标准局(ANSI)制定的ASCII码（American Standard Code for Information Interchange，美国标准信息交换码）。所以对于英文字母和符号的支持是很全面的。</p><p>阿斯克码的具体内容如下：</p><h3 id="ASCII控制字符"><a href="#ASCII控制字符" class="headerlink" title="ASCII控制字符"></a>ASCII控制字符</h3><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>缩写</th><th>可以显示的表示法</th><th>名称/意义</th></tr></thead><tbody><tr><td>0000 0000</td><td>0</td><td>00</td><td>NUL</td><td>␀</td><td>空字符（Null）</td></tr><tr><td>0000 0001</td><td>1</td><td>01</td><td>SOH</td><td>␁</td><td>标题开始</td></tr><tr><td>0000 0010</td><td>2</td><td>02</td><td>STX</td><td>␂</td><td>本文开始</td></tr><tr><td>0000 0011</td><td>3</td><td>03</td><td>ETX</td><td>␃</td><td>本文结束</td></tr><tr><td>0000 0100</td><td>4</td><td>04</td><td>EOT</td><td>␄</td><td>传输结束</td></tr><tr><td>0000 0101</td><td>5</td><td>05</td><td>ENQ</td><td>␅</td><td>请求</td></tr><tr><td>0000 0110</td><td>6</td><td>06</td><td>ACK</td><td>␆</td><td>确认回应</td></tr><tr><td>0000 0111</td><td>7</td><td>07</td><td>BEL</td><td>␇</td><td>响铃</td></tr><tr><td>0000 1000</td><td>8</td><td>08</td><td>BS</td><td>␈</td><td>退格</td></tr><tr><td>0000 1001</td><td>9</td><td>09</td><td>HT</td><td>␉</td><td>水平定位符号</td></tr><tr><td>0000 1010</td><td>10</td><td>0A</td><td>LF</td><td>␊</td><td>换行键</td></tr><tr><td>0000 1011</td><td>11</td><td>0B</td><td>VT</td><td>␋</td><td>垂直定位符号</td></tr><tr><td>0000 1100</td><td>12</td><td>0C</td><td>FF</td><td>␌</td><td>换页键</td></tr><tr><td>0000 1101</td><td>13</td><td>0D</td><td>CR</td><td>␍</td><td>归位键</td></tr><tr><td>0000 1110</td><td>14</td><td>0E</td><td>SO</td><td>␎</td><td>取消变换（Shift out）</td></tr><tr><td>0000 1111</td><td>15</td><td>0F</td><td>SI</td><td>␏</td><td>启用变换（Shift in）</td></tr><tr><td>0001 0000</td><td>16</td><td>10</td><td>DLE</td><td>␐</td><td>跳出数据通讯</td></tr><tr><td>0001 0001</td><td>17</td><td>11</td><td>DC1</td><td>␑</td><td>设备控制一（XON 启用软件速度控制）</td></tr><tr><td>0001 0010</td><td>18</td><td>12</td><td>DC2</td><td>␒</td><td>设备控制二</td></tr><tr><td>0001 0011</td><td>19</td><td>13</td><td>DC3</td><td>␓</td><td>设备控制三（XOFF 停用软件速度控制）</td></tr><tr><td>0001 0100</td><td>20</td><td>14</td><td>DC4</td><td>␔</td><td>设备控制四</td></tr><tr><td>0001 0101</td><td>21</td><td>15</td><td>NAK</td><td>␕</td><td>确认失败回应</td></tr><tr><td>0001 0110</td><td>22</td><td>16</td><td>SYN</td><td>␖</td><td>同步用暂停</td></tr><tr><td>0001 0111</td><td>23</td><td>17</td><td>ETB</td><td>␗</td><td>区块传输结束</td></tr><tr><td>0001 1000</td><td>24</td><td>18</td><td>CAN</td><td>␘</td><td>取消</td></tr><tr><td>0001 1001</td><td>25</td><td>19</td><td>EM</td><td>␙</td><td>连接介质中断</td></tr><tr><td>0001 1010</td><td>26</td><td>1A</td><td>SUB</td><td>␚</td><td>替换</td></tr><tr><td>0001 1011</td><td>27</td><td>1B</td><td>ESC</td><td>␛</td><td>跳出</td></tr><tr><td>0001 1100</td><td>28</td><td>1C</td><td>FS</td><td>␜</td><td>文件分割符</td></tr><tr><td>0001 1101</td><td>29</td><td>1D</td><td>GS</td><td>␝</td><td>组群分隔符</td></tr><tr><td>0001 1110</td><td>30</td><td>1E</td><td>RS</td><td>␞</td><td>记录分隔符</td></tr><tr><td>0001 1111</td><td>31</td><td>1F</td><td>US</td><td>␟</td><td>单元分隔符</td></tr><tr><td>0111 1111</td><td>127</td><td>7F</td><td>DEL</td><td>␡</td><td>删除</td></tr></tbody></table><h3 id="ASCII可显示字符"><a href="#ASCII可显示字符" class="headerlink" title="ASCII可显示字符"></a>ASCII可显示字符</h3><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0010 0000</td><td>32</td><td>20</td><td>（空格）(␠)</td></tr><tr><td>0010 0001</td><td>33</td><td>21</td><td>!</td></tr><tr><td>0010 0010</td><td>34</td><td>22</td><td>“</td></tr><tr><td>0010 0011</td><td>35</td><td>23</td><td>#</td></tr><tr><td>0010 0100</td><td>36</td><td>24</td><td>$</td></tr><tr><td>0010 0101</td><td>37</td><td>25</td><td>%</td></tr><tr><td>0010 0110</td><td>38</td><td>26</td><td>&amp;</td></tr><tr><td>0010 0111</td><td>39</td><td>27</td><td>‘</td></tr><tr><td>0010 1000</td><td>40</td><td>28</td><td>(</td></tr><tr><td>0010 1001</td><td>41</td><td>29</td><td>)</td></tr><tr><td>0010 1010</td><td>42</td><td>2A</td><td>*</td></tr><tr><td>0010 1011</td><td>43</td><td>2B</td><td>+</td></tr><tr><td>0010 1100</td><td>44</td><td>2C</td><td>,</td></tr><tr><td>0010 1101</td><td>45</td><td>2D</td><td>-</td></tr><tr><td>0010 1110</td><td>46</td><td>2E</td><td>.</td></tr><tr><td>0010 1111</td><td>47</td><td>2F</td><td>/</td></tr><tr><td>0011 0000</td><td>48</td><td>30</td><td>0</td></tr><tr><td>0011 0001</td><td>49</td><td>31</td><td>1</td></tr><tr><td>0011 0010</td><td>50</td><td>32</td><td>2</td></tr><tr><td>0011 0011</td><td>51</td><td>33</td><td>3</td></tr><tr><td>0011 0100</td><td>52</td><td>34</td><td>4</td></tr><tr><td>0011 0101</td><td>53</td><td>35</td><td>5</td></tr><tr><td>0011 0110</td><td>54</td><td>36</td><td>6</td></tr><tr><td>0011 0111</td><td>55</td><td>37</td><td>7</td></tr><tr><td>0011 1000</td><td>56</td><td>38</td><td>8</td></tr><tr><td>0011 1001</td><td>57</td><td>39</td><td>9</td></tr><tr><td>0011 1010</td><td>58</td><td>3A</td><td>:</td></tr><tr><td>0011 1011</td><td>59</td><td>3B</td><td>;</td></tr><tr><td>0011 1100</td><td>60</td><td>3C</td><td>&lt;</td></tr><tr><td>0011 1101</td><td>61</td><td>3D</td><td>=</td></tr><tr><td>0011 1110</td><td>62</td><td>3E</td><td>&gt;</td></tr><tr><td>0011 1111</td><td>63</td><td>3F</td><td>?</td></tr></tbody></table><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0100 0000</td><td>64</td><td>40</td><td>@</td></tr><tr><td>0100 0001</td><td>65</td><td>41</td><td>A</td></tr><tr><td>0100 0010</td><td>66</td><td>42</td><td>B</td></tr><tr><td>0100 0011</td><td>67</td><td>43</td><td>C</td></tr><tr><td>0100 0100</td><td>68</td><td>44</td><td>D</td></tr><tr><td>0100 0101</td><td>69</td><td>45</td><td>E</td></tr><tr><td>0100 0110</td><td>70</td><td>46</td><td>F</td></tr><tr><td>0100 0111</td><td>71</td><td>47</td><td>G</td></tr><tr><td>0100 1000</td><td>72</td><td>48</td><td>H</td></tr><tr><td>0100 1001</td><td>73</td><td>49</td><td>I</td></tr><tr><td>0100 1010</td><td>74</td><td>4A</td><td>J</td></tr><tr><td>0100 1011</td><td>75</td><td>4B</td><td>K</td></tr><tr><td>0100 1100</td><td>76</td><td>4C</td><td>L</td></tr><tr><td>0100 1101</td><td>77</td><td>4D</td><td>M</td></tr><tr><td>0100 1110</td><td>78</td><td>4E</td><td>N</td></tr><tr><td>0100 1111</td><td>79</td><td>4F</td><td>O</td></tr><tr><td>0101 0000</td><td>80</td><td>50</td><td>P</td></tr><tr><td>0101 0001</td><td>81</td><td>51</td><td>Q</td></tr><tr><td>0101 0010</td><td>82</td><td>52</td><td>R</td></tr><tr><td>0101 0011</td><td>83</td><td>53</td><td>S</td></tr><tr><td>0101 0100</td><td>84</td><td>54</td><td>T</td></tr><tr><td>0101 0101</td><td>85</td><td>55</td><td>U</td></tr><tr><td>0101 0110</td><td>86</td><td>56</td><td>V</td></tr><tr><td>0101 0111</td><td>87</td><td>57</td><td>W</td></tr><tr><td>0101 1000</td><td>88</td><td>58</td><td>X</td></tr><tr><td>0101 1001</td><td>89</td><td>59</td><td>Y</td></tr><tr><td>0101 1010</td><td>90</td><td>5A</td><td>Z</td></tr><tr><td>0101 1011</td><td>91</td><td>5B</td><td>[</td></tr><tr><td>0101 1100</td><td>92</td><td>5C</td><td>\</td></tr><tr><td>0101 1101</td><td>93</td><td>5D</td><td>]</td></tr><tr><td>0101 1110</td><td>94</td><td>5E</td><td>^</td></tr><tr><td>0101 1111</td><td>95</td><td>5F</td><td>_</td></tr></tbody></table><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0110 0000</td><td>96</td><td>60</td><td>`</td></tr><tr><td>0110 0001</td><td>97</td><td>61</td><td>a</td></tr><tr><td>0110 0010</td><td>98</td><td>62</td><td>b</td></tr><tr><td>0110 0011</td><td>99</td><td>63</td><td>c</td></tr><tr><td>0110 0100</td><td>100</td><td>64</td><td>d</td></tr><tr><td>0110 0101</td><td>101</td><td>65</td><td>e</td></tr><tr><td>0110 0110</td><td>102</td><td>66</td><td>f</td></tr><tr><td>0110 0111</td><td>103</td><td>67</td><td>g</td></tr><tr><td>0110 1000</td><td>104</td><td>68</td><td>h</td></tr><tr><td>0110 1001</td><td>105</td><td>69</td><td>i</td></tr><tr><td>0110 1010</td><td>106</td><td>6A</td><td>j</td></tr><tr><td>0110 1011</td><td>107</td><td>6B</td><td>k</td></tr><tr><td>0110 1100</td><td>108</td><td>6C</td><td>l</td></tr><tr><td>0110 1101</td><td>109</td><td>6D</td><td>m</td></tr><tr><td>0110 1110</td><td>110</td><td>6E</td><td>n</td></tr><tr><td>0110 1111</td><td>111</td><td>6F</td><td>o</td></tr><tr><td>0111 0000</td><td>112</td><td>70</td><td>p</td></tr><tr><td>0111 0001</td><td>113</td><td>71</td><td>q</td></tr><tr><td>0111 0010</td><td>114</td><td>72</td><td>r</td></tr><tr><td>0111 0011</td><td>115</td><td>73</td><td>s</td></tr><tr><td>0111 0100</td><td>116</td><td>74</td><td>t</td></tr><tr><td>0111 0101</td><td>117</td><td>75</td><td>u</td></tr><tr><td>0111 0110</td><td>118</td><td>76</td><td>v</td></tr><tr><td>0111 0111</td><td>119</td><td>77</td><td>w</td></tr><tr><td>0111 1000</td><td>120</td><td>78</td><td>x</td></tr><tr><td>0111 1001</td><td>121</td><td>79</td><td>y</td></tr><tr><td>0111 1010</td><td>122</td><td>7A</td><td>z</td></tr><tr><td>0111 1011</td><td>123</td><td>7B</td><td>{</td></tr><tr><td>0111 1100</td><td>124</td><td>7C</td><td>|</td></tr><tr><td>0111 1101</td><td>125</td><td>7D</td><td>}</td></tr><tr><td>0111 1110</td><td>126</td><td>7E</td><td>~</td></tr></tbody></table><p>为什么要学习阿斯克码？</p><p>因为两个字符串也是可以比较大小的，比较的规则是逐字符进行比较，字符的大小由字符对应的阿斯克码决定。</p><h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><p>我们曾经碰到过一个问题，接收到文本框的两个值，一个是”3”，另一个是”10”，这两个值进行大小比较的时候，结果是：<code>&quot;3&quot;&gt;&quot;10&quot; === true</code>，出现这个结果的原因是，两个字符串进行比较的时候，是逐字符进行比较，也就是字符”3”先和字符”1”进行比较，如果第一个字符相等再进行第二个字符的比较。</p><p>从阿斯克码表中，可以找到字符”3”和字符”1”相对应的值，很明显，字符”3”是要大于字符”1”的。</p><p>通过阿斯克码表，我们可以得出一些字符串比较的规律：</p><ol><li>字母比数字大</li><li>小写字母比大写字母大</li><li>字母越靠后越大</li></ol><p><font color="blue">思考：如何比较两个中文汉字字符的大小？</font></p><p>阿斯克码总共128个，包含符号、大小写英文字母、数字。阿斯克码是由美国人创建的，所以对于英文的支持非常好。后来随着计算机的普及，各个国家在使用计算机的时候，没办法使用本国文字，这样用起来非常困难。所以众多国家的科学家一起制定了一个更大的对照表，包含各个国家的文字符号，所以称之为万国码，也叫作unicode。</p><p>其实unicode就是更大的阿斯克码。</p><h3 id="字符串的基本操作"><a href="#字符串的基本操作" class="headerlink" title="字符串的基本操作"></a>字符串的基本操作</h3><p><font color="red">字符串也可以通过下标获取字符</font></p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出下标为1的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">1</span>]); <span class="comment">// 好</span></span><br></pre></td></tr></table></figure><p>每个字符都有对应的下标，所以，字符串也可以进行遍历。</p><p><font color="red">字符串是只读数据类型，不能添加新字符，不能修改字符串中的字符，不能删除某个字符</font></p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 修改下标为1的字符</span></span><br><span class="line">str[<span class="number">1</span>] = <span class="string">&quot;帅&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 你好吗</span></span><br></pre></td></tr></table></figure><h3 id="字符串常见API"><a href="#字符串常见API" class="headerlink" title="字符串常见API"></a>字符串常见API</h3><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p>求字符串中字符的个数 - 字符串的长度</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.length</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;asdfvczx&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出字符串的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><h4 id="charAt方法"><a href="#charAt方法" class="headerlink" title="charAt方法"></a>charAt方法</h4><p>根据指定的下标获取对应的字符</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.charAt(下标)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdef&#x27;</span>;</span><br><span class="line"><span class="comment">// 获取下标为3的字符</span></span><br><span class="line"><span class="keyword">var</span> res = str.charAt(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// d</span></span><br></pre></td></tr></table></figure><p>使用说明：如果下标存在就返回对应的字符，如果下标不存在就返回空字符串</p><h4 id="charCodeAt方法"><a href="#charCodeAt方法" class="headerlink" title="charCodeAt方法"></a>charCodeAt方法</h4><p>根据指定下标获取对应的字符的阿斯克码</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.charCodeAt(下标);</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdef&#x27;</span>;</span><br><span class="line"><span class="comment">// 获取下标为3的字符的阿斯克码</span></span><br><span class="line"><span class="keyword">var</span> res = str.charCodeAt(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 97</span></span><br></pre></td></tr></table></figure><h4 id="String-fromCharCode方法"><a href="#String-fromCharCode方法" class="headerlink" title="String.fromCharCode方法"></a>String.fromCharCode方法</h4><p>根据指定的阿斯克码得到对应的字符</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(阿斯克码)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取98对应的字符</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">String</span>.fromCharCode(<span class="number">98</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// b</span></span><br></pre></td></tr></table></figure><h4 id="indexOf方法"><a href="#indexOf方法" class="headerlink" title="indexOf方法"></a>indexOf方法</h4><p>查找字符或子字符串在大字符串中第一次出现的位置</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大字符串.indexOf(字符/子字符串[,开始查找的下标])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;i love you&#x27;</span>;</span><br><span class="line"><span class="comment">// 找到o字符在str中第一次出现的位置</span></span><br><span class="line"><span class="keyword">var</span> res = str.indexOf(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>使用说明：</p><ol><li>如果找到这个字符在字符串中的位置，就返回这个字符对应的下标，如果找不到，就返回-1</li><li>第二个参数可选项。表示从哪个下标开始查找</li></ol><h4 id="lastIndexOf方法"><a href="#lastIndexOf方法" class="headerlink" title="lastIndexOf方法"></a>lastIndexOf方法</h4><p>查找字符或子字符串在大字符串中最后一次出现的位置</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大字符串.lastIndexOf(字符/子字符串[,开始查找的下标])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;i love you&#x27;</span>;</span><br><span class="line"><span class="comment">// 找到o字符在str中最后一次出现的位置</span></span><br><span class="line"><span class="keyword">var</span> res = str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>使用说明：</p><ol><li>如果找到这个字符在字符串中的位置，就返回这个字符对应的下标，如果找不到，就返回-1</li><li>第二个参数可选项。表示从哪个下标开始查找</li></ol><h4 id="substr方法"><a href="#substr方法" class="headerlink" title="substr方法"></a>substr方法</h4><p>截取字符串</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.substr(开始下标[,截取长度])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 从下标2开始截取2个字符</span></span><br><span class="line"><span class="keyword">var</span> res = str.substr(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发</span></span><br></pre></td></tr></table></figure><p>使用说明：</p><ol><li>第二个参数是可选项。如果省略掉第二个参数，默认截取到字符串末尾。</li><li>开始下标可以使用负数表示，从右往左的下标依次是-1，-2，。。。</li><li>截取字符的时候都是从左向右截取的</li></ol><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 从下表2开始截取</span></span><br><span class="line"><span class="keyword">var</span> res = str.substr(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发还好吗</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标-5开始截取2个字符</span></span><br><span class="line"><span class="keyword">var</span> res = str.substr(-<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标-1开始截取2个字符</span></span><br><span class="line"><span class="keyword">var</span> res = str.substr(-<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);<span class="comment">// 吗</span></span><br></pre></td></tr></table></figure><p>使用说明：截取到最后也不满足长度的时候，就返回能截取到的所有字符</p><h4 id="substring方法"><a href="#substring方法" class="headerlink" title="substring方法"></a>substring方法</h4><p>截取字符串</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.substring(开始下标[，结束下标])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 从下标2开始截取到下标4</span></span><br><span class="line"><span class="keyword">var</span> res = str.substr(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发</span></span><br></pre></td></tr></table></figure><p>使用说明：</p><ol><li>第二个参数是可选项。如果省略掉第二个参数的话，默认截取到字符串末尾。</li><li>截取的结果包含开始下标对应的字符，不包含结束下标对应的字符</li><li>如果开始下标和结束下标相等，则返回空字符串；如果开始下标大于结束下标，则先交换两个参数，然后再截取；如果开始下标或结束下标为负数，则先将负数替换成0，然后再截取</li></ol><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 从下标2开始截取</span></span><br><span class="line"><span class="keyword">var</span> res = str.substring(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发还好吗</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标2截取到下标-2</span></span><br><span class="line"><span class="keyword">var</span> res = str.substring(<span class="number">2</span>,-<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 你的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">过程分析：</span></span><br><span class="line"><span class="comment">首先开始下标大于结束下标，所以先交换两个参数，相当于： str.substring(-2,2);</span></span><br><span class="line"><span class="comment">开始下标为负数，所以替换成0，相当于： str.substring(0,2);</span></span><br><span class="line"><span class="comment">所以结果为：你的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="slice方法"><a href="#slice方法" class="headerlink" title="slice方法"></a>slice方法</h4><p>截取字符串</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.slice(开始下标[，结束下标]);</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 从下标2截取到下标4</span></span><br><span class="line"><span class="keyword">var</span> res = str.slice(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发</span></span><br></pre></td></tr></table></figure><p>使用说明：</p><ol><li>第二个参数是可选项。如果省略第二个参数默认截取到字符串的末尾</li><li>返回的结果包含开始下标对应的字符，不包含结束下标对应的字符</li><li>截取的时候，下标可以使用负数表示</li><li>开始下标对应的字符一定要在结束下标对应的字符左边，否则返回空字符串。因为截取的顺序是从左向右的</li></ol><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 从下标2开始截取</span></span><br><span class="line"><span class="keyword">var</span> res = str.slice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发还好吗</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标-5开始截取到下标4</span></span><br><span class="line"><span class="keyword">var</span> res = str.slice(-<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 头发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标-1截取到下标-3</span></span><br><span class="line"><span class="keyword">var</span> res = str.slice(-<span class="number">1</span>,-<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 空</span></span><br></pre></td></tr></table></figure><h4 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h4><p>使用指定的分隔符将字符串分割成多部分组成数组</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split([分隔符，[最后数组中要保留的个数]])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;open_door_now&#x27;</span>;</span><br><span class="line"><span class="comment">// 以下划线为分隔符，分割字符串为数组</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&quot;open&quot;, &quot;door&quot;, &quot;now&quot;]</span></span><br></pre></td></tr></table></figure><p>使用说明：</p><ol><li>分隔符是可选项。如果省略了分隔符，则将整个字符串当做数组的元素，如果是空字符串，则会在每个字符中间进行分割</li><li>要保留的个数是可选项。如果省略了个数，则返回全部的个数，如果加上个数，则是设置了数组中元素的个数。</li></ol><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;open_door_now&#x27;</span>;</span><br><span class="line"><span class="comment">// 省略分隔符将字符串分割为数组</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&quot;open_door_now&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以空字符串进行分割字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&quot;o&quot;, &quot;p&quot;, &quot;e&quot;, &quot;n&quot;, &quot;_&quot;, &quot;d&quot;, &quot;o&quot;, &quot;o&quot;, &quot;r&quot;, &quot;_&quot;, &quot;n&quot;, &quot;o&quot;, &quot;w&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以空字符串分割字符串，并在数组中保留4个元素</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&quot;&quot;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&quot;o&quot;, &quot;p&quot;, &quot;e&quot;, &quot;n&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h4><p>使用新的字符或子字符串替换原来在字符串中的一部分</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(将要被替换的部分,要替换进来的新内容);</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用&quot;眉毛&quot;将&quot;头发&quot;替换掉</span></span><br><span class="line"><span class="keyword">var</span> res = str.replace(<span class="string">&quot;头发&quot;</span>,<span class="string">&quot;眉毛&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 你的眉毛还好吗</span></span><br></pre></td></tr></table></figure><p>使用说明：如果第一个参数是空字符串，则会将新内容拼接到原字符串前面</p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你的头发还好吗&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用&quot;眉毛&quot;将&quot;&quot;替换掉</span></span><br><span class="line"><span class="keyword">var</span> res = str.replace(<span class="string">&quot;&quot;</span>,<span class="string">&quot;眉毛&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 眉毛你的头发还好吗</span></span><br></pre></td></tr></table></figure><h4 id="trim方法"><a href="#trim方法" class="headerlink" title="trim方法"></a>trim方法</h4><p>去除字符串左右两边的空白</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.trim();</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;    ab c  &#x27;</span>;</span><br><span class="line"><span class="comment">// 取出str左右两边的空白</span></span><br><span class="line"><span class="keyword">var</span> res = str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// &#x27;ab c&#x27;</span></span><br></pre></td></tr></table></figure><p>使用说明：</p><ol><li>去除的是左右两边的空白，不会去除字符串中间的空白</li><li>只去除左边的空白使用：<code>trimLeft</code>方法；只去除右边的空白使用：<code>trimRight</code>方法</li></ol><h4 id="大小写转换方法"><a href="#大小写转换方法" class="headerlink" title="大小写转换方法"></a>大小写转换方法</h4><p>将字符串中所有小写字母转为大写字母，使用：<code>toUpperCase</code>方法</p><p>将字符串中所有小写字母转为大写字母，使用：<code>toLowerCase</code>方法</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串.toUpperCase(); # 转为大写</span><br><span class="line">字符串.toLowerCase(); # 转为小写</span><br></pre></td></tr></table></figure><h3 id="字符串案例"><a href="#字符串案例" class="headerlink" title="字符串案例"></a>字符串案例</h3><p>对象数组模糊查找 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=[</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1001</span>,<span class="attr">icon</span>:<span class="string">&quot;img/1.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;计算机&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1002</span>,<span class="attr">icon</span>:<span class="string">&quot;img/2.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;手机&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1003</span>,<span class="attr">icon</span>:<span class="string">&quot;img/3.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;电脑&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">30</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1004</span>,<span class="attr">icon</span>:<span class="string">&quot;img/4.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;显示器&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1005</span>,<span class="attr">icon</span>:<span class="string">&quot;img/5.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;飞行器&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1006</span>,<span class="attr">icon</span>:<span class="string">&quot;img/6.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;计时器&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">60</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1007</span>,<span class="attr">icon</span>:<span class="string">&quot;img/7.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;笔记本&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">70</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1008</span>,<span class="attr">icon</span>:<span class="string">&quot;img/8.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;草稿本&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">80</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1009</span>,<span class="attr">icon</span>:<span class="string">&quot;img/9.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;公示牌&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">90</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1010</span>,<span class="attr">icon</span>:<span class="string">&quot;img/10.png&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;手机线&quot;</span>,<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">100</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchStr</span>(<span class="params">search</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data.filter(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.name.indexOf(search)&gt;-<span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到字符串中 ‘’ 某个字出现过几次 第几位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(str.indexOf(s,i) != -<span class="number">1</span>)&#123;</span><br><span class="line">    alert(str.indexOf(s,i))</span><br><span class="line">    i = str.indexOf(s,i)+s.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨杨辉三角</title>
      <link href="/2021/09/20/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>/2021/09/20/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<p>给定一个非负整数 numRows，生成「杨辉三角」的前 numRows 行。<br>在「杨辉三角」中，每个数是它左上方和右上方的数的和。<br><img src="/img/pic/jiao.gif" alt="在这里插入图片描述"></p><p>示例 1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: numRows = <span class="number">5</span></span><br><span class="line">输出: [[<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: numRows = <span class="number">1</span></span><br><span class="line">输出: [[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">i=<span class="number">0</span> 下标 从<span class="number">0</span>开始</span><br><span class="line">[</span><br><span class="line">[<span class="number">1</span>] =&gt; arr[i]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>] =&gt;arr[i+<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] =&gt; arr[i+<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>] =&gt; arr[i+<span class="number">3</span>]</span><br><span class="line">]</span><br><span class="line"><span class="number">1.</span>从第三个开始，中间的数字 都是前一个数组里的前一个数字和后一个数组的和</span><br><span class="line"><span class="number">2.</span>写的时候前俩个数组 可以直接给写死</span><br><span class="line"><span class="number">3.</span>从第三个开始 [<span class="number">1</span>,arr[i+<span class="number">1</span>][<span class="number">0</span>]+arr[i+<span class="number">1</span>][<span class="number">1</span>],<span class="number">1</span>] 以此类推...</span><br></pre></td></tr></table></figure><p>开始写代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span> (<span class="params">numRows</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 给定一个数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">        <span class="comment">// 前俩个可以给死</span></span><br><span class="line">        i === <span class="number">0</span> &amp;&amp; arr.push([<span class="number">1</span>]);</span><br><span class="line">        i === <span class="number">1</span> &amp;&amp; arr.push([<span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 如果给定的数大于1</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 在之前push一个[1]   ===&gt; [[1],[1,1],[1]]</span></span><br><span class="line">            arr.push([<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 中间则是前一个数组里面的前一个值和后一个值相加</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr[i - <span class="number">1</span>].length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                arr[i].push(arr[i - <span class="number">1</span>][j] + arr[i - <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在结尾push个1</span></span><br><span class="line">            arr[i].push(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>感谢你的观看,如果可以 这是我的csdn博客链接: <a href="https://blog.csdn.net/Eternalyii">https://blog.csdn.net/Eternalyii</a> 我会在上面更新我的最新文章,感谢你的到来</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
