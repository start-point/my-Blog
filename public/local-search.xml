<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>实现 pow(x, n)</title>
    <link href="/2021/09/20/%E5%AE%9E%E7%8E%B0Math.pow/"/>
    <url>/2021/09/20/%E5%AE%9E%E7%8E%B0Math.pow/</url>
    
    <content type="html"><![CDATA[<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。</p><p>示例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">输入：x = <span class="hljs-number">2.00000</span>, n = <span class="hljs-number">10</span><br>输出：<span class="hljs-number">1024.00000</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">输入：x = <span class="hljs-number">2.10000</span>, n = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">9.26100</span><br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">输入：x = <span class="hljs-number">2.00000</span>, n = -<span class="hljs-number">2</span><br>输出：<span class="hljs-number">0.25000</span><br>解释：<span class="hljs-number">2</span>-<span class="hljs-number">2</span> = <span class="hljs-number">1</span>/<span class="hljs-number">22</span> = <span class="hljs-number">1</span>/<span class="hljs-number">4</span> = <span class="hljs-number">0.25</span><br></code></pre></td></tr></table></figure><p>用的一个递归方式分为四种情况 等于0 小于0 奇次幂和偶次幂</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myPow = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, n</span>) </span>&#123;<br>    <span class="hljs-comment">// 当n为0次幂时 直接返回0</span><br>    <span class="hljs-keyword">if</span> (n === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <br>    <span class="hljs-comment">// 当n&lt;0时候 x的n次方 1/x 的 -n 次方 </span><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / myPow(x, -n)<br>    &#125;<br>    <span class="hljs-comment">// 当n为奇次幂时 x的n次方就等于 x*x的n-1次方</span><br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span>) &#123;    <br>        <span class="hljs-keyword">return</span> x * myPow(x, n - <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-comment">// 当n为偶次幂时 就等于x*x的n/2次方 </span><br>    <span class="hljs-keyword">return</span> myPow(x * x, n / <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>当然你要是觉得这么写很麻烦你也可以这么写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myPow = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(x,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以这么写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myPow = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x ** n;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>俩数相加和回文数 算法解法</title>
    <link href="/2021/09/20/%E4%BF%A9%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <url>/2021/09/20/%E4%BF%A9%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h5 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h5><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p><p>示例 1：</p><p>输入：x = 121<br>输出：true<br>示例 2：</p><p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3：</p><p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。<br>示例 4：</p><p>输入：x = -101<br>输出：false</p><p>这是一个将他变成字符串操作的一个解法,也比较简单一行代码就没了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> isPalindrome = <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (x || x === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">&#x27;&#x27;</span>) - <span class="hljs-number">0</span> === x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面这是没有通过去操作字符串的一个解法,但是消耗的内存也比上一个多了一点/(ㄒoㄒ)/~~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> isPalindrome = <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> num = x;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x % <span class="hljs-number">10</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (x) &#123;<br>        y = <span class="hljs-built_in">parseInt</span>(y * <span class="hljs-number">10</span> + <span class="hljs-built_in">parseInt</span>(x % <span class="hljs-number">10</span>));<br>        x = <span class="hljs-built_in">parseInt</span>(x / <span class="hljs-number">10</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(y === num)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好在这俩种解法都是没问题的(●’◡’●)</p><h5 id="俩数相加"><a href="#俩数相加" class="headerlink" title="俩数相加"></a>俩数相加</h5><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br>示例 2：</p><p>输入：l1 = [0], l2 = [0]<br>输出：[0]<br>示例 3：</p><p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> addTwoNumbers = <span class="hljs-function">(<span class="hljs-params">l1, l2</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> arr = [];<br>    <span class="hljs-keyword">if</span> (l1 !== <span class="hljs-literal">null</span> || l2 !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">const</span> l1Num = l1 !== <span class="hljs-literal">null</span> ? l1.reverse().join().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">&#x27;&#x27;</span>) - <span class="hljs-number">0</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">const</span> l2Num = l2 !== <span class="hljs-literal">null</span> ? l2.reverse().join().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">&#x27;&#x27;</span>) - <span class="hljs-number">0</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">const</span> num = (l1Num + l2Num).toString().split(<span class="hljs-string">&#x27;&#x27;</span>).reverse();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">in</span> num) &#123;<br>            arr.push(num[v] - <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react hook的基本使用</title>
    <link href="/2021/09/20/react-hook/"/>
    <url>/2021/09/20/react-hook/</url>
    
    <content type="html"><![CDATA[<h4 id="1-useState"><a href="#1-useState" class="headerlink" title="1.useState"></a>1.useState</h4><p>useState可以让函数组件拥有自己的一个状态,和class组件一样去控制组件内部数据的一个状态</p><p>下面是一个用按钮通过useState设置初始状态,根据点击事件来改变这个状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React,&#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <br>    <span class="hljs-keyword">const</span> [state, setstate] = useState(&#123;<br>        <span class="hljs-attr">num</span>:<span class="hljs-number">0</span>,<br>    &#125;)    <br><br>    <span class="hljs-keyword">const</span> AddClickAction = <span class="hljs-function">()=&gt;</span>&#123;<br>        setstate(&#123;<br>            <span class="hljs-attr">num</span>:state.num+<span class="hljs-number">1</span><br>        &#125;)<br>        <span class="hljs-built_in">console</span>.log(state);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">        //点击的时候增加</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state.num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-useRef"><a href="#2-useRef" class="headerlink" title="2.useRef"></a>2.useRef</h4><ol><li>可以用来获取节点dom(节点标签)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React,&#123;useRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> ref = useRef()<br><br>    <span class="hljs-comment">// 获取到button按钮的节点</span><br>    <span class="hljs-keyword">const</span> getNode = <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(ref.current);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;getNode&#125;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>useRef的current属性是对原来的一个引用,可以用它来做判断,current属性值发生改变的时候他不会去重新走render,这个下面的useEffect模拟生命周期会有写到</li></ol><h4 id="3-useEffect"><a href="#3-useEffect" class="headerlink" title="3.useEffect"></a>3.useEffect</h4><ul><li>useEffect有俩个参数:</li></ul><ol><li>第一个参数是一个函数,里面可以去写一些数据操作或业务逻辑一些</li><li>第二个参数是对上一个函数的依赖,[] 空依赖则只有页面第一次加载的时候才会去执行,[有依赖的参数] 如果依赖函数中操作的某个数据,当依赖的数据发生改变的时候会去执行useEffect里面被依赖的代码,如果不写第二个参数,当页面重新走render会执行函数内部的所有代码</li></ol><p>下面是对空依赖和不写依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React,&#123;useEffect,useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> [state, setstate] = useState(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 我只会执行一次</span><br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(state,<span class="hljs-string">&quot;执行一次&quot;</span>); <span class="hljs-comment">//state 0</span><br>    &#125;, [])<br><br>    <span class="hljs-comment">// 页面加载执行一次,当每次点击改变state数据的时候会继续执行</span><br>    <span class="hljs-comment">// 如果第二个参数不写的话函数内部执行的逻辑都会执行</span><br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(state,<span class="hljs-string">&quot;改变state就会执行一次&quot;</span>);<br>    &#125;, [state])<br><br>    <span class="hljs-keyword">const</span> AddClickAction = <span class="hljs-function">()=&gt;</span>&#123;<br>        setstate(state+<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>useEffect可以模拟类组件的一个生命周期</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React,&#123;useEffect,useState,useRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> [state, setstate] = useState(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">const</span> ref = useRef(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 页面加载时执行...  componentDidMount</span><br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;页面结构已经创建完成.....&quot;</span>);<br>    &#125;, [])<br><br>    <span class="hljs-comment">// 状态改变或者时走render的时候,组件重新加载会执行... componentDidUpDate</span><br>    <span class="hljs-comment">// useEffect(() =&gt; &#123;</span><br>    <span class="hljs-comment">//     console.log(&quot;state改变...&quot;);   </span><br>    <span class="hljs-comment">// &#125;)</span><br>    <span class="hljs-comment">// 但是你会发现在页面加载的时候会执行componentDidMount和componentDidUpDate,这并不是我们所期望的.</span><br>    <span class="hljs-comment">// 通过useRef来达到componentDidUpDate的一个效果</span><br>    <span class="hljs-comment">// 通过判断ref的current的值 你会发现页面加载的时候不回去执行下面这个useEffect 只有当数据发生改变或者        重走render的时候才回去执行</span><br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(ref.current)&#123;<br>            ref.current = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;state改变...&quot;</span>);   <br>    &#125;)<br><br>    <span class="hljs-comment">// useEffect内部return的函数 只有当组件销毁的时候才会去执行... componentWillUnmount</span><br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;销毁....&quot;</span>);<br>        &#125;<br>    &#125;,[])<br><br>    <span class="hljs-keyword">const</span> AddClickAction = <span class="hljs-function">()=&gt;</span>&#123;<br>        setstate(state+<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;AddClickAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-useCallback"><a href="#4-useCallback" class="headerlink" title="4.useCallback"></a>4.useCallback</h4><p>可以提高react的一个优化,也可以减少事件的创建,同时可以缓存函数</p><ol><li>没有用useCallback,下面这个每次点击改变state的时候都会走render,同时点击事件也会被重新创建,每次点击都会去打印 增加后的state数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React,&#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> [state, setstate] = useState(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;</span><br><span class="xml">                setstate(state+2)</span><br><span class="xml">                console.log(state);</span><br><span class="xml">            &#125;&#125;&gt;点我:&#123;state&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>用useCallback,addAction事件被useCallback缓存了下来,每次点击的时候打印的都是一开始的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React,&#123;useCallback, useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> [state, setstate] = useState(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">const</span> addAction = useCallback(<span class="hljs-function">()=&gt;</span>&#123;<br>        setstate(state+<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">console</span>.log(state);<br>    &#125;,[])<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-useMemo"><a href="#5-useMemo" class="headerlink" title="5.useMemo"></a>5.useMemo</h4><p>对一个值进行一个缓存</p><p>在计算或者是对数据进行操作的时候,不会因为组件的更新或者是整个组件的重新渲染再去计算或者是操作这个数据,用useMemo会在依赖的数据发生变化的时候就会去计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> [state, setstate] = useState(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">const</span> fnc =useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>        setstate(state+<span class="hljs-number">1</span>)<br>    &#125;,[state]) <br><br>    <span class="hljs-comment">// 当fnc函数内部的数据发生变化会去计算state的数据</span><br>    <span class="hljs-keyword">const</span> addAction = useMemo(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span>  fnc;<br>    &#125;,[fnc])<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-memo"><a href="#6-memo" class="headerlink" title="6.memo"></a>6.memo</h4><p>memo相当于shouldComponentUpdate和PureComponent对性能的优化,</p><p>他是减少没必要的组件渲染</p><p>下面代码 每次点击修改state数据的时候都会重新渲染重新走one子组件,但是子组件内部没有数据要修改,这样每次渲染都会去执行one组件,这种没必要的渲染需要避免,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">#App 父组件<br><span class="hljs-keyword">import</span> React,&#123; useState,useMemo,useCallback&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> One <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./One&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">const</span> [state, setstate] = useState(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">const</span> fnc =useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>        setstate(state+<span class="hljs-number">1</span>)<br>    &#125;,[state]) <br><br>    <span class="hljs-keyword">const</span> addAction = useMemo(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span>  fnc;<br>    &#125;,[fnc])<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addAction&#125;</span>&gt;</span>点我:&#123;state&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">// one组件</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">One</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br></code></pre></td></tr></table></figure><p>打印的结果</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20210801224311088.png" alt="image-20210801224311088"></p><p>在子组件内部用memo 包裹函数,这样父组件渲染,子组件不会去执行,只有当子组件内部修改了数据才会去执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">#one 子组件<br><span class="hljs-keyword">import</span> React,&#123;memo&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 用memo 减少无用组件的渲染</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> memo(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">One</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是one组件...&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            我是one组件</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;) <br></code></pre></td></tr></table></figure><p>小总结: 我对hook的理解也只是在这简单的使用层面上,以后也会去更深入的去学习,去使用,可能也会有些没有说到的,没有去使用到的,告诉我一下,我也去多学习学习!!!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git push 出现的问题</title>
    <link href="/2021/09/20/git%20push%20%E9%97%AE%E9%A2%98/"/>
    <url>/2021/09/20/git%20push%20%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>每次登录账号密码都会推送失败,会出现同下这个问题,<br><img src="https://img-blog.csdnimg.cn/3b0b6c9b72194ab595b1d56ad185e5e4.png#pic_left" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs git">Logon failed, use ctrl+c to cancel basic credential prompt.<br>Username for &#x27;https://github.com&#x27;: echo_c120@163.com<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.<br>fatal: unable to access &#x27;https://github.com/start-point/webpack.git/&#x27;: The requested URL returned error: 403<br>//登录失败，使用 ctrl+c 取消基本凭据提示。<br>//“https://github.com”的用户名：echo_c120@163.com<br>//远程：2021 年 8 月 13 日移除了对密码身份验证的支持。请改用个人访问令牌。<br>//远程：请参阅 https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ 了解更多信息。<br>//致命：无法访问“https://github.com/start-point/webpack.git/”：请求的 URL 返回错误：403<br></code></pre></td></tr></table></figure><p>该问题是需要你升级git 去github设置一个个人访问令牌,</p><p>解决办法,先去<a href="https://gitforwindows.org/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84git">https://gitforwindows.org/官网下载最新版的git</a></p><p>接着进去自己的github官网</p><p>点击Settings</p><p>点击Developer settings</p><p>再去点击Personal access tokens</p><p>点击新建一个token</p><p>然后保存记住会生成一个token 记住它</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>generator的简单用法</title>
    <link href="/2021/09/20/generator/"/>
    <url>/2021/09/20/generator/</url>
    
    <content type="html"><![CDATA[<h4 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h4><p>介绍 =&gt; es6中新增的数据类型generator函数 需要在函数申明的时候在函数名字和function之间加上*号,yield可以去暂停函数的执行,可以执行多次.</p><p>1.generator基本用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> *<span class="hljs-title">generator</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">yield</span>; <span class="hljs-comment">// 执行碰到yield 会去执行暂停</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">yield</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">const</span> str = generator();<br><span class="hljs-built_in">console</span>.log(str.next())<br><br><span class="hljs-comment">// 打印结果:</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// &#123;value: undefined, done: false&#125;</span><br><span class="hljs-comment">// value的值是yield后面所赋的值 done是一个布尔值代表的是有没有执行完</span><br></code></pre></td></tr></table></figure><p>2.next()里面也可以传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> *<span class="hljs-title">generator</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> a1 = <span class="hljs-keyword">yield</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">console</span>.log(a1);<br>    <span class="hljs-keyword">yield</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">const</span> str = generator();<br><span class="hljs-built_in">console</span>.log(str.next(<span class="hljs-number">111</span>)) <span class="hljs-comment">//第一次的传参111 是没有意义的,函数里也拿不到结果</span><br><span class="hljs-built_in">console</span>.log(str.next(<span class="hljs-number">222</span>)) <span class="hljs-comment">//第二次传参的结果才会在第一次yield结束后拿到</span><br><span class="hljs-comment">//执行结果:</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//&#123;value: 5, done: false&#125; //value为5 因为yield 后面赋值了为5</span><br><span class="hljs-comment">//222</span><br><span class="hljs-comment">//&#123;value: undefined, done: false&#125;</span><br></code></pre></td></tr></table></figure><p>3.generator的迭代器委托</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> *<span class="hljs-title">generatorArry</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arry = [<span class="hljs-string">&#x27;这&#x27;</span>,<span class="hljs-string">&#x27;个&#x27;</span>,<span class="hljs-string">&#x27;世&#x27;</span>,<span class="hljs-string">&#x27;你&#x27;</span>,<span class="hljs-string">&#x27;好&#x27;</span>];<br>    <span class="hljs-keyword">var</span> idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(idx &lt; arry.length) <span class="hljs-keyword">yield</span> arry[idx++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> *<span class="hljs-title">Iterator</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;我是被第一次执行...&quot;</span>;<br>    <span class="hljs-comment">// 这里可以暂停去执行generatorArry这个函数,当执行完了 done会为true 表示执行完毕</span><br>    <span class="hljs-keyword">yield</span> *generatorArry();<br>&#125;<br><span class="hljs-keyword">var</span> ite = Iterator();<br><span class="hljs-built_in">console</span>.log(ite.next().value);<br><span class="hljs-built_in">console</span>.log(ite.next().value);<br><span class="hljs-built_in">console</span>.log(ite.next().value);<br><span class="hljs-built_in">console</span>.log(ite.next().value);<br><span class="hljs-comment">// 运行结果:</span><br><span class="hljs-comment">// 我是被第一次执行...</span><br><span class="hljs-comment">// 这</span><br><span class="hljs-comment">// 个</span><br><span class="hljs-comment">// 世</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>工作上常用的数组方法</title>
    <link href="/2021/09/20/es6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2021/09/20/es6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><ol><li><p>reduce接收好几个参数 reduce(function(initValue,currentValue,currentIndex,currentArry),init)</p><p>initValue =&gt; 初始值(上次一回调函数的返回值),由最后一个参数init 赋予</p><p>currentValue =&gt; 当前所操作数组的值</p><p>currentIndex =&gt; 当前所操作数组的下标</p><p>currentArry =&gt; 当前数组</p><p>init =&gt; 初始值,值是传递给initValue</p><p>=&gt; 求和</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>];<br><span class="hljs-comment">// 数字求和 每次计算的结果都会被赋到init上面</span><br><span class="hljs-keyword">const</span> arrList = arry.reduce(<span class="hljs-function">(<span class="hljs-params">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> init + currentValue<br><span class="hljs-comment">// 初始值为0 则 init一开始的数据就为0</span><br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.log(arrList) <span class="hljs-comment">// 48</span><br></code></pre></td></tr></table></figure><p>​        =&gt; 求每一项出现的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">const</span> arrList = arry.reduce(<span class="hljs-function">(<span class="hljs-params">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(currentValue <span class="hljs-keyword">in</span> init)&#123;<br>        init[currentValue] ++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        init[currentValue] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> init;<br><span class="hljs-comment">// 初始值设置为&#123;&#125; 因为返回出的结果 我期望是一个对象 来展现这样一个数据</span><br>&#125;,&#123;&#125;)<br><span class="hljs-comment">// console.log(arrList); </span><br><span class="hljs-comment">// 打印结果</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// 1: 2,</span><br><span class="hljs-comment">// 3: 2,</span><br><span class="hljs-comment">// 4: 1,</span><br><span class="hljs-comment">// 5: 1,</span><br><span class="hljs-comment">// 7: 2,</span><br><span class="hljs-comment">// 8: 1</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>​    =&gt; 数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">const</span> arrList = arry.reduce(<span class="hljs-function">(<span class="hljs-params">init,currentValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//includes 查找每一项有没有 有的返回true 没有则flase</span><br>    <span class="hljs-keyword">return</span> init.includes(currentValue) ? init : init.concat(currentValue);<br>&#125;,[])<br><span class="hljs-built_in">console</span>.log(arrList); <br></code></pre></td></tr></table></figure><h5 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h5><ol><li><p>includes 接收俩个参数 includes(value,index)</p><p>value =&gt;  查找的数据</p><p>index =&gt; 开始查找的下标(如果是负数则从末尾还是向右找)</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br><span class="hljs-comment">// 查找数组里面是否有3 有true 无flase;</span><br><span class="hljs-keyword">const</span> bool = arry.includes(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(bool); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>   <span class="hljs-comment">// 查找数组里面是否有3 有true 无flase;</span><br><span class="hljs-comment">// -2的位置是7 向右边找3 找不到 则flase</span><br>   <span class="hljs-keyword">const</span> bool = arry.includes(<span class="hljs-number">3</span>,-<span class="hljs-number">2</span>);<br>   <span class="hljs-built_in">console</span>.log(bool); <span class="hljs-comment">//flase</span><br><br>   <span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>   <span class="hljs-comment">// 查找数组里面是否有3 有true 无flase;</span><br><span class="hljs-comment">// -2的位置是3 向右边找3 找到了 则true</span><br>   <span class="hljs-keyword">const</span> bool = arry.includes(<span class="hljs-number">3</span>,-<span class="hljs-number">3</span>);<br>   <span class="hljs-built_in">console</span>.log(bool); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">const</span> num = arry.map(<span class="hljs-function">(<span class="hljs-params">v,i</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class="hljs-comment">// 并且会返回一个新的数组</span><br>    <span class="hljs-keyword">return</span> v;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(num) <span class="hljs-comment">// [2,3,7,8]</span><br></code></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">const</span> num = arry.filter(<span class="hljs-function">(<span class="hljs-params">v,i</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class="hljs-comment">// 过滤出大于3 返回新的数组</span><br>    <span class="hljs-keyword">return</span> v &gt; <span class="hljs-number">3</span>;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(num) <span class="hljs-comment">//[7,8]</span><br><br><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">const</span> num = arry.filter(<span class="hljs-function">(<span class="hljs-params">v,i</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// v 是数组的每一项 i每一项数组的下标</span><br>    <span class="hljs-comment">// 过滤出不等于3 返回新的数组</span><br>    <span class="hljs-keyword">return</span> v != <span class="hljs-number">3</span>;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(num) <span class="hljs-comment">//[2,7,8]</span><br></code></pre></td></tr></table></figure><h5 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h5><ol><li><p>fill 是替换掉原数组的内容,会改变原数组</p></li><li><p>fill接收三个参数 fill(value,start,end)</p><p>value =&gt; 替换的内容</p><p>start =&gt; 开始的数组下标(位置)</p><p>end =&gt; 结束的数组下边(位置)</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>   <span class="hljs-comment">// 替换的内容 66 1是开始的数组元素下标 3是结束的数组元素下标</span><br><span class="hljs-comment">// 如果不写开始下标开始位置和结束位置 则默认替换掉数组所有内容</span><br><span class="hljs-comment">// 会改变原数组</span><br>   <span class="hljs-keyword">const</span> fillArry = arry.fill(<span class="hljs-number">66</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>   <span class="hljs-built_in">console</span>.log(fillArry); <span class="hljs-comment">//[1, 66, 66, 8]</span><br></code></pre></td></tr></table></figure><h5 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h5><ol><li><p>find始查找满足条件的第一个元素</p></li><li><p>find(function(currentValue, index, arr))</p><p>=&gt; currentValue 当前值</p><p>=&gt; index 数组元素下边下标</p><p>=&gt; arr 当前值所属数组</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-comment">// 找到了返回满足条件的第一个值</span><br><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>   <span class="hljs-keyword">const</span> findArry = arry.find(<span class="hljs-function">(<span class="hljs-params">value,index,arr</span>)=&gt;</span>value &gt; <span class="hljs-number">3</span>);<br>   <span class="hljs-built_in">console</span>.log(findArry); <span class="hljs-comment">// 7</span><br><span class="hljs-comment">// 找不到则返回 undefined</span><br>   <span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>   <span class="hljs-keyword">const</span> findArry = arry.find(<span class="hljs-function">(<span class="hljs-params">value,index,arr</span>)=&gt;</span>value &gt; <span class="hljs-number">8</span>);<br>   <span class="hljs-built_in">console</span>.log(findArry); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h5 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h5><ol><li><p>findIndex是查找满足条件的第一个元素的位置</p></li><li><p>findIndex(function(currentValue, index, arr))</p><p>=&gt; currentValue 当前值</p><p>=&gt; index 数组元素下边下标</p><p>=&gt; arr 当前值所属数组</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-comment">// 找到了返回满足条件的第一个值的下标</span><br><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>   <span class="hljs-keyword">const</span> findArry = arry.findIndex(<span class="hljs-function">(<span class="hljs-params">value,index,arr</span>)=&gt;</span>value &gt; <span class="hljs-number">3</span>);<br>   <span class="hljs-built_in">console</span>.log(findArry); <span class="hljs-comment">// 2</span><br><br>   <span class="hljs-comment">// 找不到则返回 -1</span><br><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>   <span class="hljs-keyword">const</span> findArry = arry.findIndex(<span class="hljs-function">(<span class="hljs-params">value,index,arr</span>)=&gt;</span>value &gt; <span class="hljs-number">3</span>);<br>   <span class="hljs-built_in">console</span>.log(findArry); <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><h5 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h5><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">const</span> arr = [];<br><span class="hljs-keyword">for</span>(let i = <span class="hljs-number">0</span> ;i&lt;arry.<span class="hljs-built_in">length</span>;i++)&#123;<br><span class="hljs-comment">// 将数组arry里面的每一项都添加到新数组里面</span><br>    arr.push(arry[i])<br>&#125;<br>console.<span class="hljs-built_in">log</span>(arr) <span class="hljs-comment">// [2,3,7,8]</span><br></code></pre></td></tr></table></figure><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> arry = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">num</span> =  [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>];<br><span class="hljs-comment">// concat 可以将俩个数组 连接起来</span><br><span class="hljs-keyword">const</span> arNum = arry.concat(<span class="hljs-built_in">num</span>)<br>console.log(arNum) <span class="hljs-comment">// [2, 3, 7, 8, 4, 5, 6, 9, 8, 7]</span><br></code></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>项目组没UI,设计图怎么办</title>
    <link href="/2021/09/20/%E9%A1%B9%E7%9B%AE%E6%B2%A1UI,%E8%AE%BE%E8%AE%A1%E5%9B%BE%E8%87%AA%E5%B7%B1%E7%94%BB/"/>
    <url>/2021/09/20/%E9%A1%B9%E7%9B%AE%E6%B2%A1UI,%E8%AE%BE%E8%AE%A1%E5%9B%BE%E8%87%AA%E5%B7%B1%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>作为一个前端开发,你有没有类似的经历.</p><p>当你拿到你一需求的时候,只看到一个链式数据表,没有设计图,老板需要你自己去设计一个相应的设计图出来供接下来开发使用.再提一嘴我们项目组没有UI,页面设计都是一个人设计好之后几个前端和老板给出建议就行了.作为一个刚入职,不会画图,而且这个需求还是由自己去主导,也只能硬着头皮去画了,</p><p>这时候就需要一个去设计的网站或者软件了.我这边当时用的是一个在线设计的一个网站 draw.io </p><p>它可以在线编辑,保存之后有很多你想要的格式png,jpeg,svg,xml等等,还是很不错的</p><p>如果你不想在线编辑也可以去下载软件去用,这边给你贴上网站:<a href="https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5">https://github.com/jgraph/drawio-desktop/releases/tag/v12.6.5</a> 缺点就是下载比较慢</p><p>这边我给你下载好了,也可以通过我的网盘链接直接取,也有macos版本的</p><p>链接：<a href="https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA">https://pan.baidu.com/s/16vXGdjjLdf3iT8ZIpyNvwA</a><br>提取码：xm6s </p><p>最后再贴上,我画的并且一个很草率的(太难了,由于一些别的原因只能加上模糊)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对象的深克隆,内有函数,数组</title>
    <link href="/2021/09/20/%E6%B7%B1%E5%85%8B%E9%9A%86/"/>
    <url>/2021/09/20/%E6%B7%B1%E5%85%8B%E9%9A%86/</url>
    
    <content type="html"><![CDATA[<p>一个朋友在面试的时候面到了深浅克隆的问题,</p><p>浅克隆:可以直接赋值做到,但是他们引用的都是同一个地址,所以原来的改变了,浅克隆过后的数据他也回跟随其变化.</p><p>深克隆:他是直接独立出来了,克隆了一个新的出来,改变了其引用地址,所以与浅克隆相反.</p><p>我还是拿下面这个数据格式作为克隆对象 👇</p><p>它里面是有对象,有函数和数组</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const obj = &#123;<br>    <span class="hljs-string">&quot;childrenList&quot;</span>: [&#123;<br>        <span class="hljs-string">&quot;childrenList&quot;</span>: [&#123;<br>            <span class="hljs-string">&quot;childrenList&quot;</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>            &#125;,<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;子节点11&quot;</span>,<br>            <span class="hljs-string">&quot;pId&quot;</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>        &#125;],<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;子节点1&quot;</span>,<br>        <span class="hljs-string">&quot;pId&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>    &#125;],<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;根节点1&quot;</span>,<br>    <span class="hljs-string">&quot;pId&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>话不多说,直接上代码.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">num</span>) </span>&#123;<br><span class="hljs-comment">// 申明一个变量,不赋值,因为他有可变性</span><br>    let data;<br>    <span class="hljs-comment">// 判断 是否为对象</span><br>    <span class="hljs-keyword">if</span> (num <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">Object</span>) &#123;<br>    <span class="hljs-comment">// 函数是引用</span><br>        <span class="hljs-keyword">if</span> (num <span class="hljs-keyword">instanceof</span> <span class="hljs-function"><span class="hljs-keyword">Function</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-keyword">Function</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return &#x27;</span>+num.toString(<span class="hljs-params"></span>)</span>).<span class="hljs-title">call</span>(<span class="hljs-params">this</span>)</span><br><span class="hljs-function">        &#125; <span class="hljs-title">else</span> <span class="hljs-title">if</span> (<span class="hljs-params">num <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">Array</span></span>) </span>&#123;<br>        <span class="hljs-comment">// 如果数组 递归遍历就好啦</span><br>            data = [];<br>            <span class="hljs-keyword">for</span> (let v in num) &#123;<br>                data.push(<span class="hljs-keyword">clone</span>(num[v]));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 同数组一样</span><br>            data = &#123;&#125;;<br>            <span class="hljs-keyword">for</span> (let v in num) &#123;<br>                data[v] = <span class="hljs-keyword">clone</span>(num[v]);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 基本数据类型 直接赋值就好啦</span><br>        data = num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br>console.log(<span class="hljs-keyword">clone</span>(obj));<br></code></pre></td></tr></table></figure><p>以下是我深克隆之后拿到的数据 👇</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>webpack-react-ts环境</title>
    <link href="/2021/09/20/webpack-react-ts%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/09/20/webpack-react-ts%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>最近再看typescript的时候结合了官网的配置加上自己的一些配置实现了一个可以自动打包,可以去解析一些常规文件</p><p>接下来开始吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir proj<br>cd proj<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir src<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init -y<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g webpack<br></code></pre></td></tr></table></figure><p>现在我们添加React和React-DOM以及它们的声明文件到<code>package.json</code>文件里做为依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save react react-dom @types/react @types/react-dom<br></code></pre></td></tr></table></figure><p>接下来，我们要添加开发时依赖<a href="https://www.npmjs.com/package/awesome-typescript-loader">awesome-typescript-loader</a>和<a href="https://www.npmjs.com/package/source-map-loader">source-map-loader</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save-dev typescript awesome-typescript-loader source-map-loader<br></code></pre></td></tr></table></figure><p>我们需要创建一个<code>tsconfig.json</code>文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件 <code>tsconfig.json</code>文件，添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>    &quot;compilerOptions&quot;: &#123;<br>        &quot;outDir&quot;: &quot;./dist/&quot;,<br>        &quot;sourceMap&quot;: true,<br>        &quot;noImplicitAny&quot;: true,<br>        &quot;module&quot;: &quot;commonjs&quot;,<br>        &quot;target&quot;: &quot;es6&quot;,<br>        &quot;jsx&quot;: &quot;react&quot;<br>    &#125;,<br>    &quot;include&quot;: [<br>        &quot;./src/**/*&quot;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>在src目录建一个App.tsx,内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx">import * as React from &quot;react&quot;;<br><br>type Props = &#123;<br>    compiler:String,<br>    framework:String,<br>&#125;<br><br>export const App: React.FC&lt;Props&gt; = (props) =&gt; &#123;<br>    return (<br>        &lt;div className=&quot;home-wrap&quot;&gt;<br>            &lt;h1&gt;Hello from &#123;props.compiler&#125; and &#123;props.framework&#125;!&lt;/h1&gt;;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>在src目录下建一个index.tsx,内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx">import * as React from &quot;react&quot;;<br>import * as ReactDOM from &quot;react-dom&quot;;<br><br>import &#123;App&#125; from &quot;./App&quot;;<br><br>ReactDOM.render(<br>    &lt;App compiler=&quot;TypeScript&quot; framework=&quot;React&quot; /&gt;,<br>    document.getElementById(&quot;app&quot;)<br>);<br></code></pre></td></tr></table></figure><p>在proj的根目录下面建一个index.html用来展示,内容如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello React!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在proj文件里新建一个 webpack.config.js,用来配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-comment">// 入口</span><br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.tsx&quot;</span>,<br>    <span class="hljs-comment">// 出口</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>        <span class="hljs-attr">path</span>: __dirname + <span class="hljs-string">&quot;/dist&quot;</span><br>    &#125;,<br><br>    <span class="hljs-comment">// 启用 sourcemaps 以调试 webpack 的输出</span><br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;source-map&quot;</span>,<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-comment">// Add &#x27;.ts&#x27; and &#x27;.tsx&#x27; as resolvable extensions.</span><br>        <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.ts&quot;</span>, <span class="hljs-string">&quot;.tsx&quot;</span>, <span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;.json&quot;</span>]<br>    &#125;,<br><br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            <span class="hljs-comment">// 所有带有“.ts”或“.tsx”扩展名的文件都将由“awesome-typescript-loader”处理</span><br>            &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.tsx?$/</span>, loader: <span class="hljs-string">&quot;awesome-typescript-loader&quot;</span> &#125;,<br><br>            <span class="hljs-comment">// 所有输出 &#x27;.js&#x27; 文件都将包含由 &#x27;source-map-loader&#x27; 重新处理的所有源映射。</span><br>            &#123; <span class="hljs-attr">enforce</span>: <span class="hljs-string">&quot;pre&quot;</span>, <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>, loader: <span class="hljs-string">&quot;source-map-loader&quot;</span> &#125;<br>        ]<br>    &#125;,<br><br>    <span class="hljs-comment">// 当导入一个路径匹配以下之一的模块时，只需</span><br>    <span class="hljs-comment">// 假设存在相应的全局变量并改用它。</span><br>    <span class="hljs-comment">// 这很重要，因为它允许我们避免捆绑我们所有的</span><br>    <span class="hljs-comment">// 依赖项，允许浏览器在构建之间缓存这些库。</span><br>    <span class="hljs-attr">externals</span>: &#123;<br>        <span class="hljs-string">&quot;react&quot;</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>        <span class="hljs-string">&quot;react-dom&quot;</span>: <span class="hljs-string">&quot;ReactDOM&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">webpack<br></code></pre></td></tr></table></figure><p>这时候就运行成功了 ! ! !</p><p>不过远远不够</p><p>如果你想在你的文件里面写jsx后缀的或者是js后缀的,则需要去配置解析jsx和js,内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react -D<br></code></pre></td></tr></table></figure><p>安装完了之后,在你的 webpack.config.js 中添加:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">rules: [<br>    <span class="hljs-comment">// 解析jsx</span><br>    &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(js|jsx)$/</span>,<br>        exclude: <span class="hljs-regexp">/(node_modules|bower_components)/</span>,<br>        use: &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>                <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>, <span class="hljs-string">&#x27;@babel/preset-react&#x27;</span>]<br>            &#125;<br>        &#125;<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><p>这时候该项目已经可以去解析,jsx,js,ts后缀的文件了,</p><p>如果你想要去样式 less,则需要添加:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i style-loader css-loader less less-loader -D<br></code></pre></td></tr></table></figure><p>安装完之后,再去webpack.config.js里面配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">rules: [<br><span class="hljs-comment">// 解析less css 文件</span><br>    &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(css|less)$/</span>,<br>        <span class="hljs-comment">// 这玩意儿是有顺序的</span><br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>这时候就已经可以去解析css,less文件了</p><p>这时候你可能会发现,我每次写完之后都会去执行webpack打包之后再去运行index.html,特别的麻烦,这时候你可以在webpack.config.js里面去配置一个watch 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;  <br><span class="hljs-comment">// 监听 执行 webpack --watch</span><br>    <span class="hljs-attr">watch</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">watchOptions</span>: &#123;<br>        <span class="hljs-comment">// 不监听的文件或文件夹</span><br>        <span class="hljs-attr">ignored</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-comment">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高  </span><br>        aggregateTimeout: <span class="hljs-number">300</span>,<br>        <span class="hljs-comment">// 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的</span><br>        <span class="hljs-attr">poll</span>: <span class="hljs-number">1000</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>好了,你去执行webpack 或者 webpack –watch 就不要再去管cmd了 ,保存之后,会自动去打包</p><p>动手去试试吧 ! ! !</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
